/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  if (!ti->clientdata) {
    swig_cast_info *cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;
    
    while (cast) {
      if (!cast->converter)
	SWIG_TypeClientData(cast->type, clientdata);
      cast = cast->next;
    }
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNINLINE
#  define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args && (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0)) {
    PyObject *ofmt = PyString_FromString(fmt);
    if (ofmt) {
      res = PyString_Format(ofmt,args);
      Py_DECREF(ofmt);
    }
    Py_DECREF(args);
  }  
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : ((i > j) ? 1 : 0);
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static char pyswigobject_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static PyTypeObject pyswigobject_type
#if !defined(__cplusplus)
  ;  
  static int type_init = 0;
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigObject",		/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigobject_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigobject_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (self) {
    self->ptr = ptr;
    self->desc = desc;
  }
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static char pyswigpacked_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type
#if !defined(__cplusplus)
  ;
  static int type_init = 0;  
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigPacked",		/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigpacked_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigpacked_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      self->pack = pack;
      self->desc = desc;
      self->size = size;
      return (PyObject *) self;
    }
    return NULL;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }
  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = ty ? SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name) : 0;
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!type) {
    if (!PyErr_Occurred()) {
      PyErr_Format(PyExc_TypeError, "Swig: null type passed to NewPointerObj");
    }
    return robj;
  }
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BoundingBox swig_types[0]
#define SWIGTYPE_p_Color swig_types[1]
#define SWIGTYPE_p_ConditionalInt swig_types[2]
#define SWIGTYPE_p_Float2 swig_types[3]
#define SWIGTYPE_p_Float3 swig_types[4]
#define SWIGTYPE_p_Float4 swig_types[5]
#define SWIGTYPE_p_IAttr swig_types[6]
#define SWIGTYPE_p_IBlock swig_types[7]
#define SWIGTYPE_p_IKeyframeData swig_types[8]
#define SWIGTYPE_p_IMorphData swig_types[9]
#define SWIGTYPE_p_INode swig_types[10]
#define SWIGTYPE_p_IShapeData swig_types[11]
#define SWIGTYPE_p_ISkinData swig_types[12]
#define SWIGTYPE_p_ITextKeyExtraData swig_types[13]
#define SWIGTYPE_p_ITriShapeData swig_types[14]
#define SWIGTYPE_p_ITriStripsData swig_types[15]
#define SWIGTYPE_p_KeyTQuaternion_t swig_types[16]
#define SWIGTYPE_p_KeyTVector3_t swig_types[17]
#define SWIGTYPE_p_KeyTfloat_t swig_types[18]
#define SWIGTYPE_p_KeyTstd__string_t swig_types[19]
#define SWIGTYPE_p_Matrix22 swig_types[20]
#define SWIGTYPE_p_Matrix33 swig_types[21]
#define SWIGTYPE_p_Matrix44 swig_types[22]
#define SWIGTYPE_p_Quaternion swig_types[23]
#define SWIGTYPE_p_SkinWeight swig_types[24]
#define SWIGTYPE_p_Texture swig_types[25]
#define SWIGTYPE_p_TextureSource swig_types[26]
#define SWIGTYPE_p_Triangle swig_types[27]
#define SWIGTYPE_p_UVCoord swig_types[28]
#define SWIGTYPE_p_Vector3 swig_types[29]
#define SWIGTYPE_p_a_3__float swig_types[30]
#define SWIGTYPE_p_a_4__float swig_types[31]
#define SWIGTYPE_p_allocator_type swig_types[32]
#define SWIGTYPE_p_attr_ref swig_types[33]
#define SWIGTYPE_p_blk_link swig_types[34]
#define SWIGTYPE_p_blk_ref swig_types[35]
#define SWIGTYPE_p_char swig_types[36]
#define SWIGTYPE_p_difference_type swig_types[37]
#define SWIGTYPE_p_first_type swig_types[38]
#define SWIGTYPE_p_float swig_types[39]
#define SWIGTYPE_p_ifstream swig_types[40]
#define SWIGTYPE_p_key_type swig_types[41]
#define SWIGTYPE_p_mapped_type swig_types[42]
#define SWIGTYPE_p_ofstream swig_types[43]
#define SWIGTYPE_p_second_type swig_types[44]
#define SWIGTYPE_p_size_type swig_types[45]
#define SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t swig_types[46]
#define SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__allocator_type swig_types[47]
#define SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type swig_types[48]
#define SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t swig_types[49]
#define SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t__allocator_type swig_types[50]
#define SWIGTYPE_p_std__pairTint_float_t swig_types[51]
#define SWIGTYPE_p_std__string swig_types[52]
#define SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t swig_types[53]
#define SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__allocator_type swig_types[54]
#define SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type swig_types[55]
#define SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t swig_types[56]
#define SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__allocator_type swig_types[57]
#define SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type swig_types[58]
#define SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t swig_types[59]
#define SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__allocator_type swig_types[60]
#define SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type swig_types[61]
#define SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t swig_types[62]
#define SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__allocator_type swig_types[63]
#define SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type swig_types[64]
#define SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t swig_types[65]
#define SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__allocator_type swig_types[66]
#define SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type swig_types[67]
#define SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t swig_types[68]
#define SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__allocator_type swig_types[69]
#define SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type swig_types[70]
#define SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t swig_types[71]
#define SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__allocator_type swig_types[72]
#define SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type swig_types[73]
#define SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t swig_types[74]
#define SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__allocator_type swig_types[75]
#define SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type swig_types[76]
#define SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t swig_types[77]
#define SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__allocator_type swig_types[78]
#define SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type swig_types[79]
#define SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t swig_types[80]
#define SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__allocator_type swig_types[81]
#define SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type swig_types[82]
#define SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t swig_types[83]
#define SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__allocator_type swig_types[84]
#define SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type swig_types[85]
#define SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t swig_types[86]
#define SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t__allocator_type swig_types[87]
#define SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t swig_types[88]
#define SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t__allocator_type swig_types[89]
#define SWIGTYPE_p_value_type swig_types[90]
#define SWIGTYPE_p_void swig_types[91]
#define SWIGTYPE_ptrdiff_t swig_types[92]
#define SWIGTYPE_size_t swig_types[93]
#define SWIGTYPE_std__ptrdiff_t swig_types[94]
#define SWIGTYPE_std__size_t swig_types[95]
static swig_type_info *swig_types[96];
static swig_module_info swig_module = {swig_types, 96, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _niflib.so
  ------------------------------------------------*/
#define SWIG_init    init_niflib

#define SWIG_name    "_niflib"

  
#if defined(__SUNPRO_CC) 
#define SWIG_STD_NOASSIGN_STL
#define SWIG_STD_NOINSERT_TEMPLATE_STL
#endif



#include <string>
#include <stdexcept>


#include <string>


#include <iostream>  


#if PY_VERSION_HEX < 0x02000000
#define PySequence_Size PySequence_Length
#endif
#include <stdexcept>


#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


SWIGINTERN void SWIG_exception_(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { SWIG_exception_(a,b); SWIG_fail; }


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <list>


	#include "niflib.h"


#include <float.h>
SWIGINTERN int
  SWIG_CheckDoubleInRange(double value, double min_value, 
			  double max_value, const char* errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is less than %s minimum %g", 
		   value, errmsg, min_value);
    }
    return 0;
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is greater than %s maximum %g", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERN int
  SWIG_AsVal_float(PyObject *obj, float *val)
{
  const char* errmsg = val ? "float" : (char*)0;
  double v;
  if (SWIG_AsVal_double(obj, &v)) {
    if (SWIG_CheckDoubleInRange(v, -FLT_MAX, FLT_MAX, errmsg)) {
      if (val) *val = (float)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


  /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_float PyFloat_FromDouble
/*@@*/


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = (SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0) != -1) 
	? SWIG_OLDOBJ : 0;
      if (res) {
	if (val) {
	  *val = p;
	}
      } else {
	SWIG_type_error(type_name<Type>(), obj);
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static bool asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if ((res != 0) && p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (res == SWIG_NEWOBJ) delete p;
	  return true;
	} else {
	  return false;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0)) ? true : false;
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static bool asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj, &p);
        if (res) {
          *(const_cast<noconst_type**>(val)) = p;
     	  return true;
	} else {
	  return false;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0)) ? true : false;
      }
    }
  };
  
  template <class Type>
  inline bool asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val) ? true : false;
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      if (!obj || !asval(obj, &v)) {
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : 0);
      if (res && v) {
	if (res == SWIG_NEWOBJ) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : 0);
      if (res) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<Type>(), obj);
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      return obj && asval(obj, (Type *)(0));
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      return obj && asptr(obj, (Type **)(0));
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits<float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };  
  template <>  struct traits_asval<float > {   
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_float(obj, val);
    }
  };
  template <>  struct traits_from<float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float(val);
    }
  };
}


  namespace swig {
    struct PyObject_var {
      PyObject* ptr;
      PyObject_var(PyObject* obj = 0) : ptr(obj) { }      
      ~PyObject_var() { if (ptr) Py_DECREF(ptr); }      
      operator PyObject*() { return ptr; }
      PyObject* operator->() const { return ptr; }
    };
  }


namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) 
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator 
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin(); 
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator 
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin(); 
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) { 
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    
    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    typename Sequence::iterator sb = self->begin();
    typename InputSeq::const_iterator vmid = v.begin();
    std::advance(sb,ii);
    std::advance(vmid, jj - ii);
    self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
  }
 
  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#include <iterator>
namespace swig
{
  template <class T> 
  struct PySequence_Ref
  {
    PySequence_Ref(PyObject* seq, int index) 
      : _seq(seq), _index(index)
    {
    }

    operator T () const 
    {
      swig::PyObject_var item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	PyOS_snprintf(msg, sizeof(msg), "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  SWIG_type_error(swig::type_name<T>(), item);
	}
	SWIG_append_errmsg(msg);
	SWIG_append_errmsg(e.what());
	throw;
      }
    }
    
    PySequence_Ref& operator=(const T& v) 
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }
    
  private:
    PyObject* _seq;
    int _index;
  };

  template <class T> 
  struct PySequence_ArrowProxy 
  {
    PySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };    

  template <class T, class Reference > 
  struct PySequence_Iter
  {
    typedef PySequence_Iter<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    PySequence_Iter()
    {
    }

    PySequence_Iter(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    { 
      return reference(_seq, _index);
    }

    PySequence_ArrowProxy<T>
    operator->() const {
      return PySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const 
    { 
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const 
    {
      return !(operator==(ri));
    }    

    self& operator ++ ()
    {
      ++_index;      
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n) 
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n) 
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }    

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    reference 
    operator[](difference_type n) const 
    { 
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    int _index;
  }; 

  template <class T> 
  struct PySequence_Cont
  {
    typedef PySequence_Ref<T> reference;
    typedef const PySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef PySequence_Iter<T, reference> iterator;
    typedef PySequence_Iter<T, const_reference> const_iterator;

    PySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~PySequence_Cont() 
    {
      if (_seq) Py_DECREF(_seq);
    }

    size_type size() const
    {
      return PySequence_Size(_seq);
    }

    bool empty() const
    {
      return size() == 0;
    }    

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }
    
    iterator end()
    {
      return iterator(_seq, size());
    }
    
    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }    

    reference operator[](difference_type n) 
    { 
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    { 
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::PyObject_var item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    PyOS_snprintf(msg, sizeof(msg), "in sequence element %d", i);
	    SWIG_type_error(swig::type_name<value_type>(), item);
	    SWIG_append_errmsg(msg);
	  }
	  return 0;
	}
      }
      return 1;  
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <class PySeq, class Seq> 
    inline void
    assign(const PySeq& pyseq, Seq* seq) {
#ifdef SWIG_STD_NOASSIGN_STL
      typedef typename PySeq::value_type value_type;
      typename PySeq::const_iterator it = pyseq.begin();
      for (;it != pyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
#else
      seq->assign(pyseq.begin(), pyseq.end());
#endif
    }

    template <class Seq, class T = typename Seq::value_type >
    struct traits_asptr_stdseq {
      typedef Seq sequence;
      typedef T value_type;
		    
      static int asptr(PyObject *obj, sequence **seq) {
	if (PySequence_Check(obj)) {
	  try {
	    PySequence_Cont<value_type> pyseq(obj);
	    if (seq) {
	      sequence *pseq = new sequence();
	      assign(pyseq, pseq);
	      *seq = pseq;
	      return SWIG_NEWOBJ;
	    } else {
	      return pyseq.check();
	    }
	  } catch (std::exception& e) {
	    if (seq) {
	      if (!PyErr_Occurred())
		PyErr_SetString(PyExc_TypeError, e.what());
	    }
	    return 0;
	  }
	} else {
	  sequence *p;
	  if (SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) != -1) {
	    if (seq) *seq = p;
	    return 1;
	  }
	}
	if (seq) {
	  PyErr_Format(PyExc_TypeError, "a %s is expected", 
		       swig::type_name<sequence>());
	}
	return 0;	  
      }
    };

    template <class Seq, class T = typename Seq::value_type >
    struct traits_from_stdseq {
      typedef Seq sequence;
      typedef T value_type;
      typedef typename Seq::size_type size_type;
      typedef typename sequence::const_iterator const_iterator;

      static PyObject *from(const sequence& seq) {
	size_type size = seq.size();
	if (size <= (size_type)INT_MAX) {
	  PyObject *obj = PyTuple_New((int)size);
	  int i = 0;
	  for (const_iterator it = seq.begin();
	       it != seq.end(); ++it, ++i) {
	    PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	  }
	  return obj;
	} else {
	  PyErr_SetString(PyExc_OverflowError,
			  "sequence size not valid in python");
	  return NULL;
	}
      }
    };
  }


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<float, std::allocator<float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator<float >" " >";
	  }
	};
      }
    

SWIGINTERNINLINE PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


SWIGINTERNINLINE PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


SWIGINTERNINLINE unsigned long
SWIG_As_unsigned_SS_long(PyObject* obj)
{
  unsigned long v;
  if (!SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_long(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_long(obj, (unsigned long*)0);
}


SWIGINTERNINLINE float
SWIG_As_float(PyObject* obj)
{
  float v;
  if (!SWIG_AsVal_float(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(float));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_float(PyObject* obj)
{
  return SWIG_AsVal_float(obj, (float*)0);
}

static bool std_vector_Sl_float_Sg____nonzero__(std::vector<float > const *self){
      return !(self->empty());
    }
static std::vector<float >::size_type std_vector_Sl_float_Sg____len__(std::vector<float > const *self){
      return self->size();
    }
static std::vector<float >::value_type std_vector_Sl_float_Sg__pop(std::vector<float > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<float,std::allocator<float > >::value_type x = self->back();
      self->pop_back();
      return x;
    }

SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


SWIGINTERNINLINE long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}

static std::vector<float,std::allocator<float > > *std_vector_Sl_float_Sg____getslice__(std::vector<float > *self,std::vector<float >::difference_type i,std::vector<float >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_float_Sg____setslice__(std::vector<float > *self,std::vector<float >::difference_type i,std::vector<float >::difference_type j,std::vector<float,std::allocator<float > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_float_Sg____delslice__(std::vector<float > *self,std::vector<float >::difference_type i,std::vector<float >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_float_Sg____delitem__(std::vector<float > *self,std::vector<float >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<float >::value_type const &std_vector_Sl_float_Sg____getitem__(std::vector<float > const *self,std::vector<float >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_float_Sg____setitem__(std::vector<float > *self,std::vector<float >::difference_type i,std::vector<float >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_float_Sg__append(std::vector<float > *self,std::vector<float >::value_type const &x){
      self->push_back(x);
    }

#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_short(PyObject *obj, short *val)
{ 
  const char* errmsg = val ? "short" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, SHRT_MIN, SHRT_MAX, errmsg)) {
      if (val) *val = (short)(v);
      return 1;
    } else {
      return 0;
    }    
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}


  /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_short PyInt_FromLong
/*@@*/


namespace swig {
  template <> struct traits<short > {
    typedef value_category category;
    static const char* type_name() { return"short"; }
  };  
  template <>  struct traits_asval<short > {   
    typedef short value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_short(obj, val);
    }
  };
  template <>  struct traits_from<short > {
    typedef short value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_short(val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<short, std::allocator<short > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "short" "," "std::allocator<short >" " >";
	  }
	};
      }
    

SWIGINTERNINLINE short
SWIG_As_short(PyObject* obj)
{
  short v;
  if (!SWIG_AsVal_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(short));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_short(PyObject* obj)
{
  return SWIG_AsVal_short(obj, (short*)0);
}

static bool std_vector_Sl_short_Sg____nonzero__(std::vector<short > const *self){
      return !(self->empty());
    }
static std::vector<short >::size_type std_vector_Sl_short_Sg____len__(std::vector<short > const *self){
      return self->size();
    }
static std::vector<short >::value_type std_vector_Sl_short_Sg__pop(std::vector<short > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<short,std::allocator<short > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<short,std::allocator<short > > *std_vector_Sl_short_Sg____getslice__(std::vector<short > *self,std::vector<short >::difference_type i,std::vector<short >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_short_Sg____setslice__(std::vector<short > *self,std::vector<short >::difference_type i,std::vector<short >::difference_type j,std::vector<short,std::allocator<short > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_short_Sg____delslice__(std::vector<short > *self,std::vector<short >::difference_type i,std::vector<short >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_short_Sg____delitem__(std::vector<short > *self,std::vector<short >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<short >::value_type const &std_vector_Sl_short_Sg____getitem__(std::vector<short > const *self,std::vector<short >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_short_Sg____setitem__(std::vector<short > *self,std::vector<short >::difference_type i,std::vector<short >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_short_Sg__append(std::vector<short > *self,std::vector<short >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<attr_ref > {
      typedef pointer_category category;
      static const char* type_name() { return"attr_ref"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<attr_ref, std::allocator<attr_ref > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "attr_ref" "," "std::allocator<attr_ref >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_attr_ref_Sg____nonzero__(std::vector<attr_ref > const *self){
      return !(self->empty());
    }
static std::vector<attr_ref >::size_type std_vector_Sl_attr_ref_Sg____len__(std::vector<attr_ref > const *self){
      return self->size();
    }
static std::vector<attr_ref >::value_type std_vector_Sl_attr_ref_Sg__pop(std::vector<attr_ref > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<attr_ref,std::allocator<attr_ref > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<attr_ref,std::allocator<attr_ref > > *std_vector_Sl_attr_ref_Sg____getslice__(std::vector<attr_ref > *self,std::vector<attr_ref >::difference_type i,std::vector<attr_ref >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_attr_ref_Sg____setslice__(std::vector<attr_ref > *self,std::vector<attr_ref >::difference_type i,std::vector<attr_ref >::difference_type j,std::vector<attr_ref,std::allocator<attr_ref > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_attr_ref_Sg____delslice__(std::vector<attr_ref > *self,std::vector<attr_ref >::difference_type i,std::vector<attr_ref >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_attr_ref_Sg____delitem__(std::vector<attr_ref > *self,std::vector<attr_ref >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<attr_ref >::value_type const &std_vector_Sl_attr_ref_Sg____getitem__(std::vector<attr_ref > const *self,std::vector<attr_ref >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_attr_ref_Sg____setitem__(std::vector<attr_ref > *self,std::vector<attr_ref >::difference_type i,std::vector<attr_ref >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_attr_ref_Sg__append(std::vector<attr_ref > *self,std::vector<attr_ref >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<blk_ref > {
      typedef pointer_category category;
      static const char* type_name() { return"blk_ref"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<blk_ref, std::allocator<blk_ref > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "blk_ref" "," "std::allocator<blk_ref >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_blk_ref_Sg____nonzero__(std::vector<blk_ref > const *self){
      return !(self->empty());
    }
static std::vector<blk_ref >::size_type std_vector_Sl_blk_ref_Sg____len__(std::vector<blk_ref > const *self){
      return self->size();
    }
static std::vector<blk_ref >::value_type std_vector_Sl_blk_ref_Sg__pop(std::vector<blk_ref > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<blk_ref,std::allocator<blk_ref > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<blk_ref,std::allocator<blk_ref > > *std_vector_Sl_blk_ref_Sg____getslice__(std::vector<blk_ref > *self,std::vector<blk_ref >::difference_type i,std::vector<blk_ref >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_blk_ref_Sg____setslice__(std::vector<blk_ref > *self,std::vector<blk_ref >::difference_type i,std::vector<blk_ref >::difference_type j,std::vector<blk_ref,std::allocator<blk_ref > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_blk_ref_Sg____delslice__(std::vector<blk_ref > *self,std::vector<blk_ref >::difference_type i,std::vector<blk_ref >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_blk_ref_Sg____delitem__(std::vector<blk_ref > *self,std::vector<blk_ref >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<blk_ref >::value_type const &std_vector_Sl_blk_ref_Sg____getitem__(std::vector<blk_ref > const *self,std::vector<blk_ref >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_blk_ref_Sg____setitem__(std::vector<blk_ref > *self,std::vector<blk_ref >::difference_type i,std::vector<blk_ref >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_blk_ref_Sg__append(std::vector<blk_ref > *self,std::vector<blk_ref >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <class T >
    struct traits_asptr<std::list<T> >  {
      static int asptr(PyObject *obj, std::list<T> **lis) {
	return traits_asptr_stdseq<std::list<T> >::asptr(obj, lis);
      }
    };

    template <class T>
    struct traits_from<std::list<T> > {
      static PyObject *from(const std::list<T> & vec) {
	return traits_from_stdseq<std::list<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::list<blk_ref, std::allocator<blk_ref > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::list<" "blk_ref" ", " "std::allocator<blk_ref >" " >";
	  }
	};
      }
    
static bool std_list_Sl_blk_ref_Sg____nonzero__(std::list<blk_ref > const *self){
      return !(self->empty());
    }
static std::list<blk_ref >::size_type std_list_Sl_blk_ref_Sg____len__(std::list<blk_ref > const *self){
      return self->size();
    }
static std::list<blk_ref >::value_type std_list_Sl_blk_ref_Sg__pop(std::list<blk_ref > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::list<blk_ref,std::allocator<blk_ref > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::list<blk_ref,std::allocator<blk_ref > > *std_list_Sl_blk_ref_Sg____getslice__(std::list<blk_ref > *self,std::list<blk_ref >::difference_type i,std::list<blk_ref >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_list_Sl_blk_ref_Sg____setslice__(std::list<blk_ref > *self,std::list<blk_ref >::difference_type i,std::list<blk_ref >::difference_type j,std::list<blk_ref,std::allocator<blk_ref > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_list_Sl_blk_ref_Sg____delslice__(std::list<blk_ref > *self,std::list<blk_ref >::difference_type i,std::list<blk_ref >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_list_Sl_blk_ref_Sg____delitem__(std::list<blk_ref > *self,std::list<blk_ref >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::list<blk_ref >::value_type const &std_list_Sl_blk_ref_Sg____getitem__(std::list<blk_ref > const *self,std::list<blk_ref >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_list_Sl_blk_ref_Sg____setitem__(std::list<blk_ref > *self,std::list<blk_ref >::difference_type i,std::list<blk_ref >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_list_Sl_blk_ref_Sg__append(std::list<blk_ref > *self,std::list<blk_ref >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Vector3 > {
      typedef pointer_category category;
      static const char* type_name() { return"Vector3"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Vector3, std::allocator<Vector3 > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Vector3" "," "std::allocator<Vector3 >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_Vector3_Sg____nonzero__(std::vector<Vector3 > const *self){
      return !(self->empty());
    }
static std::vector<Vector3 >::size_type std_vector_Sl_Vector3_Sg____len__(std::vector<Vector3 > const *self){
      return self->size();
    }
static std::vector<Vector3 >::value_type std_vector_Sl_Vector3_Sg__pop(std::vector<Vector3 > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Vector3,std::allocator<Vector3 > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<Vector3,std::allocator<Vector3 > > *std_vector_Sl_Vector3_Sg____getslice__(std::vector<Vector3 > *self,std::vector<Vector3 >::difference_type i,std::vector<Vector3 >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_Vector3_Sg____setslice__(std::vector<Vector3 > *self,std::vector<Vector3 >::difference_type i,std::vector<Vector3 >::difference_type j,std::vector<Vector3,std::allocator<Vector3 > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_Vector3_Sg____delslice__(std::vector<Vector3 > *self,std::vector<Vector3 >::difference_type i,std::vector<Vector3 >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_Vector3_Sg____delitem__(std::vector<Vector3 > *self,std::vector<Vector3 >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<Vector3 >::value_type const &std_vector_Sl_Vector3_Sg____getitem__(std::vector<Vector3 > const *self,std::vector<Vector3 >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_Vector3_Sg____setitem__(std::vector<Vector3 > *self,std::vector<Vector3 >::difference_type i,std::vector<Vector3 >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_Vector3_Sg__append(std::vector<Vector3 > *self,std::vector<Vector3 >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Color > {
      typedef pointer_category category;
      static const char* type_name() { return"Color"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Color, std::allocator<Color > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Color" "," "std::allocator<Color >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_Color_Sg____nonzero__(std::vector<Color > const *self){
      return !(self->empty());
    }
static std::vector<Color >::size_type std_vector_Sl_Color_Sg____len__(std::vector<Color > const *self){
      return self->size();
    }
static std::vector<Color >::value_type std_vector_Sl_Color_Sg__pop(std::vector<Color > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Color,std::allocator<Color > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<Color,std::allocator<Color > > *std_vector_Sl_Color_Sg____getslice__(std::vector<Color > *self,std::vector<Color >::difference_type i,std::vector<Color >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_Color_Sg____setslice__(std::vector<Color > *self,std::vector<Color >::difference_type i,std::vector<Color >::difference_type j,std::vector<Color,std::allocator<Color > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_Color_Sg____delslice__(std::vector<Color > *self,std::vector<Color >::difference_type i,std::vector<Color >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_Color_Sg____delitem__(std::vector<Color > *self,std::vector<Color >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<Color >::value_type const &std_vector_Sl_Color_Sg____getitem__(std::vector<Color > const *self,std::vector<Color >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_Color_Sg____setitem__(std::vector<Color > *self,std::vector<Color >::difference_type i,std::vector<Color >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_Color_Sg__append(std::vector<Color > *self,std::vector<Color >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<UVCoord > {
      typedef pointer_category category;
      static const char* type_name() { return"UVCoord"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<UVCoord, std::allocator<UVCoord > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "UVCoord" "," "std::allocator<UVCoord >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_UVCoord_Sg____nonzero__(std::vector<UVCoord > const *self){
      return !(self->empty());
    }
static std::vector<UVCoord >::size_type std_vector_Sl_UVCoord_Sg____len__(std::vector<UVCoord > const *self){
      return self->size();
    }
static std::vector<UVCoord >::value_type std_vector_Sl_UVCoord_Sg__pop(std::vector<UVCoord > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<UVCoord,std::allocator<UVCoord > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<UVCoord,std::allocator<UVCoord > > *std_vector_Sl_UVCoord_Sg____getslice__(std::vector<UVCoord > *self,std::vector<UVCoord >::difference_type i,std::vector<UVCoord >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_UVCoord_Sg____setslice__(std::vector<UVCoord > *self,std::vector<UVCoord >::difference_type i,std::vector<UVCoord >::difference_type j,std::vector<UVCoord,std::allocator<UVCoord > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_UVCoord_Sg____delslice__(std::vector<UVCoord > *self,std::vector<UVCoord >::difference_type i,std::vector<UVCoord >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_UVCoord_Sg____delitem__(std::vector<UVCoord > *self,std::vector<UVCoord >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<UVCoord >::value_type const &std_vector_Sl_UVCoord_Sg____getitem__(std::vector<UVCoord > const *self,std::vector<UVCoord >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_UVCoord_Sg____setitem__(std::vector<UVCoord > *self,std::vector<UVCoord >::difference_type i,std::vector<UVCoord >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_UVCoord_Sg__append(std::vector<UVCoord > *self,std::vector<UVCoord >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Triangle > {
      typedef pointer_category category;
      static const char* type_name() { return"Triangle"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Triangle, std::allocator<Triangle > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Triangle" "," "std::allocator<Triangle >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_Triangle_Sg____nonzero__(std::vector<Triangle > const *self){
      return !(self->empty());
    }
static std::vector<Triangle >::size_type std_vector_Sl_Triangle_Sg____len__(std::vector<Triangle > const *self){
      return self->size();
    }
static std::vector<Triangle >::value_type std_vector_Sl_Triangle_Sg__pop(std::vector<Triangle > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Triangle,std::allocator<Triangle > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<Triangle,std::allocator<Triangle > > *std_vector_Sl_Triangle_Sg____getslice__(std::vector<Triangle > *self,std::vector<Triangle >::difference_type i,std::vector<Triangle >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_Triangle_Sg____setslice__(std::vector<Triangle > *self,std::vector<Triangle >::difference_type i,std::vector<Triangle >::difference_type j,std::vector<Triangle,std::allocator<Triangle > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_Triangle_Sg____delslice__(std::vector<Triangle > *self,std::vector<Triangle >::difference_type i,std::vector<Triangle >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_Triangle_Sg____delitem__(std::vector<Triangle > *self,std::vector<Triangle >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<Triangle >::value_type const &std_vector_Sl_Triangle_Sg____getitem__(std::vector<Triangle > const *self,std::vector<Triangle >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_Triangle_Sg____setitem__(std::vector<Triangle > *self,std::vector<Triangle >::difference_type i,std::vector<Triangle >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_Triangle_Sg__append(std::vector<Triangle > *self,std::vector<Triangle >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<SkinWeight > {
      typedef pointer_category category;
      static const char* type_name() { return"SkinWeight"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<SkinWeight, std::allocator<SkinWeight > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "SkinWeight" "," "std::allocator<SkinWeight >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_SkinWeight_Sg____nonzero__(std::vector<SkinWeight > const *self){
      return !(self->empty());
    }
static std::vector<SkinWeight >::size_type std_vector_Sl_SkinWeight_Sg____len__(std::vector<SkinWeight > const *self){
      return self->size();
    }
static std::vector<SkinWeight >::value_type std_vector_Sl_SkinWeight_Sg__pop(std::vector<SkinWeight > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<SkinWeight,std::allocator<SkinWeight > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<SkinWeight,std::allocator<SkinWeight > > *std_vector_Sl_SkinWeight_Sg____getslice__(std::vector<SkinWeight > *self,std::vector<SkinWeight >::difference_type i,std::vector<SkinWeight >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_SkinWeight_Sg____setslice__(std::vector<SkinWeight > *self,std::vector<SkinWeight >::difference_type i,std::vector<SkinWeight >::difference_type j,std::vector<SkinWeight,std::allocator<SkinWeight > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_SkinWeight_Sg____delslice__(std::vector<SkinWeight > *self,std::vector<SkinWeight >::difference_type i,std::vector<SkinWeight >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_SkinWeight_Sg____delitem__(std::vector<SkinWeight > *self,std::vector<SkinWeight >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<SkinWeight >::value_type const &std_vector_Sl_SkinWeight_Sg____getitem__(std::vector<SkinWeight > const *self,std::vector<SkinWeight >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_SkinWeight_Sg____setitem__(std::vector<SkinWeight > *self,std::vector<SkinWeight >::difference_type i,std::vector<SkinWeight >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_SkinWeight_Sg__append(std::vector<SkinWeight > *self,std::vector<SkinWeight >::value_type const &x){
      self->push_back(x);
    }

#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNINLINE int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


  /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int(obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int(val);
    }
  };
}


  namespace swig {
    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	typedef std::pair<T,U> value_type;
	if (PySequence_Check(obj) && (PySequence_Size(obj) == 2)) {
	  swig::PyObject_var first = PySequence_GetItem(obj,0);
	  swig::PyObject_var second = PySequence_GetItem(obj,1);
	  T *pfirst = 0;
	  U *psecond = 0;
	  if (val) {
	    *val = new std::pair<T,U>;
	    pfirst = &((*val)->first);
	    psecond = &((*val)->second);
	  }	  
	  if (swig::asval(first,pfirst) && swig::asval(second,psecond)) {
	    return SWIG_NEWOBJ;
	  } else {
	    delete *val;
	  }
	} else {
	  value_type *p;
	  if (SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<value_type>(),0) != -1) {
	    if (val) *val = p;
	    return SWIG_OLDOBJ;
	  }
	}
	if (val) {
	  PyErr_Format(PyExc_TypeError, "a %s is expected", 
		       swig::type_name<value_type>());
	}
	return 0;
      }
    };

    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair<int,float > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "float" " >";
	  }
	};
      }
    

  namespace swig {
    template <class PySeq, class K, class T >
    inline void
    assign(const PySeq& pyseq, std::map<K,T > *map) {
      typedef typename std::map<K,T>::value_type value_type;
      typename PySeq::const_iterator it = pyseq.begin();
      for (;it != pyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T>
    struct traits_asptr<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      static int asptr(PyObject *obj, map_type **val) {
	if (PyDict_Check(obj)) {
	  PyObject_var items = PyMapping_Items(obj);
	  return traits_asptr_stdseq<std::map<K,T>, std::pair<K, T> >
	    ::asptr(items, val);
	}
	if (val) {
	  PyErr_SetString(PyExc_TypeError, "a dictionary is expected");
	}
	return 0;
      }      
    };
      
    template <class K, class T >
    struct traits_from<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;
            
      static PyObject *from(const map_type& map) {
	size_type size = map.size();
	int pysize = (size <= (size_type) INT_MAX) ? (int) size : -1;
	if (pysize < 0) {
	  PyErr_SetString(PyExc_OverflowError,
			  "map size not valid in python");
	  return NULL;
	}
	PyObject *obj = PyDict_New();
	for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	  PyDict_SetItem(obj,
			 swig::from(i->first),
			 swig::from(i->second));
	}
	return obj;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::map<int, float, std::less<int >, std::allocator<std::pair<int const,float > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "int" "," "float" "," "std::less<int >" "," "std::allocator<std::pair<int const,float > >" " >";
	  }
	};
      }
    
static bool std_map_Sl_int_Sc_float_Sg____nonzero__(std::map<int,float > const *self){
      return !(self->empty());
    }
static std::map<int,float >::size_type std_map_Sl_int_Sc_float_Sg____len__(std::map<int,float > const *self){
      return self->size();
    }
static std::map<int,float >::mapped_type std_map_Sl_int_Sc_float_Sg____getitem__(std::map<int,float > const *self,std::map<int,float >::key_type const &key){
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
static void std_map_Sl_int_Sc_float_Sg____setitem__(std::map<int,float > *self,std::map<int,float >::key_type const &key,std::map<int,float >::mapped_type const &x){
      self->insert(std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::value_type(key,x));
    }
static void std_map_Sl_int_Sc_float_Sg____delitem__(std::map<int,float > *self,std::map<int,float >::key_type const &key){
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
static bool std_map_Sl_int_Sc_float_Sg__has_key(std::map<int,float > const *self,std::map<int,float >::key_type const &key){
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
static PyObject *std_map_Sl_int_Sc_float_Sg__keys(std::map<int,float > *self){
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::size_type size = self->size();
      int pysize = (size <= (std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SetItem(keyList, j, swig::from(i->first));
      }
      return keyList;
    }
static PyObject *std_map_Sl_int_Sc_float_Sg__values(std::map<int,float > *self){
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::size_type size = self->size();
      int pysize = (size <= (std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* valList = PyTuple_New(pysize);
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(valList, j, swig::from(i->second));
      }
      return valList;
    }
static PyObject *std_map_Sl_int_Sc_float_Sg__items(std::map<int,float > *self){
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::size_type size = self->size();
      int pysize = (size <= (std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }    
      PyObject* itemList = PyTuple_New(pysize);
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(itemList, j, swig::from(*i));
      }
      return itemList;
    }
static bool std_map_Sl_int_Sc_float_Sg____contains__(std::map<int,float > *self,std::map<int,float >::key_type const &key){
      return self->find(key) != self->end();
    }
static PyObject *std_map_Sl_int_Sc_float_Sg____iter__(std::map<int,float > *self){
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::size_type size = self->size();
      int pysize = (size <= (std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::size_type) INT_MAX) ? (int) size : -1;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	return NULL;
      }
      PyObject* keyTuple = PyTuple_New(pysize);
      std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyTuple_SetItem(keyTuple, j, swig::from(i->first));
      }
#if PY_VERSION_HEX >= 0x02020000
      PyObject* iter = PyObject_GetIter(keyTuple);
      Py_DECREF(keyTuple);
      return iter;
#else
      return keyTuple;
#endif
    }

  namespace swig {
    template <>  struct traits<Key<Quaternion > > {
      typedef pointer_category category;
      static const char* type_name() { return"Key<Quaternion >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Key<Quaternion >, std::allocator<Key<Quaternion > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Key<Quaternion >" "," "std::allocator<Key<Quaternion > >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____nonzero__(std::vector<Key<Quaternion > > const *self){
      return !(self->empty());
    }
static std::vector<Key<Quaternion > >::size_type std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____len__(std::vector<Key<Quaternion > > const *self){
      return self->size();
    }
static std::vector<Key<Quaternion > >::value_type std_vector_Sl_Key_Sl_Quaternion_Sg__Sg__pop(std::vector<Key<Quaternion > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > > *std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____getslice__(std::vector<Key<Quaternion > > *self,std::vector<Key<Quaternion > >::difference_type i,std::vector<Key<Quaternion > >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____setslice__(std::vector<Key<Quaternion > > *self,std::vector<Key<Quaternion > >::difference_type i,std::vector<Key<Quaternion > >::difference_type j,std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____delslice__(std::vector<Key<Quaternion > > *self,std::vector<Key<Quaternion > >::difference_type i,std::vector<Key<Quaternion > >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____delitem__(std::vector<Key<Quaternion > > *self,std::vector<Key<Quaternion > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<Key<Quaternion > >::value_type const &std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____getitem__(std::vector<Key<Quaternion > > const *self,std::vector<Key<Quaternion > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____setitem__(std::vector<Key<Quaternion > > *self,std::vector<Key<Quaternion > >::difference_type i,std::vector<Key<Quaternion > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_Key_Sl_Quaternion_Sg__Sg__append(std::vector<Key<Quaternion > > *self,std::vector<Key<Quaternion > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Key<Vector3 > > {
      typedef pointer_category category;
      static const char* type_name() { return"Key<Vector3 >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Key<Vector3 >, std::allocator<Key<Vector3 > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Key<Vector3 >" "," "std::allocator<Key<Vector3 > >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_Key_Sl_Vector3_Sg__Sg____nonzero__(std::vector<Key<Vector3 > > const *self){
      return !(self->empty());
    }
static std::vector<Key<Vector3 > >::size_type std_vector_Sl_Key_Sl_Vector3_Sg__Sg____len__(std::vector<Key<Vector3 > > const *self){
      return self->size();
    }
static std::vector<Key<Vector3 > >::value_type std_vector_Sl_Key_Sl_Vector3_Sg__Sg__pop(std::vector<Key<Vector3 > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > > *std_vector_Sl_Key_Sl_Vector3_Sg__Sg____getslice__(std::vector<Key<Vector3 > > *self,std::vector<Key<Vector3 > >::difference_type i,std::vector<Key<Vector3 > >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_Key_Sl_Vector3_Sg__Sg____setslice__(std::vector<Key<Vector3 > > *self,std::vector<Key<Vector3 > >::difference_type i,std::vector<Key<Vector3 > >::difference_type j,std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_Key_Sl_Vector3_Sg__Sg____delslice__(std::vector<Key<Vector3 > > *self,std::vector<Key<Vector3 > >::difference_type i,std::vector<Key<Vector3 > >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_Key_Sl_Vector3_Sg__Sg____delitem__(std::vector<Key<Vector3 > > *self,std::vector<Key<Vector3 > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<Key<Vector3 > >::value_type const &std_vector_Sl_Key_Sl_Vector3_Sg__Sg____getitem__(std::vector<Key<Vector3 > > const *self,std::vector<Key<Vector3 > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_Key_Sl_Vector3_Sg__Sg____setitem__(std::vector<Key<Vector3 > > *self,std::vector<Key<Vector3 > >::difference_type i,std::vector<Key<Vector3 > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_Key_Sl_Vector3_Sg__Sg__append(std::vector<Key<Vector3 > > *self,std::vector<Key<Vector3 > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Key<float > > {
      typedef pointer_category category;
      static const char* type_name() { return"Key<float >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Key<float >, std::allocator<Key<float > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Key<float >" "," "std::allocator<Key<float > >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_Key_Sl_float_Sg__Sg____nonzero__(std::vector<Key<float > > const *self){
      return !(self->empty());
    }
static std::vector<Key<float > >::size_type std_vector_Sl_Key_Sl_float_Sg__Sg____len__(std::vector<Key<float > > const *self){
      return self->size();
    }
static std::vector<Key<float > >::value_type std_vector_Sl_Key_Sl_float_Sg__Sg__pop(std::vector<Key<float > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Key<float >,std::allocator<Key<float > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<Key<float >,std::allocator<Key<float > > > *std_vector_Sl_Key_Sl_float_Sg__Sg____getslice__(std::vector<Key<float > > *self,std::vector<Key<float > >::difference_type i,std::vector<Key<float > >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_Key_Sl_float_Sg__Sg____setslice__(std::vector<Key<float > > *self,std::vector<Key<float > >::difference_type i,std::vector<Key<float > >::difference_type j,std::vector<Key<float >,std::allocator<Key<float > > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_Key_Sl_float_Sg__Sg____delslice__(std::vector<Key<float > > *self,std::vector<Key<float > >::difference_type i,std::vector<Key<float > >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_Key_Sl_float_Sg__Sg____delitem__(std::vector<Key<float > > *self,std::vector<Key<float > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<Key<float > >::value_type const &std_vector_Sl_Key_Sl_float_Sg__Sg____getitem__(std::vector<Key<float > > const *self,std::vector<Key<float > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_Key_Sl_float_Sg__Sg____setitem__(std::vector<Key<float > > *self,std::vector<Key<float > >::difference_type i,std::vector<Key<float > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_Key_Sl_float_Sg__Sg__append(std::vector<Key<float > > *self,std::vector<Key<float > >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Key<std::string > > {
      typedef pointer_category category;
      static const char* type_name() { return"Key<std::string >"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Key<std::string >, std::allocator<Key<std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Key<std::string >" "," "std::allocator<Key<std::string > >" " >";
	  }
	};
      }
    
static bool std_vector_Sl_Key_Sl_std_string_Sg__Sg____nonzero__(std::vector<Key<std::string > > const *self){
      return !(self->empty());
    }
static std::vector<Key<std::string > >::size_type std_vector_Sl_Key_Sl_std_string_Sg__Sg____len__(std::vector<Key<std::string > > const *self){
      return self->size();
    }
static std::vector<Key<std::string > >::value_type std_vector_Sl_Key_Sl_std_string_Sg__Sg__pop(std::vector<Key<std::string > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Key<std::string >,std::allocator<Key<std::string > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
static std::vector<Key<std::string >,std::allocator<Key<std::string > > > *std_vector_Sl_Key_Sl_std_string_Sg__Sg____getslice__(std::vector<Key<std::string > > *self,std::vector<Key<std::string > >::difference_type i,std::vector<Key<std::string > >::difference_type j){
      return swig::getslice(self, i, j);
    }
static void std_vector_Sl_Key_Sl_std_string_Sg__Sg____setslice__(std::vector<Key<std::string > > *self,std::vector<Key<std::string > >::difference_type i,std::vector<Key<std::string > >::difference_type j,std::vector<Key<std::string >,std::allocator<Key<std::string > > > const &v){
      swig::setslice(self, i, j, v);
    }
static void std_vector_Sl_Key_Sl_std_string_Sg__Sg____delslice__(std::vector<Key<std::string > > *self,std::vector<Key<std::string > >::difference_type i,std::vector<Key<std::string > >::difference_type j){
      swig::delslice(self, i, j);
    }
static void std_vector_Sl_Key_Sl_std_string_Sg__Sg____delitem__(std::vector<Key<std::string > > *self,std::vector<Key<std::string > >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
static std::vector<Key<std::string > >::value_type const &std_vector_Sl_Key_Sl_std_string_Sg__Sg____getitem__(std::vector<Key<std::string > > const *self,std::vector<Key<std::string > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
static void std_vector_Sl_Key_Sl_std_string_Sg__Sg____setitem__(std::vector<Key<std::string > > *self,std::vector<Key<std::string > >::difference_type i,std::vector<Key<std::string > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
static void std_vector_Sl_Key_Sl_std_string_Sg__Sg__append(std::vector<Key<std::string > > *self,std::vector<Key<std::string > >::value_type const &x){
      self->push_back(x);
    }

/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


  SWIGINTERN int
    SWIG_AsPtr_std_string(PyObject* obj, std::string **val)
    {
      static swig_type_info* string_info = SWIG_TypeQuery("std::string *");
      std::string *vptr;    
      if (SWIG_ConvertPtr(obj, (void**)&vptr, string_info, 0) != -1) {
	if (val) *val = vptr;
	return SWIG_OLDOBJ;
      } else {
	PyErr_Clear();
	char* buf = 0 ; size_t size = 0;
	if (SWIG_AsCharPtrAndSize(obj, &buf, &size)) {
	  if (buf) {
	    if (val) *val = new std::string(buf, size - 1);
	    return SWIG_NEWOBJ;
	  }
	} else {
	  PyErr_Clear();
	}  
	if (val) {
	  PyErr_SetString(PyExc_TypeError,"a string is expected");
	}
	return 0;
      }
    }


SWIGINTERNINLINE int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = (unsigned int)(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNINLINE unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}


SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNINLINE bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}


  /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


#if UINT_MAX < LONG_MAX
/*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif


SWIGINTERNINLINE PyObject *
SWIG_FromCharArray(const char* carray, size_t size)
{
  if (size > INT_MAX) {
    return SWIG_NewPointerObj((char *)(carray), 
			      SWIG_TypeQuery("char *"), 0);
  } else {
    return PyString_FromStringAndSize(carray, (int)(size));
  }
}


SWIGINTERNINLINE PyObject*
  SWIG_From_std_string(const std::string& s)
  {
    return SWIG_FromCharArray(s.data(), s.size());
  }


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_char(PyObject *obj, unsigned char *val)
{ 
  const char* errmsg = val ? "unsigned char" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, UCHAR_MAX,errmsg)) {
      if (val) *val = (unsigned char)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNINLINE unsigned char
SWIG_As_unsigned_SS_char(PyObject* obj)
{
  unsigned char v;
  if (!SWIG_AsVal_unsigned_SS_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned char));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_char(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_char(obj, (unsigned char*)0);
}


  /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_char PyInt_FromLong
/*@@*/


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_short(PyObject *obj, unsigned short *val)
{ 
  const char* errmsg = val ? "unsigned short" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, USHRT_MAX, errmsg)) {
      if (val) *val = (unsigned short)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNINLINE unsigned short
SWIG_As_unsigned_SS_short(PyObject* obj)
{
  unsigned short v;
  if (!SWIG_AsVal_unsigned_SS_short(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned short));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_short(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_short(obj, (unsigned short*)0);
}


  /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_short PyInt_FromLong
/*@@*/

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_vector_float__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_float")) goto fail;
    {
        try {
            result = (std::vector<float > *)new std::vector<float >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_float__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = 0 ;
    std::vector<float > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_float",&obj0)) goto fail;
    {
        std::vector<float,std::allocator<float > > *ptr = (std::vector<float,std::allocator<float > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<float >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<float >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<float > *)new std::vector<float >((std::vector<float > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_float_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<float > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<float > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_float_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<float >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    SwigValueWrapper<std::allocator<float > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<float > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<float >::allocator_type * resultptr;
        resultptr = new std::vector<float >::allocator_type((std::vector<float >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_float__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float >::size_type arg1 ;
    std::vector<float > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_float",&obj0)) goto fail;
    {
        arg1 = (std::vector<float >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<float > *)new std::vector<float >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_float_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<float >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_float__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float >::size_type arg1 ;
    std::vector<float >::value_type *arg2 = 0 ;
    std::vector<float > *result;
    std::vector<float >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_float",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<float >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        temp2 = (std::vector<float >::value_type)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            result = (std::vector<float > *)new std::vector<float >(arg1,(float const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_float(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_float__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_float__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<float,std::allocator<float > >**)(0));
        if (_v) {
            return _wrap_new_vector_float__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_new_vector_float__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_float'");
    return NULL;
}


static PyObject *_wrap_vector_float_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::value_type *arg2 = 0 ;
    std::vector<float >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_float_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::vector<float >::value_type)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->push_back((float const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<float >::value_type const &_result_ref = ((std::vector<float > const *)arg1)->front();
                result = (std::vector<float >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_float((float)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<float >::value_type const &_result_ref = ((std::vector<float > const *)arg1)->back();
                result = (std::vector<float >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_float((float)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::size_type arg2 ;
    std::vector<float >::value_type *arg3 = 0 ;
    std::vector<float >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_float_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<float >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<float >::value_type)(SWIG_As_float(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->assign(arg2,(float const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::size_type arg2 ;
    std::vector<float >::value_type *arg3 = 0 ;
    std::vector<float >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_float_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<float >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<float >::value_type)(SWIG_As_float(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->resize(arg2,(float const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_float_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    return _wrap_vector_float_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_float_resize'");
    return NULL;
}


static PyObject *_wrap_vector_float_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_float_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<float >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<float > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_float_Sg____nonzero__((std::vector<float > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_float_Sg____len__((std::vector<float > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_float_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (std::vector<float >::value_type)std_vector_Sl_float_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::difference_type arg2 ;
    std::vector<float >::difference_type arg3 ;
    std::vector<float,std::allocator<float > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_float___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<float >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<float >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<float,std::allocator<float > > *)std_vector_Sl_float_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::difference_type arg2 ;
    std::vector<float >::difference_type arg3 ;
    std::vector<float,std::allocator<float > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_float___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<float >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<float >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<float,std::allocator<float > > *ptr = (std::vector<float,std::allocator<float > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<float,std::allocator<float > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<float,std::allocator<float > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_float_Sg____setslice__(arg1,arg2,arg3,(std::vector<float,std::allocator<float > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_float___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::difference_type arg2 ;
    std::vector<float >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_float___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<float >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<float >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_float_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_float___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<float >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_float_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::difference_type arg2 ;
    std::vector<float >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_float___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<float >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<float >::value_type const &_result_ref = std_vector_Sl_float_Sg____getitem__((std::vector<float > const *)arg1,arg2);
                result = (std::vector<float >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_float((float)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::difference_type arg2 ;
    std::vector<float >::value_type *arg3 = 0 ;
    std::vector<float >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_float___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<float >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<float >::value_type)(SWIG_As_float(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            std_vector_Sl_float_Sg____setitem__(arg1,arg2,(float const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_float_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    std::vector<float >::value_type *arg2 = 0 ;
    std::vector<float >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_float_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::vector<float >::value_type)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            std_vector_Sl_float_Sg__append(arg1,(float const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_float(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_float",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_float_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTfloat_std__allocatorTfloat_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_short__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_short")) goto fail;
    {
        try {
            result = (std::vector<short > *)new std::vector<short >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_short__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = 0 ;
    std::vector<short > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_short",&obj0)) goto fail;
    {
        std::vector<short,std::allocator<short > > *ptr = (std::vector<short,std::allocator<short > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<short >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<short >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<short > *)new std::vector<short >((std::vector<short > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_short_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<short > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<short > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_short_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<short >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    SwigValueWrapper<std::allocator<short > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<short > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<short >::allocator_type * resultptr;
        resultptr = new std::vector<short >::allocator_type((std::vector<short >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_short__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short >::size_type arg1 ;
    std::vector<short > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_short",&obj0)) goto fail;
    {
        arg1 = (std::vector<short >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<short > *)new std::vector<short >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_short_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<short >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_short__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short >::size_type arg1 ;
    std::vector<short >::value_type *arg2 = 0 ;
    std::vector<short > *result;
    std::vector<short >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_short",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<short >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        temp2 = (std::vector<short >::value_type)(SWIG_As_short(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            result = (std::vector<short > *)new std::vector<short >(arg1,(short const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_short(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_short__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_short__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<short,std::allocator<short > >**)(0));
        if (_v) {
            return _wrap_new_vector_short__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_short(argv[1]);
            if (_v) {
                return _wrap_new_vector_short__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_short'");
    return NULL;
}


static PyObject *_wrap_vector_short_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::value_type *arg2 = 0 ;
    std::vector<short >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_short_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::vector<short >::value_type)(SWIG_As_short(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            (arg1)->push_back((short const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<short >::value_type const &_result_ref = ((std::vector<short > const *)arg1)->front();
                result = (std::vector<short >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_short((short)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<short >::value_type const &_result_ref = ((std::vector<short > const *)arg1)->back();
                result = (std::vector<short >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_short((short)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::size_type arg2 ;
    std::vector<short >::value_type *arg3 = 0 ;
    std::vector<short >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_short_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<short >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<short >::value_type)(SWIG_As_short(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->assign(arg2,(short const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::size_type arg2 ;
    std::vector<short >::value_type *arg3 = 0 ;
    std::vector<short >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_short_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<short >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<short >::value_type)(SWIG_As_short(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            (arg1)->resize(arg2,(short const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_short_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                _v = SWIG_Check_short(argv[2]);
                if (_v) {
                    return _wrap_vector_short_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_short_resize'");
    return NULL;
}


static PyObject *_wrap_vector_short_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_short_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<short >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<short > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_short_Sg____nonzero__((std::vector<short > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_short_Sg____len__((std::vector<short > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_short_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (std::vector<short >::value_type)std_vector_Sl_short_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::difference_type arg2 ;
    std::vector<short >::difference_type arg3 ;
    std::vector<short,std::allocator<short > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_short___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<short >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<short >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<short,std::allocator<short > > *)std_vector_Sl_short_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::difference_type arg2 ;
    std::vector<short >::difference_type arg3 ;
    std::vector<short,std::allocator<short > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_short___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<short >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<short >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<short,std::allocator<short > > *ptr = (std::vector<short,std::allocator<short > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<short,std::allocator<short > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<short,std::allocator<short > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_short_Sg____setslice__(arg1,arg2,arg3,(std::vector<short,std::allocator<short > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_short___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::difference_type arg2 ;
    std::vector<short >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_short___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<short >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<short >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_short_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_short___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<short >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_short_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::difference_type arg2 ;
    std::vector<short >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_short___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<short >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<short >::value_type const &_result_ref = std_vector_Sl_short_Sg____getitem__((std::vector<short > const *)arg1,arg2);
                result = (std::vector<short >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_short((short)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::difference_type arg2 ;
    std::vector<short >::value_type *arg3 = 0 ;
    std::vector<short >::value_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_short___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<short >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        temp3 = (std::vector<short >::value_type)(SWIG_As_short(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            std_vector_Sl_short_Sg____setitem__(arg1,arg2,(short const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_short_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    std::vector<short >::value_type *arg2 = 0 ;
    std::vector<short >::value_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_short_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::vector<short >::value_type)(SWIG_As_short(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            std_vector_Sl_short_Sg__append(arg1,(short const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_short(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<short > *arg1 = (std::vector<short > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_short",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_short_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTshort_std__allocatorTshort_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_attr_ref__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_attr_ref")) goto fail;
    {
        try {
            result = (std::vector<attr_ref > *)new std::vector<attr_ref >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_attr_ref__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = 0 ;
    std::vector<attr_ref > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_attr_ref",&obj0)) goto fail;
    {
        std::vector<attr_ref,std::allocator<attr_ref > > *ptr = (std::vector<attr_ref,std::allocator<attr_ref > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<attr_ref >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<attr_ref >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<attr_ref > *)new std::vector<attr_ref >((std::vector<attr_ref > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<attr_ref > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<attr_ref > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_attr_ref_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<attr_ref >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    SwigValueWrapper<std::allocator<attr_ref > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<attr_ref > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<attr_ref >::allocator_type * resultptr;
        resultptr = new std::vector<attr_ref >::allocator_type((std::vector<attr_ref >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_attr_ref__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref >::size_type arg1 ;
    std::vector<attr_ref > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_attr_ref",&obj0)) goto fail;
    {
        arg1 = (std::vector<attr_ref >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<attr_ref > *)new std::vector<attr_ref >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_attr_ref_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<attr_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_attr_ref__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref >::size_type arg1 ;
    std::vector<attr_ref >::value_type *arg2 = 0 ;
    std::vector<attr_ref > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_attr_ref",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<attr_ref >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<attr_ref >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<attr_ref > *)new std::vector<attr_ref >(arg1,(attr_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_attr_ref(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_attr_ref__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_attr_ref__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<attr_ref,std::allocator<attr_ref > >**)(0));
        if (_v) {
            return _wrap_new_vector_attr_ref__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_attr_ref__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_attr_ref'");
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_attr_ref_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<attr_ref >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((attr_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<attr_ref >::value_type const &_result_ref = ((std::vector<attr_ref > const *)arg1)->front();
                result = (std::vector<attr_ref >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<attr_ref >::value_type const &_result_ref = ((std::vector<attr_ref > const *)arg1)->back();
                result = (std::vector<attr_ref >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::size_type arg2 ;
    std::vector<attr_ref >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_attr_ref_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<attr_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<attr_ref >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(attr_ref const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::size_type arg2 ;
    std::vector<attr_ref >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_attr_ref_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<attr_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<attr_ref >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(attr_ref const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_attr_ref_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_attr_ref_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_attr_ref_resize'");
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_attr_ref_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<attr_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<attr_ref > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_attr_ref_Sg____nonzero__((std::vector<attr_ref > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_attr_ref_Sg____len__((std::vector<attr_ref > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_attr_ref_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_attr_ref_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<attr_ref >::value_type * resultptr;
        resultptr = new std::vector<attr_ref >::value_type((std::vector<attr_ref >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::difference_type arg2 ;
    std::vector<attr_ref >::difference_type arg3 ;
    std::vector<attr_ref,std::allocator<attr_ref > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_attr_ref___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<attr_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<attr_ref >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<attr_ref,std::allocator<attr_ref > > *)std_vector_Sl_attr_ref_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::difference_type arg2 ;
    std::vector<attr_ref >::difference_type arg3 ;
    std::vector<attr_ref,std::allocator<attr_ref > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_attr_ref___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<attr_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<attr_ref >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<attr_ref,std::allocator<attr_ref > > *ptr = (std::vector<attr_ref,std::allocator<attr_ref > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<attr_ref,std::allocator<attr_ref > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<attr_ref,std::allocator<attr_ref > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_attr_ref_Sg____setslice__(arg1,arg2,arg3,(std::vector<attr_ref,std::allocator<attr_ref > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_attr_ref___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::difference_type arg2 ;
    std::vector<attr_ref >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_attr_ref___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<attr_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<attr_ref >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_attr_ref_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_attr_ref___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<attr_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_attr_ref_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::difference_type arg2 ;
    std::vector<attr_ref >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_attr_ref___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<attr_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<attr_ref >::value_type const &_result_ref = std_vector_Sl_attr_ref_Sg____getitem__((std::vector<attr_ref > const *)arg1,arg2);
                result = (std::vector<attr_ref >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::difference_type arg2 ;
    std::vector<attr_ref >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_attr_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<attr_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<attr_ref >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_attr_ref_Sg____setitem__(arg1,arg2,(attr_ref const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_attr_ref_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    std::vector<attr_ref >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_attr_ref_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<attr_ref >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_attr_ref_Sg__append(arg1,(attr_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_attr_ref(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<attr_ref > *arg1 = (std::vector<attr_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_attr_ref",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_attr_ref_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_blk_ref__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_blk_ref")) goto fail;
    {
        try {
            result = (std::vector<blk_ref > *)new std::vector<blk_ref >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_blk_ref__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = 0 ;
    std::vector<blk_ref > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_blk_ref",&obj0)) goto fail;
    {
        std::vector<blk_ref,std::allocator<blk_ref > > *ptr = (std::vector<blk_ref,std::allocator<blk_ref > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<blk_ref >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<blk_ref >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<blk_ref > *)new std::vector<blk_ref >((std::vector<blk_ref > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<blk_ref > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<blk_ref > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_blk_ref_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<blk_ref >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    SwigValueWrapper<std::allocator<blk_ref > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<blk_ref > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<blk_ref >::allocator_type * resultptr;
        resultptr = new std::vector<blk_ref >::allocator_type((std::vector<blk_ref >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_blk_ref__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref >::size_type arg1 ;
    std::vector<blk_ref > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_blk_ref",&obj0)) goto fail;
    {
        arg1 = (std::vector<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<blk_ref > *)new std::vector<blk_ref >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_blk_ref_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_blk_ref__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref >::size_type arg1 ;
    std::vector<blk_ref >::value_type *arg2 = 0 ;
    std::vector<blk_ref > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_blk_ref",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<blk_ref > *)new std::vector<blk_ref >(arg1,(blk_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_blk_ref(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_blk_ref__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_blk_ref__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<blk_ref,std::allocator<blk_ref > >**)(0));
        if (_v) {
            return _wrap_new_vector_blk_ref__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_blk_ref__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_blk_ref'");
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_blk_ref_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((blk_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<blk_ref >::value_type const &_result_ref = ((std::vector<blk_ref > const *)arg1)->front();
                result = (std::vector<blk_ref >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<blk_ref >::value_type const &_result_ref = ((std::vector<blk_ref > const *)arg1)->back();
                result = (std::vector<blk_ref >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::size_type arg2 ;
    std::vector<blk_ref >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_blk_ref_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(blk_ref const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::size_type arg2 ;
    std::vector<blk_ref >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_blk_ref_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(blk_ref const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_blk_ref_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_blk_ref_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_blk_ref_resize'");
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_blk_ref_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<blk_ref > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_blk_ref_Sg____nonzero__((std::vector<blk_ref > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_blk_ref_Sg____len__((std::vector<blk_ref > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_blk_ref_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_blk_ref_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<blk_ref >::value_type * resultptr;
        resultptr = new std::vector<blk_ref >::value_type((std::vector<blk_ref >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::difference_type arg2 ;
    std::vector<blk_ref >::difference_type arg3 ;
    std::vector<blk_ref,std::allocator<blk_ref > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_blk_ref___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<blk_ref >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<blk_ref,std::allocator<blk_ref > > *)std_vector_Sl_blk_ref_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::difference_type arg2 ;
    std::vector<blk_ref >::difference_type arg3 ;
    std::vector<blk_ref,std::allocator<blk_ref > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_blk_ref___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<blk_ref >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<blk_ref,std::allocator<blk_ref > > *ptr = (std::vector<blk_ref,std::allocator<blk_ref > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<blk_ref,std::allocator<blk_ref > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<blk_ref,std::allocator<blk_ref > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_blk_ref_Sg____setslice__(arg1,arg2,arg3,(std::vector<blk_ref,std::allocator<blk_ref > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_blk_ref___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::difference_type arg2 ;
    std::vector<blk_ref >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_blk_ref___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<blk_ref >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_blk_ref_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_blk_ref___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_blk_ref_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::difference_type arg2 ;
    std::vector<blk_ref >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_blk_ref___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<blk_ref >::value_type const &_result_ref = std_vector_Sl_blk_ref_Sg____getitem__((std::vector<blk_ref > const *)arg1,arg2);
                result = (std::vector<blk_ref >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::difference_type arg2 ;
    std::vector<blk_ref >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_blk_ref_Sg____setitem__(arg1,arg2,(blk_ref const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_blk_ref_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    std::vector<blk_ref >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_blk_ref_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_blk_ref_Sg__append(arg1,(blk_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_blk_ref(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<blk_ref > *arg1 = (std::vector<blk_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_blk_ref",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_blk_ref_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_list_blk_ref__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_list_blk_ref")) goto fail;
    {
        try {
            result = (std::list<blk_ref > *)new std::list<blk_ref >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_list_blk_ref__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = 0 ;
    std::list<blk_ref > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_list_blk_ref",&obj0)) goto fail;
    {
        std::list<blk_ref,std::allocator<blk_ref > > *ptr = (std::list<blk_ref,std::allocator<blk_ref > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::list<blk_ref >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::list<blk_ref >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::list<blk_ref > *)new std::list<blk_ref >((std::list<blk_ref > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_list_blk_ref_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::list<blk_ref > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::list<blk_ref > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:list_blk_ref_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::list<blk_ref >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    SwigValueWrapper<std::allocator<blk_ref > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::list<blk_ref > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::list<blk_ref >::allocator_type * resultptr;
        resultptr = new std::list<blk_ref >::allocator_type((std::list<blk_ref >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_list_blk_ref__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref >::size_type arg1 ;
    std::list<blk_ref > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_list_blk_ref",&obj0)) goto fail;
    {
        arg1 = (std::list<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::list<blk_ref > *)new std::list<blk_ref >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:list_blk_ref_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::list<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_list_blk_ref__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref >::size_type arg1 ;
    std::list<blk_ref >::value_type *arg2 = 0 ;
    std::list<blk_ref > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_list_blk_ref",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::list<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::list<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::list<blk_ref > *)new std::list<blk_ref >(arg1,(blk_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_list_blk_ref(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_list_blk_ref__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_list_blk_ref__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::list<blk_ref,std::allocator<blk_ref > >**)(0));
        if (_v) {
            return _wrap_new_list_blk_ref__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_list_blk_ref__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_list_blk_ref'");
    return NULL;
}


static PyObject *_wrap_list_blk_ref_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:list_blk_ref_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::list<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((blk_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::list<blk_ref >::value_type const &_result_ref = ((std::list<blk_ref > const *)arg1)->front();
                result = (std::list<blk_ref >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::list<blk_ref >::value_type const &_result_ref = ((std::list<blk_ref > const *)arg1)->back();
                result = (std::list<blk_ref >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::size_type arg2 ;
    std::list<blk_ref >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:list_blk_ref_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::list<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::list<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(blk_ref const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::size_type arg2 ;
    std::list<blk_ref >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:list_blk_ref_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::list<blk_ref >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::list<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(blk_ref const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_list_blk_ref_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_list_blk_ref_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'list_blk_ref_resize'");
    return NULL;
}


static PyObject *_wrap_list_blk_ref_pop_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref_pop_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_front();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_push_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:list_blk_ref_push_front",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::list<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_front((blk_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_reverse(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref_reverse",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->reverse();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_list_Sl_blk_ref_Sg____nonzero__((std::list<blk_ref > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_list_Sl_blk_ref_Sg____len__((std::list<blk_ref > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:list_blk_ref_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_list_Sl_blk_ref_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::list<blk_ref >::value_type * resultptr;
        resultptr = new std::list<blk_ref >::value_type((std::list<blk_ref >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::difference_type arg2 ;
    std::list<blk_ref >::difference_type arg3 ;
    std::list<blk_ref,std::allocator<blk_ref > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:list_blk_ref___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::list<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::list<blk_ref >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::list<blk_ref,std::allocator<blk_ref > > *)std_list_Sl_blk_ref_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::difference_type arg2 ;
    std::list<blk_ref >::difference_type arg3 ;
    std::list<blk_ref,std::allocator<blk_ref > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:list_blk_ref___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::list<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::list<blk_ref >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::list<blk_ref,std::allocator<blk_ref > > *ptr = (std::list<blk_ref,std::allocator<blk_ref > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::list<blk_ref,std::allocator<blk_ref > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::list<blk_ref,std::allocator<blk_ref > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_list_Sl_blk_ref_Sg____setslice__(arg1,arg2,arg3,(std::list<blk_ref,std::allocator<blk_ref > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_list_blk_ref___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::difference_type arg2 ;
    std::list<blk_ref >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:list_blk_ref___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::list<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::list<blk_ref >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_list_Sl_blk_ref_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:list_blk_ref___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::list<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_list_Sl_blk_ref_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::difference_type arg2 ;
    std::list<blk_ref >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:list_blk_ref___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::list<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::list<blk_ref >::value_type const &_result_ref = std_list_Sl_blk_ref_Sg____getitem__((std::list<blk_ref > const *)arg1,arg2);
                result = (std::list<blk_ref >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::difference_type arg2 ;
    std::list<blk_ref >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:list_blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::list<blk_ref >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::list<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_list_Sl_blk_ref_Sg____setitem__(arg1,arg2,(blk_ref const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_list_blk_ref_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    std::list<blk_ref >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:list_blk_ref_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::list<blk_ref >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_list_Sl_blk_ref_Sg__append(arg1,(blk_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_list_blk_ref(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::list<blk_ref > *arg1 = (std::list<blk_ref > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_list_blk_ref",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * list_blk_ref_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__listTblk_ref_std__allocatorTblk_ref_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_Vector3__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_Vector3")) goto fail;
    {
        try {
            result = (std::vector<Vector3 > *)new std::vector<Vector3 >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Vector3__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = 0 ;
    std::vector<Vector3 > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Vector3",&obj0)) goto fail;
    {
        std::vector<Vector3,std::allocator<Vector3 > > *ptr = (std::vector<Vector3,std::allocator<Vector3 > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Vector3 >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Vector3 >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<Vector3 > *)new std::vector<Vector3 >((std::vector<Vector3 > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_Vector3_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<Vector3 > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Vector3 > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Vector3_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Vector3 >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    SwigValueWrapper<std::allocator<Vector3 > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Vector3 > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<Vector3 >::allocator_type * resultptr;
        resultptr = new std::vector<Vector3 >::allocator_type((std::vector<Vector3 >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Vector3__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 >::size_type arg1 ;
    std::vector<Vector3 > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Vector3",&obj0)) goto fail;
    {
        arg1 = (std::vector<Vector3 >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Vector3 > *)new std::vector<Vector3 >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Vector3_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Vector3 >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Vector3__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 >::size_type arg1 ;
    std::vector<Vector3 >::value_type *arg2 = 0 ;
    std::vector<Vector3 > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_Vector3",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<Vector3 >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Vector3 >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Vector3 > *)new std::vector<Vector3 >(arg1,(Vector3 const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Vector3(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_Vector3__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_Vector3__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<Vector3,std::allocator<Vector3 > >**)(0));
        if (_v) {
            return _wrap_new_vector_Vector3__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_Vector3__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_Vector3'");
    return NULL;
}


static PyObject *_wrap_vector_Vector3_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Vector3_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Vector3 >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((Vector3 const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Vector3 >::value_type const &_result_ref = ((std::vector<Vector3 > const *)arg1)->front();
                result = (std::vector<Vector3 >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Vector3 >::value_type const &_result_ref = ((std::vector<Vector3 > const *)arg1)->back();
                result = (std::vector<Vector3 >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::size_type arg2 ;
    std::vector<Vector3 >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Vector3_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Vector3 >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Vector3 >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(Vector3 const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::size_type arg2 ;
    std::vector<Vector3 >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Vector3_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Vector3 >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Vector3 >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(Vector3 const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_Vector3_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_Vector3_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_Vector3_resize'");
    return NULL;
}


static PyObject *_wrap_vector_Vector3_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Vector3_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Vector3 >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Vector3 > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_Vector3_Sg____nonzero__((std::vector<Vector3 > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Vector3_Sg____len__((std::vector<Vector3 > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Vector3_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Vector3_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<Vector3 >::value_type * resultptr;
        resultptr = new std::vector<Vector3 >::value_type((std::vector<Vector3 >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::difference_type arg2 ;
    std::vector<Vector3 >::difference_type arg3 ;
    std::vector<Vector3,std::allocator<Vector3 > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Vector3___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Vector3 >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Vector3 >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Vector3,std::allocator<Vector3 > > *)std_vector_Sl_Vector3_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::difference_type arg2 ;
    std::vector<Vector3 >::difference_type arg3 ;
    std::vector<Vector3,std::allocator<Vector3 > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_Vector3___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Vector3 >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Vector3 >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<Vector3,std::allocator<Vector3 > > *ptr = (std::vector<Vector3,std::allocator<Vector3 > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Vector3,std::allocator<Vector3 > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Vector3,std::allocator<Vector3 > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_Vector3_Sg____setslice__(arg1,arg2,arg3,(std::vector<Vector3,std::allocator<Vector3 > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_Vector3___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::difference_type arg2 ;
    std::vector<Vector3 >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Vector3___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Vector3 >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Vector3 >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Vector3_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Vector3___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Vector3 >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Vector3_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::difference_type arg2 ;
    std::vector<Vector3 >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Vector3___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Vector3 >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<Vector3 >::value_type const &_result_ref = std_vector_Sl_Vector3_Sg____getitem__((std::vector<Vector3 > const *)arg1,arg2);
                result = (std::vector<Vector3 >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::difference_type arg2 ;
    std::vector<Vector3 >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Vector3___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Vector3 >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Vector3 >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Vector3_Sg____setitem__(arg1,arg2,(Vector3 const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Vector3_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    std::vector<Vector3 >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Vector3_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Vector3 >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Vector3_Sg__append(arg1,(Vector3 const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_Vector3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Vector3 > *arg1 = (std::vector<Vector3 > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_Vector3",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_Vector3_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTVector3_std__allocatorTVector3_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_Color__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_Color")) goto fail;
    {
        try {
            result = (std::vector<Color > *)new std::vector<Color >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Color__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = 0 ;
    std::vector<Color > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Color",&obj0)) goto fail;
    {
        std::vector<Color,std::allocator<Color > > *ptr = (std::vector<Color,std::allocator<Color > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Color >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Color >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<Color > *)new std::vector<Color >((std::vector<Color > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_Color_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<Color > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Color > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Color_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Color >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    SwigValueWrapper<std::allocator<Color > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Color > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<Color >::allocator_type * resultptr;
        resultptr = new std::vector<Color >::allocator_type((std::vector<Color >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Color__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color >::size_type arg1 ;
    std::vector<Color > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Color",&obj0)) goto fail;
    {
        arg1 = (std::vector<Color >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Color > *)new std::vector<Color >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Color_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Color >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Color__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color >::size_type arg1 ;
    std::vector<Color >::value_type *arg2 = 0 ;
    std::vector<Color > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_Color",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<Color >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Color >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Color > *)new std::vector<Color >(arg1,(Color const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Color(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_Color__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_Color__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<Color,std::allocator<Color > >**)(0));
        if (_v) {
            return _wrap_new_vector_Color__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_Color__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_Color'");
    return NULL;
}


static PyObject *_wrap_vector_Color_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Color_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Color >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((Color const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Color >::value_type const &_result_ref = ((std::vector<Color > const *)arg1)->front();
                result = (std::vector<Color >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Color >::value_type const &_result_ref = ((std::vector<Color > const *)arg1)->back();
                result = (std::vector<Color >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::size_type arg2 ;
    std::vector<Color >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Color_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Color >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Color >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(Color const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::size_type arg2 ;
    std::vector<Color >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Color_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Color >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Color >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(Color const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_Color_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_Color_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_Color_resize'");
    return NULL;
}


static PyObject *_wrap_vector_Color_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Color_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Color >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Color > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_Color_Sg____nonzero__((std::vector<Color > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Color_Sg____len__((std::vector<Color > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Color_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Color_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<Color >::value_type * resultptr;
        resultptr = new std::vector<Color >::value_type((std::vector<Color >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::difference_type arg2 ;
    std::vector<Color >::difference_type arg3 ;
    std::vector<Color,std::allocator<Color > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Color___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Color >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Color >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Color,std::allocator<Color > > *)std_vector_Sl_Color_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::difference_type arg2 ;
    std::vector<Color >::difference_type arg3 ;
    std::vector<Color,std::allocator<Color > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_Color___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Color >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Color >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<Color,std::allocator<Color > > *ptr = (std::vector<Color,std::allocator<Color > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Color,std::allocator<Color > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Color,std::allocator<Color > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_Color_Sg____setslice__(arg1,arg2,arg3,(std::vector<Color,std::allocator<Color > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_Color___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::difference_type arg2 ;
    std::vector<Color >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Color___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Color >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Color >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Color_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Color___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Color >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Color_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::difference_type arg2 ;
    std::vector<Color >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Color___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Color >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<Color >::value_type const &_result_ref = std_vector_Sl_Color_Sg____getitem__((std::vector<Color > const *)arg1,arg2);
                result = (std::vector<Color >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::difference_type arg2 ;
    std::vector<Color >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Color___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Color >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Color >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Color_Sg____setitem__(arg1,arg2,(Color const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Color_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    std::vector<Color >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Color_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Color >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Color_Sg__append(arg1,(Color const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_Color(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Color > *arg1 = (std::vector<Color > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_Color",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_Color_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTColor_std__allocatorTColor_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_UVCoord__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_UVCoord")) goto fail;
    {
        try {
            result = (std::vector<UVCoord > *)new std::vector<UVCoord >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_UVCoord__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = 0 ;
    std::vector<UVCoord > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_UVCoord",&obj0)) goto fail;
    {
        std::vector<UVCoord,std::allocator<UVCoord > > *ptr = (std::vector<UVCoord,std::allocator<UVCoord > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<UVCoord >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<UVCoord >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<UVCoord > *)new std::vector<UVCoord >((std::vector<UVCoord > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<UVCoord > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<UVCoord > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_UVCoord_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<UVCoord >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    SwigValueWrapper<std::allocator<UVCoord > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<UVCoord > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<UVCoord >::allocator_type * resultptr;
        resultptr = new std::vector<UVCoord >::allocator_type((std::vector<UVCoord >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_UVCoord__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord >::size_type arg1 ;
    std::vector<UVCoord > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_UVCoord",&obj0)) goto fail;
    {
        arg1 = (std::vector<UVCoord >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<UVCoord > *)new std::vector<UVCoord >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_UVCoord_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<UVCoord >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_UVCoord__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord >::size_type arg1 ;
    std::vector<UVCoord >::value_type *arg2 = 0 ;
    std::vector<UVCoord > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_UVCoord",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<UVCoord >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<UVCoord >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<UVCoord > *)new std::vector<UVCoord >(arg1,(UVCoord const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_UVCoord(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_UVCoord__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_UVCoord__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<UVCoord,std::allocator<UVCoord > >**)(0));
        if (_v) {
            return _wrap_new_vector_UVCoord__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_UVCoord__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_UVCoord'");
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_UVCoord_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<UVCoord >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((UVCoord const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<UVCoord >::value_type const &_result_ref = ((std::vector<UVCoord > const *)arg1)->front();
                result = (std::vector<UVCoord >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<UVCoord >::value_type const &_result_ref = ((std::vector<UVCoord > const *)arg1)->back();
                result = (std::vector<UVCoord >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::size_type arg2 ;
    std::vector<UVCoord >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_UVCoord_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<UVCoord >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<UVCoord >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(UVCoord const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::size_type arg2 ;
    std::vector<UVCoord >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_UVCoord_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<UVCoord >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<UVCoord >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(UVCoord const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_UVCoord_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_UVCoord_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_UVCoord_resize'");
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_UVCoord_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<UVCoord >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<UVCoord > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_UVCoord_Sg____nonzero__((std::vector<UVCoord > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_UVCoord_Sg____len__((std::vector<UVCoord > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_UVCoord_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_UVCoord_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<UVCoord >::value_type * resultptr;
        resultptr = new std::vector<UVCoord >::value_type((std::vector<UVCoord >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::difference_type arg2 ;
    std::vector<UVCoord >::difference_type arg3 ;
    std::vector<UVCoord,std::allocator<UVCoord > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_UVCoord___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<UVCoord >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<UVCoord >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<UVCoord,std::allocator<UVCoord > > *)std_vector_Sl_UVCoord_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::difference_type arg2 ;
    std::vector<UVCoord >::difference_type arg3 ;
    std::vector<UVCoord,std::allocator<UVCoord > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_UVCoord___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<UVCoord >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<UVCoord >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<UVCoord,std::allocator<UVCoord > > *ptr = (std::vector<UVCoord,std::allocator<UVCoord > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<UVCoord,std::allocator<UVCoord > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<UVCoord,std::allocator<UVCoord > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_UVCoord_Sg____setslice__(arg1,arg2,arg3,(std::vector<UVCoord,std::allocator<UVCoord > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_UVCoord___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::difference_type arg2 ;
    std::vector<UVCoord >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_UVCoord___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<UVCoord >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<UVCoord >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_UVCoord_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_UVCoord___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<UVCoord >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_UVCoord_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::difference_type arg2 ;
    std::vector<UVCoord >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_UVCoord___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<UVCoord >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<UVCoord >::value_type const &_result_ref = std_vector_Sl_UVCoord_Sg____getitem__((std::vector<UVCoord > const *)arg1,arg2);
                result = (std::vector<UVCoord >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::difference_type arg2 ;
    std::vector<UVCoord >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_UVCoord___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<UVCoord >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<UVCoord >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_UVCoord_Sg____setitem__(arg1,arg2,(UVCoord const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_UVCoord_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    std::vector<UVCoord >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_UVCoord_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<UVCoord >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_UVCoord_Sg__append(arg1,(UVCoord const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_UVCoord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<UVCoord > *arg1 = (std::vector<UVCoord > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_UVCoord",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_UVCoord_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_Triangle__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_Triangle")) goto fail;
    {
        try {
            result = (std::vector<Triangle > *)new std::vector<Triangle >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Triangle__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = 0 ;
    std::vector<Triangle > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Triangle",&obj0)) goto fail;
    {
        std::vector<Triangle,std::allocator<Triangle > > *ptr = (std::vector<Triangle,std::allocator<Triangle > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Triangle >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Triangle >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<Triangle > *)new std::vector<Triangle >((std::vector<Triangle > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_Triangle_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<Triangle > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Triangle > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Triangle_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Triangle >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    SwigValueWrapper<std::allocator<Triangle > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Triangle > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<Triangle >::allocator_type * resultptr;
        resultptr = new std::vector<Triangle >::allocator_type((std::vector<Triangle >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Triangle__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle >::size_type arg1 ;
    std::vector<Triangle > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Triangle",&obj0)) goto fail;
    {
        arg1 = (std::vector<Triangle >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Triangle > *)new std::vector<Triangle >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Triangle_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Triangle >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Triangle__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle >::size_type arg1 ;
    std::vector<Triangle >::value_type *arg2 = 0 ;
    std::vector<Triangle > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_Triangle",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<Triangle >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Triangle >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Triangle > *)new std::vector<Triangle >(arg1,(Triangle const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Triangle(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_Triangle__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_Triangle__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<Triangle,std::allocator<Triangle > >**)(0));
        if (_v) {
            return _wrap_new_vector_Triangle__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_Triangle__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_Triangle'");
    return NULL;
}


static PyObject *_wrap_vector_Triangle_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Triangle_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Triangle >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((Triangle const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Triangle >::value_type const &_result_ref = ((std::vector<Triangle > const *)arg1)->front();
                result = (std::vector<Triangle >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Triangle >::value_type const &_result_ref = ((std::vector<Triangle > const *)arg1)->back();
                result = (std::vector<Triangle >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::size_type arg2 ;
    std::vector<Triangle >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Triangle_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Triangle >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Triangle >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(Triangle const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::size_type arg2 ;
    std::vector<Triangle >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Triangle_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Triangle >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Triangle >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(Triangle const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_Triangle_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_Triangle_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_Triangle_resize'");
    return NULL;
}


static PyObject *_wrap_vector_Triangle_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Triangle_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Triangle >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Triangle > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_Triangle_Sg____nonzero__((std::vector<Triangle > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Triangle_Sg____len__((std::vector<Triangle > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Triangle_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Triangle_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<Triangle >::value_type * resultptr;
        resultptr = new std::vector<Triangle >::value_type((std::vector<Triangle >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::difference_type arg2 ;
    std::vector<Triangle >::difference_type arg3 ;
    std::vector<Triangle,std::allocator<Triangle > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Triangle___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Triangle >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Triangle >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Triangle,std::allocator<Triangle > > *)std_vector_Sl_Triangle_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::difference_type arg2 ;
    std::vector<Triangle >::difference_type arg3 ;
    std::vector<Triangle,std::allocator<Triangle > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_Triangle___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Triangle >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Triangle >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<Triangle,std::allocator<Triangle > > *ptr = (std::vector<Triangle,std::allocator<Triangle > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Triangle,std::allocator<Triangle > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Triangle,std::allocator<Triangle > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_Triangle_Sg____setslice__(arg1,arg2,arg3,(std::vector<Triangle,std::allocator<Triangle > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_Triangle___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::difference_type arg2 ;
    std::vector<Triangle >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Triangle___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Triangle >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Triangle >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Triangle_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Triangle___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Triangle >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Triangle_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::difference_type arg2 ;
    std::vector<Triangle >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Triangle___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Triangle >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<Triangle >::value_type const &_result_ref = std_vector_Sl_Triangle_Sg____getitem__((std::vector<Triangle > const *)arg1,arg2);
                result = (std::vector<Triangle >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::difference_type arg2 ;
    std::vector<Triangle >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Triangle___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Triangle >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Triangle >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Triangle_Sg____setitem__(arg1,arg2,(Triangle const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Triangle_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    std::vector<Triangle >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Triangle_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Triangle >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Triangle_Sg__append(arg1,(Triangle const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_Triangle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Triangle > *arg1 = (std::vector<Triangle > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_Triangle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_Triangle_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTTriangle_std__allocatorTTriangle_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_SkinWeight__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_SkinWeight")) goto fail;
    {
        try {
            result = (std::vector<SkinWeight > *)new std::vector<SkinWeight >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_SkinWeight__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = 0 ;
    std::vector<SkinWeight > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_SkinWeight",&obj0)) goto fail;
    {
        std::vector<SkinWeight,std::allocator<SkinWeight > > *ptr = (std::vector<SkinWeight,std::allocator<SkinWeight > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<SkinWeight >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<SkinWeight >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<SkinWeight > *)new std::vector<SkinWeight >((std::vector<SkinWeight > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<SkinWeight > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<SkinWeight > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_SkinWeight_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<SkinWeight >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    SwigValueWrapper<std::allocator<SkinWeight > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<SkinWeight > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<SkinWeight >::allocator_type * resultptr;
        resultptr = new std::vector<SkinWeight >::allocator_type((std::vector<SkinWeight >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_SkinWeight__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight >::size_type arg1 ;
    std::vector<SkinWeight > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_SkinWeight",&obj0)) goto fail;
    {
        arg1 = (std::vector<SkinWeight >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<SkinWeight > *)new std::vector<SkinWeight >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_SkinWeight_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<SkinWeight >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_SkinWeight__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight >::size_type arg1 ;
    std::vector<SkinWeight >::value_type *arg2 = 0 ;
    std::vector<SkinWeight > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_SkinWeight",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<SkinWeight >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<SkinWeight >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<SkinWeight > *)new std::vector<SkinWeight >(arg1,(SkinWeight const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_SkinWeight(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_SkinWeight__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_SkinWeight__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<SkinWeight,std::allocator<SkinWeight > >**)(0));
        if (_v) {
            return _wrap_new_vector_SkinWeight__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_SkinWeight__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_SkinWeight'");
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_SkinWeight_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<SkinWeight >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((SkinWeight const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<SkinWeight >::value_type const &_result_ref = ((std::vector<SkinWeight > const *)arg1)->front();
                result = (std::vector<SkinWeight >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<SkinWeight >::value_type const &_result_ref = ((std::vector<SkinWeight > const *)arg1)->back();
                result = (std::vector<SkinWeight >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::size_type arg2 ;
    std::vector<SkinWeight >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_SkinWeight_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<SkinWeight >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<SkinWeight >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(SkinWeight const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::size_type arg2 ;
    std::vector<SkinWeight >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_SkinWeight_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<SkinWeight >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<SkinWeight >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(SkinWeight const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_SkinWeight_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_SkinWeight_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_SkinWeight_resize'");
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_SkinWeight_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<SkinWeight >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<SkinWeight > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_SkinWeight_Sg____nonzero__((std::vector<SkinWeight > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_SkinWeight_Sg____len__((std::vector<SkinWeight > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_SkinWeight_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_SkinWeight_Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<SkinWeight >::value_type * resultptr;
        resultptr = new std::vector<SkinWeight >::value_type((std::vector<SkinWeight >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::difference_type arg2 ;
    std::vector<SkinWeight >::difference_type arg3 ;
    std::vector<SkinWeight,std::allocator<SkinWeight > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_SkinWeight___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<SkinWeight >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<SkinWeight >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<SkinWeight,std::allocator<SkinWeight > > *)std_vector_Sl_SkinWeight_Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::difference_type arg2 ;
    std::vector<SkinWeight >::difference_type arg3 ;
    std::vector<SkinWeight,std::allocator<SkinWeight > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_SkinWeight___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<SkinWeight >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<SkinWeight >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<SkinWeight,std::allocator<SkinWeight > > *ptr = (std::vector<SkinWeight,std::allocator<SkinWeight > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<SkinWeight,std::allocator<SkinWeight > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<SkinWeight,std::allocator<SkinWeight > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_SkinWeight_Sg____setslice__(arg1,arg2,arg3,(std::vector<SkinWeight,std::allocator<SkinWeight > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::difference_type arg2 ;
    std::vector<SkinWeight >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_SkinWeight___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<SkinWeight >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<SkinWeight >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_SkinWeight_Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_SkinWeight___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<SkinWeight >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_SkinWeight_Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::difference_type arg2 ;
    std::vector<SkinWeight >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_SkinWeight___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<SkinWeight >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<SkinWeight >::value_type const &_result_ref = std_vector_Sl_SkinWeight_Sg____getitem__((std::vector<SkinWeight > const *)arg1,arg2);
                result = (std::vector<SkinWeight >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::difference_type arg2 ;
    std::vector<SkinWeight >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_SkinWeight___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<SkinWeight >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<SkinWeight >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_SkinWeight_Sg____setitem__(arg1,arg2,(SkinWeight const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_SkinWeight_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    std::vector<SkinWeight >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_SkinWeight_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<SkinWeight >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_SkinWeight_Sg__append(arg1,(SkinWeight const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_SkinWeight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<SkinWeight > *arg1 = (std::vector<SkinWeight > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_SkinWeight",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_SkinWeight_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_pair_int_float__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::pair<int,float > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_pair_int_float")) goto fail;
    {
        try {
            result = (std::pair<int,float > *)new std::pair<int,float >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__pairTint_float_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pair_int_float__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    float arg2 ;
    std::pair<int,float > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_pair_int_float",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::pair<int,float > *)new std::pair<int,float >(arg1,arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__pairTint_float_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_pair_int_float__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::pair<int,float > *arg1 = 0 ;
    std::pair<int,float > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_pair_int_float",&obj0)) goto fail;
    {
        std::pair<int,float > *ptr = (std::pair<int,float > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::pair<int,float >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::pair<int,float >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::pair<int,float > *)new std::pair<int,float >((std::pair<int,float > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__pairTint_float_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_pair_int_float(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_pair_int_float__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::pair<int,float >**)(0));
        if (_v) {
            return _wrap_new_pair_int_float__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_new_pair_int_float__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_pair_int_float'");
    return NULL;
}


static PyObject *_wrap_pair_int_float_first_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::pair<int,float > *arg1 = (std::pair<int,float > *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pair_int_float_first_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__pairTint_float_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->first = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pair_int_float_first_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::pair<int,float > *arg1 = (std::pair<int,float > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pair_int_float_first_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__pairTint_float_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->first);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pair_int_float_second_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::pair<int,float > *arg1 = (std::pair<int,float > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pair_int_float_second_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__pairTint_float_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->second = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pair_int_float_second_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::pair<int,float > *arg1 = (std::pair<int,float > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pair_int_float_second_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__pairTint_float_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->second);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_pair_int_float(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::pair<int,float > *arg1 = (std::pair<int,float > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_pair_int_float",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__pairTint_float_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * pair_int_float_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__pairTint_float_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_map_int_float__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_map_int_float")) goto fail;
    {
        try {
            result = (std::map<int,float > *)new std::map<int,float >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_map_int_float__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = 0 ;
    std::map<int,float > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_map_int_float",&obj0)) goto fail;
    {
        std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > > *ptr = (std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<int,float >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::map<int,float >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::map<int,float > *)new std::map<int,float >((std::map<int,float > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_map_int_float(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_map_int_float__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >**)(0));
        if (_v) {
            return _wrap_new_map_int_float__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_map_int_float'");
    return NULL;
}


static PyObject *_wrap_map_int_float_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:map_int_float_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::map<int,float > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    std::map<int,float >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:map_int_float_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::map<int,float > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:map_int_float_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    std::map<int,float > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:map_int_float_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::map<int,float >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    SwigValueWrapper<std::allocator<std::pair<int const,float > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:map_int_float_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::map<int,float > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::map<int,float >::allocator_type * resultptr;
        resultptr = new std::map<int,float >::allocator_type((std::map<int,float >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float_erase(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    std::map<int,float >::key_type *arg2 = 0 ;
    std::map<int,float >::size_type result;
    std::map<int,float >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:map_int_float_erase",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::map<int,float >::key_type)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            result = (arg1)->erase((int const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float_count(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    std::map<int,float >::key_type *arg2 = 0 ;
    std::map<int,float >::size_type result;
    std::map<int,float >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:map_int_float_count",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::map<int,float >::key_type)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            result = ((std::map<int,float > const *)arg1)->count((int const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:map_int_float___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_map_Sl_int_Sc_float_Sg____nonzero__((std::map<int,float > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    std::map<int,float >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:map_int_float___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_map_Sl_int_Sc_float_Sg____len__((std::map<int,float > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    std::map<int,float >::key_type *arg2 = 0 ;
    std::map<int,float >::mapped_type result;
    std::map<int,float >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:map_int_float___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::map<int,float >::key_type)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            result = (std::map<int,float >::mapped_type)std_map_Sl_int_Sc_float_Sg____getitem__((std::map<int,float > const *)arg1,(int const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    std::map<int,float >::key_type *arg2 = 0 ;
    std::map<int,float >::mapped_type *arg3 = 0 ;
    std::map<int,float >::key_type temp2 ;
    std::map<int,float >::mapped_type temp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:map_int_float___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::map<int,float >::key_type)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        temp3 = (std::map<int,float >::mapped_type)(SWIG_As_float(obj2));
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = &temp3;
    }
    {
        try {
            std_map_Sl_int_Sc_float_Sg____setitem__(arg1,(int const &)*arg2,(float const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    std::map<int,float >::key_type *arg2 = 0 ;
    std::map<int,float >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:map_int_float___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::map<int,float >::key_type)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            std_map_Sl_int_Sc_float_Sg____delitem__(arg1,(int const &)*arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float_has_key(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    std::map<int,float >::key_type *arg2 = 0 ;
    bool result;
    std::map<int,float >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:map_int_float_has_key",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::map<int,float >::key_type)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            result = (bool)std_map_Sl_int_Sc_float_Sg__has_key((std::map<int,float > const *)arg1,(int const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float_keys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:map_int_float_keys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (PyObject *)std_map_Sl_int_Sc_float_Sg__keys(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float_values(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:map_int_float_values",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (PyObject *)std_map_Sl_int_Sc_float_Sg__values(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float_items(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:map_int_float_items",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (PyObject *)std_map_Sl_int_Sc_float_Sg__items(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float___contains__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    std::map<int,float >::key_type *arg2 = 0 ;
    bool result;
    std::map<int,float >::key_type temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:map_int_float___contains__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (std::map<int,float >::key_type)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        try {
            result = (bool)std_map_Sl_int_Sc_float_Sg____contains__(arg1,(int const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_map_int_float___iter__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:map_int_float___iter__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (PyObject *)std_map_Sl_int_Sc_float_Sg____iter__(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = result;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_map_int_float(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::map<int,float > *arg1 = (std::map<int,float > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_map_int_float",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * map_int_float_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Key_Quaternion_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Quaternion_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->time = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Quaternion_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->time);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    Quaternion *arg2 = (Quaternion *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Quaternion_data_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->data = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    Quaternion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Quaternion_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Quaternion *)& ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Quaternion, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_forward_tangent_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    Quaternion *arg2 = (Quaternion *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Quaternion_forward_tangent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->forward_tangent = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_forward_tangent_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    Quaternion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Quaternion_forward_tangent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Quaternion *)& ((arg1)->forward_tangent);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Quaternion, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_backward_tangent_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    Quaternion *arg2 = (Quaternion *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Quaternion_backward_tangent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->backward_tangent = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_backward_tangent_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    Quaternion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Quaternion_backward_tangent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Quaternion *)& ((arg1)->backward_tangent);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Quaternion, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_tension_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Quaternion_tension_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->tension = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_tension_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Quaternion_tension_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->tension);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_bias_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Quaternion_bias_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->bias = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_bias_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Quaternion_bias_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->bias);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_continuity_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Quaternion_continuity_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->continuity = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Quaternion_continuity_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Quaternion_continuity_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->continuity);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Key_Quaternion(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Key_Quaternion")) goto fail;
    {
        try {
            result = (Key<Quaternion > *)new Key<Quaternion >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KeyTQuaternion_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Key_Quaternion(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Quaternion > *arg1 = (Key<Quaternion > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Key_Quaternion",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTQuaternion_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Key_Quaternion_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KeyTQuaternion_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_Key_Quaternion__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_Key_Quaternion")) goto fail;
    {
        try {
            result = (std::vector<Key<Quaternion > > *)new std::vector<Key<Quaternion > >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_Quaternion__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = 0 ;
    std::vector<Key<Quaternion > > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Key_Quaternion",&obj0)) goto fail;
    {
        std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > > *ptr = (std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Key<Quaternion > >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Key<Quaternion > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<Key<Quaternion > > *)new std::vector<Key<Quaternion > >((std::vector<Key<Quaternion > > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<Key<Quaternion > > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<Quaternion > > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Quaternion_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<Quaternion > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    SwigValueWrapper<std::allocator<Key<Quaternion > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<Quaternion > > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<Key<Quaternion > >::allocator_type * resultptr;
        resultptr = new std::vector<Key<Quaternion > >::allocator_type((std::vector<Key<Quaternion > >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_Quaternion__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > >::size_type arg1 ;
    std::vector<Key<Quaternion > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Key_Quaternion",&obj0)) goto fail;
    {
        arg1 = (std::vector<Key<Quaternion > >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<Quaternion > > *)new std::vector<Key<Quaternion > >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Quaternion_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Quaternion > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_Quaternion__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > >::size_type arg1 ;
    std::vector<Key<Quaternion > >::value_type *arg2 = 0 ;
    std::vector<Key<Quaternion > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_Key_Quaternion",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<Key<Quaternion > >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<Quaternion > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<Quaternion > > *)new std::vector<Key<Quaternion > >(arg1,(Key<Quaternion > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_Quaternion(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_Key_Quaternion__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_Key_Quaternion__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > >**)(0));
        if (_v) {
            return _wrap_new_vector_Key_Quaternion__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_Key_Quaternion__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_Key_Quaternion'");
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Quaternion_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<Quaternion > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((Key<Quaternion > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Key<Quaternion > >::value_type const &_result_ref = ((std::vector<Key<Quaternion > > const *)arg1)->front();
                result = (std::vector<Key<Quaternion > >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Key<Quaternion > >::value_type const &_result_ref = ((std::vector<Key<Quaternion > > const *)arg1)->back();
                result = (std::vector<Key<Quaternion > >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::size_type arg2 ;
    std::vector<Key<Quaternion > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_Quaternion_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Quaternion > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<Quaternion > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(Key<Quaternion > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::size_type arg2 ;
    std::vector<Key<Quaternion > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_Quaternion_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Quaternion > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<Quaternion > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(Key<Quaternion > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_Key_Quaternion_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_Key_Quaternion_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_Key_Quaternion_resize'");
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Quaternion_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Quaternion > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<Quaternion > > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____nonzero__((std::vector<Key<Quaternion > > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____len__((std::vector<Key<Quaternion > > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Quaternion_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Key_Sl_Quaternion_Sg__Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<Key<Quaternion > >::value_type * resultptr;
        resultptr = new std::vector<Key<Quaternion > >::value_type((std::vector<Key<Quaternion > >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::difference_type arg2 ;
    std::vector<Key<Quaternion > >::difference_type arg3 ;
    std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_Quaternion___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Quaternion > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<Quaternion > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > > *)std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::difference_type arg2 ;
    std::vector<Key<Quaternion > >::difference_type arg3 ;
    std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_Key_Quaternion___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Quaternion > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<Quaternion > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > > *ptr = (std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::difference_type arg2 ;
    std::vector<Key<Quaternion > >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_Quaternion___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Quaternion > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<Quaternion > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Quaternion___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Quaternion > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::difference_type arg2 ;
    std::vector<Key<Quaternion > >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Quaternion___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Quaternion > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<Key<Quaternion > >::value_type const &_result_ref = std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____getitem__((std::vector<Key<Quaternion > > const *)arg1,arg2);
                result = (std::vector<Key<Quaternion > >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::difference_type arg2 ;
    std::vector<Key<Quaternion > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_Quaternion___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Quaternion > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<Quaternion > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_Quaternion_Sg__Sg____setitem__(arg1,arg2,(Key<Quaternion > const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Quaternion_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    std::vector<Key<Quaternion > >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Quaternion_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<Quaternion > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_Quaternion_Sg__Sg__append(arg1,(Key<Quaternion > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_Key_Quaternion(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Quaternion > > *arg1 = (std::vector<Key<Quaternion > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_Key_Quaternion",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_Key_Quaternion_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Key_Vector3_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Vector3_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->time = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Vector3_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->time);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    Vector3 *arg2 = (Vector3 *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Vector3_data_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->data = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    Vector3 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Vector3_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Vector3 *)& ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Vector3, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_forward_tangent_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    Vector3 *arg2 = (Vector3 *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Vector3_forward_tangent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->forward_tangent = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_forward_tangent_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    Vector3 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Vector3_forward_tangent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Vector3 *)& ((arg1)->forward_tangent);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Vector3, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_backward_tangent_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    Vector3 *arg2 = (Vector3 *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Vector3_backward_tangent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->backward_tangent = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_backward_tangent_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    Vector3 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Vector3_backward_tangent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Vector3 *)& ((arg1)->backward_tangent);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Vector3, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_tension_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Vector3_tension_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->tension = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_tension_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Vector3_tension_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->tension);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_bias_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Vector3_bias_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->bias = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_bias_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Vector3_bias_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->bias);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_continuity_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_Vector3_continuity_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->continuity = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_Vector3_continuity_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_Vector3_continuity_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->continuity);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Key_Vector3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Key_Vector3")) goto fail;
    {
        try {
            result = (Key<Vector3 > *)new Key<Vector3 >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KeyTVector3_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Key_Vector3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<Vector3 > *arg1 = (Key<Vector3 > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Key_Vector3",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTVector3_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Key_Vector3_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KeyTVector3_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_Key_Vector3D__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_Key_Vector3D")) goto fail;
    {
        try {
            result = (std::vector<Key<Vector3 > > *)new std::vector<Key<Vector3 > >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_Vector3D__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = 0 ;
    std::vector<Key<Vector3 > > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Key_Vector3D",&obj0)) goto fail;
    {
        std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > > *ptr = (std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Key<Vector3 > >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Key<Vector3 > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<Key<Vector3 > > *)new std::vector<Key<Vector3 > >((std::vector<Key<Vector3 > > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<Key<Vector3 > > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<Vector3 > > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Vector3D_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<Vector3 > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    SwigValueWrapper<std::allocator<Key<Vector3 > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<Vector3 > > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<Key<Vector3 > >::allocator_type * resultptr;
        resultptr = new std::vector<Key<Vector3 > >::allocator_type((std::vector<Key<Vector3 > >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_Vector3D__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > >::size_type arg1 ;
    std::vector<Key<Vector3 > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Key_Vector3D",&obj0)) goto fail;
    {
        arg1 = (std::vector<Key<Vector3 > >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<Vector3 > > *)new std::vector<Key<Vector3 > >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Vector3D_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Vector3 > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_Vector3D__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > >::size_type arg1 ;
    std::vector<Key<Vector3 > >::value_type *arg2 = 0 ;
    std::vector<Key<Vector3 > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_Key_Vector3D",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<Key<Vector3 > >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<Vector3 > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<Vector3 > > *)new std::vector<Key<Vector3 > >(arg1,(Key<Vector3 > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_Vector3D(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_Key_Vector3D__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_Key_Vector3D__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > >**)(0));
        if (_v) {
            return _wrap_new_vector_Key_Vector3D__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_Key_Vector3D__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_Key_Vector3D'");
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Vector3D_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<Vector3 > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((Key<Vector3 > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Key<Vector3 > >::value_type const &_result_ref = ((std::vector<Key<Vector3 > > const *)arg1)->front();
                result = (std::vector<Key<Vector3 > >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Key<Vector3 > >::value_type const &_result_ref = ((std::vector<Key<Vector3 > > const *)arg1)->back();
                result = (std::vector<Key<Vector3 > >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::size_type arg2 ;
    std::vector<Key<Vector3 > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_Vector3D_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Vector3 > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<Vector3 > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(Key<Vector3 > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::size_type arg2 ;
    std::vector<Key<Vector3 > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_Vector3D_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Vector3 > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<Vector3 > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(Key<Vector3 > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_Key_Vector3D_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_Key_Vector3D_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_Key_Vector3D_resize'");
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Vector3D_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Vector3 > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<Vector3 > > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_Key_Sl_Vector3_Sg__Sg____nonzero__((std::vector<Key<Vector3 > > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Key_Sl_Vector3_Sg__Sg____len__((std::vector<Key<Vector3 > > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_Vector3D_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Key_Sl_Vector3_Sg__Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<Key<Vector3 > >::value_type * resultptr;
        resultptr = new std::vector<Key<Vector3 > >::value_type((std::vector<Key<Vector3 > >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::difference_type arg2 ;
    std::vector<Key<Vector3 > >::difference_type arg3 ;
    std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_Vector3D___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Vector3 > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<Vector3 > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > > *)std_vector_Sl_Key_Sl_Vector3_Sg__Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::difference_type arg2 ;
    std::vector<Key<Vector3 > >::difference_type arg3 ;
    std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_Key_Vector3D___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Vector3 > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<Vector3 > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > > *ptr = (std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_Key_Sl_Vector3_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::difference_type arg2 ;
    std::vector<Key<Vector3 > >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_Vector3D___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Vector3 > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<Vector3 > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_Vector3_Sg__Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Vector3D___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Vector3 > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_Vector3_Sg__Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::difference_type arg2 ;
    std::vector<Key<Vector3 > >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Vector3D___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Vector3 > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<Key<Vector3 > >::value_type const &_result_ref = std_vector_Sl_Key_Sl_Vector3_Sg__Sg____getitem__((std::vector<Key<Vector3 > > const *)arg1,arg2);
                result = (std::vector<Key<Vector3 > >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::difference_type arg2 ;
    std::vector<Key<Vector3 > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_Vector3D___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<Vector3 > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<Vector3 > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_Vector3_Sg__Sg____setitem__(arg1,arg2,(Key<Vector3 > const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_Vector3D_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    std::vector<Key<Vector3 > >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_Vector3D_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<Vector3 > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_Vector3_Sg__Sg__append(arg1,(Key<Vector3 > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_Key_Vector3D(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<Vector3 > > *arg1 = (std::vector<Key<Vector3 > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_Key_Vector3D",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_Key_Vector3D_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Key_float_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_float_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->time = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_float_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->time);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_float_data_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->data = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_float_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->data);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_forward_tangent_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_float_forward_tangent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->forward_tangent = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_forward_tangent_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_float_forward_tangent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->forward_tangent);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_backward_tangent_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_float_backward_tangent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->backward_tangent = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_backward_tangent_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_float_backward_tangent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->backward_tangent);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_tension_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_float_tension_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->tension = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_tension_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_float_tension_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->tension);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_bias_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_float_bias_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->bias = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_bias_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_float_bias_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->bias);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_continuity_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_float_continuity_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->continuity = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_float_continuity_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_float_continuity_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->continuity);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Key_float(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Key_float")) goto fail;
    {
        try {
            result = (Key<float > *)new Key<float >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KeyTfloat_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Key_float(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<float > *arg1 = (Key<float > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Key_float",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTfloat_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Key_float_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KeyTfloat_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_Key_float__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_Key_float")) goto fail;
    {
        try {
            result = (std::vector<Key<float > > *)new std::vector<Key<float > >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_float__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = 0 ;
    std::vector<Key<float > > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Key_float",&obj0)) goto fail;
    {
        std::vector<Key<float >,std::allocator<Key<float > > > *ptr = (std::vector<Key<float >,std::allocator<Key<float > > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Key<float > >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Key<float > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<Key<float > > *)new std::vector<Key<float > >((std::vector<Key<float > > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_Key_float_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<Key<float > > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<float > > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_float_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<float > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    SwigValueWrapper<std::allocator<Key<float > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<float > > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<Key<float > >::allocator_type * resultptr;
        resultptr = new std::vector<Key<float > >::allocator_type((std::vector<Key<float > >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_float__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > >::size_type arg1 ;
    std::vector<Key<float > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Key_float",&obj0)) goto fail;
    {
        arg1 = (std::vector<Key<float > >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<float > > *)new std::vector<Key<float > >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_float_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<float > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_float__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > >::size_type arg1 ;
    std::vector<Key<float > >::value_type *arg2 = 0 ;
    std::vector<Key<float > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_Key_float",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<Key<float > >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<float > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<float > > *)new std::vector<Key<float > >(arg1,(Key<float > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_float(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_Key_float__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_Key_float__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<Key<float >,std::allocator<Key<float > > >**)(0));
        if (_v) {
            return _wrap_new_vector_Key_float__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_Key_float__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_Key_float'");
    return NULL;
}


static PyObject *_wrap_vector_Key_float_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_float_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<float > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((Key<float > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Key<float > >::value_type const &_result_ref = ((std::vector<Key<float > > const *)arg1)->front();
                result = (std::vector<Key<float > >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Key<float > >::value_type const &_result_ref = ((std::vector<Key<float > > const *)arg1)->back();
                result = (std::vector<Key<float > >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::size_type arg2 ;
    std::vector<Key<float > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_float_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<float > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<float > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(Key<float > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::size_type arg2 ;
    std::vector<Key<float > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_float_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<float > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<float > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(Key<float > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_Key_float_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_Key_float_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_Key_float_resize'");
    return NULL;
}


static PyObject *_wrap_vector_Key_float_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_float_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<float > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<float > > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_Key_Sl_float_Sg__Sg____nonzero__((std::vector<Key<float > > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Key_Sl_float_Sg__Sg____len__((std::vector<Key<float > > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_float_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Key_Sl_float_Sg__Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<Key<float > >::value_type * resultptr;
        resultptr = new std::vector<Key<float > >::value_type((std::vector<Key<float > >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::difference_type arg2 ;
    std::vector<Key<float > >::difference_type arg3 ;
    std::vector<Key<float >,std::allocator<Key<float > > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_float___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<float > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<float > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<float >,std::allocator<Key<float > > > *)std_vector_Sl_Key_Sl_float_Sg__Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::difference_type arg2 ;
    std::vector<Key<float > >::difference_type arg3 ;
    std::vector<Key<float >,std::allocator<Key<float > > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_Key_float___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<float > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<float > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<Key<float >,std::allocator<Key<float > > > *ptr = (std::vector<Key<float >,std::allocator<Key<float > > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Key<float >,std::allocator<Key<float > > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Key<float >,std::allocator<Key<float > > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_Key_Sl_float_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector<Key<float >,std::allocator<Key<float > > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_Key_float___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::difference_type arg2 ;
    std::vector<Key<float > >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_float___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<float > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<float > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_float_Sg__Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_float___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<float > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_float_Sg__Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::difference_type arg2 ;
    std::vector<Key<float > >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_float___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<float > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<Key<float > >::value_type const &_result_ref = std_vector_Sl_Key_Sl_float_Sg__Sg____getitem__((std::vector<Key<float > > const *)arg1,arg2);
                result = (std::vector<Key<float > >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::difference_type arg2 ;
    std::vector<Key<float > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_float___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<float > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<float > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_float_Sg__Sg____setitem__(arg1,arg2,(Key<float > const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_float_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    std::vector<Key<float > >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_float_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<float > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_float_Sg__Sg__append(arg1,(Key<float > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_Key_float(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<float > > *arg1 = (std::vector<Key<float > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_Key_float",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_Key_float_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Key_string_time_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_string_time_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->time = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_time_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_string_time_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->time);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_string_data_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->data = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_string_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_forward_tangent_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_string_forward_tangent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->forward_tangent = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_forward_tangent_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_string_forward_tangent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->forward_tangent);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_backward_tangent_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_string_backward_tangent_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->backward_tangent = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_backward_tangent_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_string_backward_tangent_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->backward_tangent);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_tension_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_string_tension_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->tension = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_tension_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_string_tension_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->tension);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_bias_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_string_bias_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->bias = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_bias_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_string_bias_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->bias);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_continuity_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Key_string_continuity_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->continuity = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Key_string_continuity_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Key_string_continuity_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->continuity);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Key_string(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Key_string")) goto fail;
    {
        try {
            result = (Key<std::string > *)new Key<std::string >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KeyTstd__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Key_string(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Key<std::string > *arg1 = (Key<std::string > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Key_string",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KeyTstd__string_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Key_string_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KeyTstd__string_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_Key_string__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_vector_Key_string")) goto fail;
    {
        try {
            result = (std::vector<Key<std::string > > *)new std::vector<Key<std::string > >();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_string__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = 0 ;
    std::vector<Key<std::string > > *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Key_string",&obj0)) goto fail;
    {
        std::vector<Key<std::string >,std::allocator<Key<std::string > > > *ptr = (std::vector<Key<std::string >,std::allocator<Key<std::string > > > *)0;
        res1 = swig::asptr(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Key<std::string > >", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Key<std::string > >");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        try {
            result = (std::vector<Key<std::string > > *)new std::vector<Key<std::string > >((std::vector<Key<std::string > > const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_vector_Key_string_empty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string_empty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((std::vector<Key<std::string > > const *)arg1)->empty();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_size(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string_size",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<std::string > > const *)arg1)->size();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->clear();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_string_swap",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<std::string > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->swap(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_get_allocator(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    SwigValueWrapper<std::allocator<Key<std::string > > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string_get_allocator",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<std::string > > const *)arg1)->get_allocator();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        std::vector<Key<std::string > >::allocator_type * resultptr;
        resultptr = new std::vector<Key<std::string > >::allocator_type((std::vector<Key<std::string > >::allocator_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__allocator_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_string__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > >::size_type arg1 ;
    std::vector<Key<std::string > > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_Key_string",&obj0)) goto fail;
    {
        arg1 = (std::vector<Key<std::string > >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<std::string > > *)new std::vector<Key<std::string > >(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_pop_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string_pop_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->pop_back();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_resize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_string_resize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<std::string > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_string__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > >::size_type arg1 ;
    std::vector<Key<std::string > >::value_type *arg2 = 0 ;
    std::vector<Key<std::string > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_Key_string",&obj0,&obj1)) goto fail;
    {
        arg1 = (std::vector<Key<std::string > >::size_type)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<std::string > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<std::string > > *)new std::vector<Key<std::string > >(arg1,(Key<std::string > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_Key_string(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_vector_Key_string__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_vector_Key_string__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = swig::asptr(argv[0], (std::vector<Key<std::string >,std::allocator<Key<std::string > > >**)(0));
        if (_v) {
            return _wrap_new_vector_Key_string__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_vector_Key_string__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_vector_Key_string'");
    return NULL;
}


static PyObject *_wrap_vector_Key_string_push_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_string_push_back",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<std::string > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->push_back((Key<std::string > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_front(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string_front",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Key<std::string > >::value_type const &_result_ref = ((std::vector<Key<std::string > > const *)arg1)->front();
                result = (std::vector<Key<std::string > >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_back(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::value_type *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string_back",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            {
                std::vector<Key<std::string > >::value_type const &_result_ref = ((std::vector<Key<std::string > > const *)arg1)->back();
                result = (std::vector<Key<std::string > >::value_type *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_assign(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::size_type arg2 ;
    std::vector<Key<std::string > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_string_assign",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<std::string > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<std::string > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->assign(arg2,(Key<std::string > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_resize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::size_type arg2 ;
    std::vector<Key<std::string > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_string_resize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<std::string > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<std::string > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->resize(arg2,(Key<std::string > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_resize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                return _wrap_vector_Key_string_resize__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_long(argv[1]);
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_vector_Key_string_resize__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'vector_Key_string_resize'");
    return NULL;
}


static PyObject *_wrap_vector_Key_string_reserve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::size_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_string_reserve",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<std::string > >::size_type)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->reserve(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_capacity(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string_capacity",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((std::vector<Key<std::string > > const *)arg1)->capacity();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)std_vector_Sl_Key_Sl_std_string_Sg__Sg____nonzero__((std::vector<Key<std::string > > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string___len__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::size_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string___len__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Key_Sl_std_string_Sg__Sg____len__((std::vector<Key<std::string > > const *)arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_pop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::value_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_Key_string_pop",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = std_vector_Sl_Key_Sl_std_string_Sg__Sg__pop(arg1);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    {
        std::vector<Key<std::string > >::value_type * resultptr;
        resultptr = new std::vector<Key<std::string > >::value_type((std::vector<Key<std::string > >::value_type &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string___getslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::difference_type arg2 ;
    std::vector<Key<std::string > >::difference_type arg3 ;
    std::vector<Key<std::string >,std::allocator<Key<std::string > > > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_string___getslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<std::string > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<std::string > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            result = (std::vector<Key<std::string >,std::allocator<Key<std::string > > > *)std_vector_Sl_Key_Sl_std_string_Sg__Sg____getslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string___setslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::difference_type arg2 ;
    std::vector<Key<std::string > >::difference_type arg3 ;
    std::vector<Key<std::string >,std::allocator<Key<std::string > > > *arg4 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:vector_Key_string___setslice__",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<std::string > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<std::string > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        std::vector<Key<std::string >,std::allocator<Key<std::string > > > *ptr = (std::vector<Key<std::string >,std::allocator<Key<std::string > > > *)0;
        res4 = swig::asptr(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Key<std::string >,std::allocator<Key<std::string > > >", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Key<std::string >,std::allocator<Key<std::string > > >");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    {
        try {
            std_vector_Sl_Key_Sl_std_string_Sg__Sg____setslice__(arg1,arg2,arg3,(std::vector<Key<std::string >,std::allocator<Key<std::string > > > const &)*arg4);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        catch (std::invalid_argument& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_TypeError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }      
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_vector_Key_string___delslice__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::difference_type arg2 ;
    std::vector<Key<std::string > >::difference_type arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_string___delslice__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<std::string > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (std::vector<Key<std::string > >::difference_type)(SWIG_As_long(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_std_string_Sg__Sg____delslice__(arg1,arg2,arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string___delitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::difference_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_string___delitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<std::string > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_std_string_Sg__Sg____delitem__(arg1,arg2);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::difference_type arg2 ;
    std::vector<Key<std::string > >::value_type *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_string___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<std::string > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                std::vector<Key<std::string > >::value_type const &_result_ref = std_vector_Sl_Key_Sl_std_string_Sg__Sg____getitem__((std::vector<Key<std::string > > const *)arg1,arg2);
                result = (std::vector<Key<std::string > >::value_type *) &_result_ref;
            }
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::difference_type arg2 ;
    std::vector<Key<std::string > >::value_type *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:vector_Key_string___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (std::vector<Key<std::string > >::difference_type)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<std::string > >::value_type");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_std_string_Sg__Sg____setitem__(arg1,arg2,(Key<std::string > const &)*arg3);
        }
        catch (std::out_of_range& e) {
            if (!PyErr_Occurred()) {
                SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
            } else {
                SWIG_fail;
            }
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,341,SWIG_CATCH_UNKNOWN@*/  catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "unknown exception");
        }
        /*@@*/
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_Key_string_append(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    std::vector<Key<std::string > >::value_type *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vector_Key_string_append",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<std::string > >::value_type");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            std_vector_Sl_Key_Sl_std_string_Sg__Sg__append(arg1,(Key<std::string > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_Key_string(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::vector<Key<std::string > > *arg1 = (std::vector<Key<std::string > > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_Key_string",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_Key_string_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_ID_TRI_SHAPE_DATA_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ID_TRI_SHAPE_DATA is read-only.");
    return 1;
}


static PyObject *_wrap_ID_TRI_SHAPE_DATA_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(ID_TRI_SHAPE_DATA)); 
    }
    return pyobj;
}


static int _wrap_ID_SKIN_DATA_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ID_SKIN_DATA is read-only.");
    return 1;
}


static PyObject *_wrap_ID_SKIN_DATA_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(ID_SKIN_DATA)); 
    }
    return pyobj;
}


static int _wrap_ID_NODE_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ID_NODE is read-only.");
    return 1;
}


static PyObject *_wrap_ID_NODE_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(ID_NODE)); 
    }
    return pyobj;
}


static int _wrap_ID_KEYFRAME_DATA_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ID_KEYFRAME_DATA is read-only.");
    return 1;
}


static PyObject *_wrap_ID_KEYFRAME_DATA_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(ID_KEYFRAME_DATA)); 
    }
    return pyobj;
}


static int _wrap_ID_TEXT_KEY_EXTRA_DATA_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ID_TEXT_KEY_EXTRA_DATA is read-only.");
    return 1;
}


static PyObject *_wrap_ID_TEXT_KEY_EXTRA_DATA_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(ID_TEXT_KEY_EXTRA_DATA)); 
    }
    return pyobj;
}


static int _wrap_ID_MORPH_DATA_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ID_MORPH_DATA is read-only.");
    return 1;
}


static PyObject *_wrap_ID_MORPH_DATA_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(ID_MORPH_DATA)); 
    }
    return pyobj;
}


static int _wrap_ID_SHAPE_DATA_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ID_SHAPE_DATA is read-only.");
    return 1;
}


static PyObject *_wrap_ID_SHAPE_DATA_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(ID_SHAPE_DATA)); 
    }
    return pyobj;
}


static int _wrap_ID_TRI_STRIPS_DATA_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable ID_TRI_STRIPS_DATA is read-only.");
    return 1;
}


static PyObject *_wrap_ID_TRI_STRIPS_DATA_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(ID_TRI_STRIPS_DATA)); 
    }
    return pyobj;
}


static int _wrap_VER_4_0_0_2_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable VER_4_0_0_2 is read-only.");
    return 1;
}


static PyObject *_wrap_VER_4_0_0_2_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(VER_4_0_0_2)); 
    }
    return pyobj;
}


static int _wrap_VER_4_1_0_12_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable VER_4_1_0_12 is read-only.");
    return 1;
}


static PyObject *_wrap_VER_4_1_0_12_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(VER_4_1_0_12)); 
    }
    return pyobj;
}


static int _wrap_VER_4_2_0_2_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable VER_4_2_0_2 is read-only.");
    return 1;
}


static PyObject *_wrap_VER_4_2_0_2_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(VER_4_2_0_2)); 
    }
    return pyobj;
}


static int _wrap_VER_4_2_1_0_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable VER_4_2_1_0 is read-only.");
    return 1;
}


static PyObject *_wrap_VER_4_2_1_0_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(VER_4_2_1_0)); 
    }
    return pyobj;
}


static int _wrap_VER_4_2_2_0_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable VER_4_2_2_0 is read-only.");
    return 1;
}


static PyObject *_wrap_VER_4_2_2_0_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(VER_4_2_2_0)); 
    }
    return pyobj;
}


static int _wrap_VER_10_0_1_0_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable VER_10_0_1_0 is read-only.");
    return 1;
}


static PyObject *_wrap_VER_10_0_1_0_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(VER_10_0_1_0)); 
    }
    return pyobj;
}


static int _wrap_VER_10_1_0_0_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable VER_10_1_0_0 is read-only.");
    return 1;
}


static PyObject *_wrap_VER_10_1_0_0_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(VER_10_1_0_0)); 
    }
    return pyobj;
}


static int _wrap_VER_10_2_0_0_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable VER_10_2_0_0 is read-only.");
    return 1;
}


static PyObject *_wrap_VER_10_2_0_0_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(VER_10_2_0_0)); 
    }
    return pyobj;
}


static int _wrap_VER_20_0_0_4_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable VER_20_0_0_4 is read-only.");
    return 1;
}


static PyObject *_wrap_VER_20_0_0_4_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(VER_20_0_0_4)); 
    }
    return pyobj;
}


static PyObject *_wrap_ReadNifList(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    std::vector<blk_ref,std::allocator<blk_ref > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ReadNifList",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            result = ReadNifList(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<blk_ref,std::allocator<blk_ref > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ReadNifTree(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    blk_ref result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ReadNifTree",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            result = ReadNifTree(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        blk_ref * resultptr;
        resultptr = new blk_ref((blk_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_blk_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WriteNifTree__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    blk_ref *arg2 = 0 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:WriteNifTree",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            WriteNifTree(arg1,*arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WriteNifTree__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    blk_ref *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:WriteNifTree",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            WriteNifTree(arg1,*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_WriteNifTree(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_WriteNifTree__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_WriteNifTree__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'WriteNifTree'");
    return NULL;
}


static PyObject *_wrap_SetVerboseMode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SetVerboseMode",&obj0)) goto fail;
    {
        arg1 = (bool)(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            SetVerboseMode(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CreateBlock(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    blk_ref result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CreateBlock",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            result = CreateBlock(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        blk_ref * resultptr;
        resultptr = new blk_ref((blk_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_blk_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BlocksInMemory(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int result;
    
    if(!PyArg_ParseTuple(args,(char *)":BlocksInMemory")) goto fail;
    {
        try {
            result = (unsigned int)BlocksInMemory();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_QueryShapeData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = 0 ;
    IShapeData *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:QueryShapeData",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (IShapeData *)QueryShapeData(*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IShapeData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_QueryTriShapeData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = 0 ;
    ITriShapeData *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:QueryTriShapeData",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (ITriShapeData *)QueryTriShapeData(*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ITriShapeData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_QuerySkinData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = 0 ;
    ISkinData *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:QuerySkinData",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (ISkinData *)QuerySkinData(*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ISkinData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_QueryNode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = 0 ;
    INode *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:QueryNode",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (INode *)QueryNode(*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_INode, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_QueryKeyframeData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = 0 ;
    IKeyframeData *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:QueryKeyframeData",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (IKeyframeData *)QueryKeyframeData(*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IKeyframeData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_QueryTextKeyExtraData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = 0 ;
    ITextKeyExtraData *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:QueryTextKeyExtraData",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (ITextKeyExtraData *)QueryTextKeyExtraData(*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ITextKeyExtraData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_QueryMorphData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = 0 ;
    IMorphData *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:QueryMorphData",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (IMorphData *)QueryMorphData(*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IMorphData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_QueryTriStripsData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = 0 ;
    ITriStripsData *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:QueryTriStripsData",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (ITriStripsData *)QueryTriStripsData(*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ITriStripsData, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UVCoord_u_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    UVCoord *arg1 = (UVCoord *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UVCoord_u_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_UVCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->u = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UVCoord_u_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    UVCoord *arg1 = (UVCoord *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UVCoord_u_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_UVCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->u);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UVCoord_v_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    UVCoord *arg1 = (UVCoord *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UVCoord_v_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_UVCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->v = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UVCoord_v_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    UVCoord *arg1 = (UVCoord *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UVCoord_v_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_UVCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->v);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UVCoord_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    UVCoord *arg1 = (UVCoord *) 0 ;
    float arg2 ;
    float arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:UVCoord_Set",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_UVCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_UVCoord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    UVCoord *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_UVCoord")) goto fail;
    {
        try {
            result = (UVCoord *)new UVCoord();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_UVCoord, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_UVCoord(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    UVCoord *arg1 = (UVCoord *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_UVCoord",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_UVCoord, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * UVCoord_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_UVCoord, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Triangle_v1_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Triangle *arg1 = (Triangle *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triangle_v1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->v1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_v1_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Triangle *arg1 = (Triangle *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_v1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->v1);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_v2_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Triangle *arg1 = (Triangle *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triangle_v2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->v2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_v2_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Triangle *arg1 = (Triangle *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_v2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->v2);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_v3_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Triangle *arg1 = (Triangle *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Triangle_v3_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->v3 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_v3_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Triangle *arg1 = (Triangle *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Triangle_v3_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->v3);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Triangle_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Triangle *arg1 = (Triangle *) 0 ;
    short arg2 ;
    short arg3 ;
    short arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Triangle_Set",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (short)(SWIG_As_short(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (short)(SWIG_As_short(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3,arg4);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Triangle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Triangle *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Triangle")) goto fail;
    {
        try {
            result = (Triangle *)new Triangle();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Triangle, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Triangle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Triangle *arg1 = (Triangle *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Triangle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Triangle, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Triangle_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Triangle, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Vector3_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Vector3 *arg1 = (Vector3 *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Vector3 *arg1 = (Vector3 *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->x);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Vector3 *arg1 = (Vector3 *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Vector3 *arg1 = (Vector3 *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->y);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_z_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Vector3 *arg1 = (Vector3 *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3_z_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->z = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_z_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Vector3 *arg1 = (Vector3 *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_z_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->z);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Vector3 *arg1 = (Vector3 *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Vector3_Set",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3,arg4);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vector3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Vector3 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Vector3")) goto fail;
    {
        try {
            result = (Vector3 *)new Vector3();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Vector3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Vector3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Vector3 *arg1 = (Vector3 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Vector3",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Vector3_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Vector3, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Float2_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float2 *arg1 = (Float2 *) 0 ;
    float *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Float2_data_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float2, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        float *inp = (float *)(arg2);
        if (inp) {
            float *dest = (float *)(arg1->data);
            size_t ii = 0;
            for (; ii < 2; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("float");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float2_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float2 *arg1 = (Float2 *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Float2_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float2, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *)(float *) ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float2_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float2 *arg1 = (Float2 *) 0 ;
    float arg2 ;
    float arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Float2_Set",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float2, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float2___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float2 *arg1 = (Float2 *) 0 ;
    int arg2 ;
    float result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Float2___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float2, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (float)(arg1)->__getitem__(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float2___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float2 *arg1 = (Float2 *) 0 ;
    int arg2 ;
    float arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Float2___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float2, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Float2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float2 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Float2")) goto fail;
    {
        try {
            result = (Float2 *)new Float2();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Float2, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Float2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float2 *arg1 = (Float2 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Float2",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float2, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Float2_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Float2, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Matrix22_rows_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix22 *arg1 = (Matrix22 *) 0 ;
    Float2 *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix22_rows_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix22, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Float2, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        Float2 *inp = (Float2 *)(arg2);
        if (inp) {
            Float2 *dest = (Float2 *)(arg1->rows);
            size_t ii = 0;
            for (; ii < 2; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("Float2");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix22_rows_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix22 *arg1 = (Matrix22 *) 0 ;
    Float2 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix22_rows_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix22, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Float2 *)(Float2 *) ((arg1)->rows);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Float2, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix22_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix22 *arg1 = (Matrix22 *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Matrix22_Set",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix22, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (float)(SWIG_As_float(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3,arg4,arg5);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix22___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix22 *arg1 = (Matrix22 *) 0 ;
    int arg2 ;
    Float2 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix22___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix22, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                Float2 &_result_ref = (arg1)->__getitem__(arg2);
                result = (Float2 *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Float2, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix22(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix22 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Matrix22")) goto fail;
    {
        try {
            result = (Matrix22 *)new Matrix22();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Matrix22, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Matrix22(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix22 *arg1 = (Matrix22 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Matrix22",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix22, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Matrix22_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Matrix22, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Float3_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float3 *arg1 = (Float3 *) 0 ;
    float *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Float3_data_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        float *inp = (float *)(arg2);
        if (inp) {
            float *dest = (float *)(arg1->data);
            size_t ii = 0;
            for (; ii < 3; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("float");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float3_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float3 *arg1 = (Float3 *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Float3_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *)(float *) ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float3_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float3 *arg1 = (Float3 *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Float3_Set",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3,arg4);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float3___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float3 *arg1 = (Float3 *) 0 ;
    int arg2 ;
    float result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Float3___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (float)(arg1)->__getitem__(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float3___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float3 *arg1 = (Float3 *) 0 ;
    int arg2 ;
    float arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Float3___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Float3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float3 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Float3")) goto fail;
    {
        try {
            result = (Float3 *)new Float3();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Float3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Float3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float3 *arg1 = (Float3 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Float3",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Float3_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Float3, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Matrix33_rows_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix33 *arg1 = (Matrix33 *) 0 ;
    Float3 *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix33_rows_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix33, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Float3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        Float3 *inp = (Float3 *)(arg2);
        if (inp) {
            Float3 *dest = (Float3 *)(arg1->rows);
            size_t ii = 0;
            for (; ii < 3; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("Float3");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix33_rows_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix33 *arg1 = (Matrix33 *) 0 ;
    Float3 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix33_rows_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix33, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Float3 *)(Float3 *) ((arg1)->rows);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Float3, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix33_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix33 *arg1 = (Matrix33 *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    float arg7 ;
    float arg8 ;
    float arg9 ;
    float arg10 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOO:Matrix33_Set",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix33, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (float)(SWIG_As_float(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (float)(SWIG_As_float(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (float)(SWIG_As_float(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (float)(SWIG_As_float(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (float)(SWIG_As_float(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        arg10 = (float)(SWIG_As_float(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix33_AsFloatArr(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix33 *arg1 = (Matrix33 *) 0 ;
    float (*arg2)[3] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix33_AsFloatArr",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix33, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_a_3__float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            (arg1)->AsFloatArr((float (*)[3])arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix33___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix33 *arg1 = (Matrix33 *) 0 ;
    int arg2 ;
    Float3 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix33___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix33, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                Float3 &_result_ref = (arg1)->__getitem__(arg2);
                result = (Float3 *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Float3, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix33(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix33 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Matrix33")) goto fail;
    {
        try {
            result = (Matrix33 *)new Matrix33();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Matrix33, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Matrix33(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix33 *arg1 = (Matrix33 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Matrix33",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix33, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Matrix33_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Matrix33, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Float4_data_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float4 *arg1 = (Float4 *) 0 ;
    float *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Float4_data_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        float *inp = (float *)(arg2);
        if (inp) {
            float *dest = (float *)(arg1->data);
            size_t ii = 0;
            for (; ii < 4; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("float");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float4_data_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float4 *arg1 = (Float4 *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Float4_data_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *)(float *) ((arg1)->data);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float4_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float4 *arg1 = (Float4 *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Float4_Set",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (float)(SWIG_As_float(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3,arg4,arg5);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float4___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float4 *arg1 = (Float4 *) 0 ;
    int arg2 ;
    float result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Float4___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (float)(arg1)->__getitem__(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Float4___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float4 *arg1 = (Float4 *) 0 ;
    int arg2 ;
    float arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Float4___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Float4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float4 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Float4")) goto fail;
    {
        try {
            result = (Float4 *)new Float4();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Float4, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Float4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Float4 *arg1 = (Float4 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Float4",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Float4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Float4_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Float4, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Matrix44_rows_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix44 *arg1 = (Matrix44 *) 0 ;
    Float4 *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix44_rows_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix44, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Float4, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        Float4 *inp = (Float4 *)(arg2);
        if (inp) {
            Float4 *dest = (Float4 *)(arg1->rows);
            size_t ii = 0;
            for (; ii < 4; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("Float4");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix44_rows_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix44 *arg1 = (Matrix44 *) 0 ;
    Float4 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix44_rows_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix44, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Float4 *)(Float4 *) ((arg1)->rows);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Float4, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix44_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix44 *arg1 = (Matrix44 *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    float arg6 ;
    float arg7 ;
    float arg8 ;
    float arg9 ;
    float arg10 ;
    float arg11 ;
    float arg12 ;
    float arg13 ;
    float arg14 ;
    float arg15 ;
    float arg16 ;
    float arg17 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    PyObject * obj7 = 0 ;
    PyObject * obj8 = 0 ;
    PyObject * obj9 = 0 ;
    PyObject * obj10 = 0 ;
    PyObject * obj11 = 0 ;
    PyObject * obj12 = 0 ;
    PyObject * obj13 = 0 ;
    PyObject * obj14 = 0 ;
    PyObject * obj15 = 0 ;
    PyObject * obj16 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOOOOOOOOOOOO:Matrix44_Set",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15,&obj16)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix44, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (float)(SWIG_As_float(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        arg6 = (float)(SWIG_As_float(obj5)); 
        if (SWIG_arg_fail(6)) SWIG_fail;
    }
    {
        arg7 = (float)(SWIG_As_float(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    {
        arg8 = (float)(SWIG_As_float(obj7)); 
        if (SWIG_arg_fail(8)) SWIG_fail;
    }
    {
        arg9 = (float)(SWIG_As_float(obj8)); 
        if (SWIG_arg_fail(9)) SWIG_fail;
    }
    {
        arg10 = (float)(SWIG_As_float(obj9)); 
        if (SWIG_arg_fail(10)) SWIG_fail;
    }
    {
        arg11 = (float)(SWIG_As_float(obj10)); 
        if (SWIG_arg_fail(11)) SWIG_fail;
    }
    {
        arg12 = (float)(SWIG_As_float(obj11)); 
        if (SWIG_arg_fail(12)) SWIG_fail;
    }
    {
        arg13 = (float)(SWIG_As_float(obj12)); 
        if (SWIG_arg_fail(13)) SWIG_fail;
    }
    {
        arg14 = (float)(SWIG_As_float(obj13)); 
        if (SWIG_arg_fail(14)) SWIG_fail;
    }
    {
        arg15 = (float)(SWIG_As_float(obj14)); 
        if (SWIG_arg_fail(15)) SWIG_fail;
    }
    {
        arg16 = (float)(SWIG_As_float(obj15)); 
        if (SWIG_arg_fail(16)) SWIG_fail;
    }
    {
        arg17 = (float)(SWIG_As_float(obj16)); 
        if (SWIG_arg_fail(17)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix44_AsFloatArr(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix44 *arg1 = (Matrix44 *) 0 ;
    float (*arg2)[4] ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix44_AsFloatArr",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix44, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_a_4__float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            (arg1)->AsFloatArr((float (*)[4])arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix44___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix44 *arg1 = (Matrix44 *) 0 ;
    int arg2 ;
    Float4 *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix44___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix44, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            {
                Float4 &_result_ref = (arg1)->__getitem__(arg2);
                result = (Float4 *) &_result_ref;
            }
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Float4, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix44(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix44 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Matrix44")) goto fail;
    {
        try {
            result = (Matrix44 *)new Matrix44();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Matrix44, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Matrix44(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Matrix44 *arg1 = (Matrix44 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Matrix44",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Matrix44, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Matrix44_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Matrix44, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Color_r_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *arg1 = (Color *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Color_r_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Color, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->r = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Color_r_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *arg1 = (Color *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Color_r_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Color, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->r);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Color_g_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *arg1 = (Color *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Color_g_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Color, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->g = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Color_g_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *arg1 = (Color *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Color_g_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Color, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->g);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Color_b_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *arg1 = (Color *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Color_b_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Color, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->b = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Color_b_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *arg1 = (Color *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Color_b_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Color, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->b);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Color_a_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *arg1 = (Color *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Color_a_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Color, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->a = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Color_a_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *arg1 = (Color *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Color_a_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Color, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->a);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Color_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *arg1 = (Color *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Color_Set",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Color, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3,arg4);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Color(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Color")) goto fail;
    {
        try {
            result = (Color *)new Color();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Color, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Color(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Color *arg1 = (Color *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Color",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Color, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Color_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Color, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Quaternion_w_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *arg1 = (Quaternion *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Quaternion_w_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->w = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Quaternion_w_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *arg1 = (Quaternion *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Quaternion_w_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->w);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Quaternion_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *arg1 = (Quaternion *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Quaternion_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Quaternion_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *arg1 = (Quaternion *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Quaternion_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->x);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Quaternion_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *arg1 = (Quaternion *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Quaternion_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Quaternion_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *arg1 = (Quaternion *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Quaternion_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->y);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Quaternion_z_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *arg1 = (Quaternion *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Quaternion_z_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->z = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Quaternion_z_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *arg1 = (Quaternion *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Quaternion_z_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->z);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Quaternion_Set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *arg1 = (Quaternion *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:Quaternion_Set",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (float)(SWIG_As_float(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2,arg3,arg4,arg5);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Quaternion(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Quaternion")) goto fail;
    {
        try {
            result = (Quaternion *)new Quaternion();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Quaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Quaternion(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Quaternion *arg1 = (Quaternion *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Quaternion",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Quaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Quaternion_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Quaternion, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_IBlock(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IBlock",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_GetBlockNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IBlock_GetBlockNum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)(arg1)->GetBlockNum();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_GetParent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    blk_ref result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IBlock_GetParent",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetParent();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        blk_ref * resultptr;
        resultptr = new blk_ref((blk_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_blk_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_asString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IBlock_asString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->asString();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_GetBlockType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IBlock_GetBlockType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetBlockType();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_GetAttr(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    std::string arg2 ;
    attr_ref result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IBlock_GetAttr",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            result = (arg1)->GetAttr(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        attr_ref * resultptr;
        resultptr = new attr_ref((attr_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_attr_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_GetAttrs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    std::vector<attr_ref > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IBlock_GetAttrs",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetAttrs();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<attr_ref,std::allocator<attr_ref > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_GetLinks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    std::list<blk_ref > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IBlock_GetLinks",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetLinks();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::list<blk_ref,std::allocator<blk_ref > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_QueryInterface(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    int arg2 ;
    void *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IBlock_QueryInterface",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (void *)(arg1)->QueryInterface(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_Namable(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IBlock_Namable",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->Namable();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_SetName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IBlock_SetName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            (arg1)->SetName(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IBlock_GetName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IBlock_GetName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetName();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IBlock_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_IBlock, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_IAttr(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IAttr",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_GetType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_GetType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->GetType();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_GetName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_GetName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->GetName();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Read(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    ifstream *arg2 = 0 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:IAttr_Read",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ifstream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ifstream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->Read(*arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Write(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    ofstream *arg2 = 0 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:IAttr_Write",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ofstream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ofstream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->Write(*arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asInt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asInt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)((IAttr const *)arg1)->asInt();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asFloat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asFloat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (float)((IAttr const *)arg1)->asFloat();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asFloat3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    Float3 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asFloat3",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->asFloat3();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        Float3 * resultptr;
        resultptr = new Float3((Float3 &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Float3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->asString();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asMatrix33(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    Matrix33 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asMatrix33",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->asMatrix33();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        Matrix33 * resultptr;
        resultptr = new Matrix33((Matrix33 &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Matrix33, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asLink(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    blk_ref result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asLink",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->asLink();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        blk_ref * resultptr;
        resultptr = new blk_ref((blk_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_blk_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asTextureSource(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    TextureSource result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asTextureSource",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->asTextureSource();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        TextureSource * resultptr;
        resultptr = new TextureSource((TextureSource &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TextureSource, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asBoundingBox(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    BoundingBox result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asBoundingBox",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->asBoundingBox();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        BoundingBox * resultptr;
        resultptr = new BoundingBox((BoundingBox &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_BoundingBox, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asConditionalInt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    ConditionalInt result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asConditionalInt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->asConditionalInt();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        ConditionalInt * resultptr;
        resultptr = new ConditionalInt((ConditionalInt &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_ConditionalInt, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asTexture(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    Texture result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asTexture",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->asTexture();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        Texture * resultptr;
        resultptr = new Texture((Texture &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Texture, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_asLinkList(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    std::list<blk_ref > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_asLinkList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = ((IAttr const *)arg1)->asLinkList();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::list<blk_ref,std::allocator<blk_ref > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    Float3 *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Float3, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Float3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    std::string *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    Matrix33 *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Matrix33, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Matrix33");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    blk_ref *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    TextureSource *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TextureSource, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TextureSource");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    BoundingBox *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("BoundingBox");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    ConditionalInt *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ConditionalInt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ConditionalInt");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    Texture *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Texture");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_Set(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Float3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_IAttr_Set__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_IAttr_Set__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Matrix33, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_IAttr_Set__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_IAttr_Set__SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TextureSource, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_IAttr_Set__SWIG_6(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_BoundingBox, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_IAttr_Set__SWIG_7(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_ConditionalInt, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_IAttr_Set__SWIG_8(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Texture, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_IAttr_Set__SWIG_9(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_IAttr_Set__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_IAttr_Set__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'IAttr_Set'");
    return NULL;
}


static PyObject *_wrap_IAttr_HasLinks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_HasLinks",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->HasLinks();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_AddLink(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    blk_ref arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_AddLink",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        blk_ref * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            (arg1)->AddLink(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_AddLinks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    std::list<blk_ref > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_AddLinks",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::list<blk_ref,std::allocator<blk_ref > > *ptr = (std::list<blk_ref,std::allocator<blk_ref > > *)0;
        int res = swig::asptr(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::list<blk_ref >", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::list<blk_ref >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            (arg1)->AddLinks(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_ClearLinks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IAttr_ClearLinks",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (arg1)->ClearLinks();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_RemoveLinks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    blk_ref arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_RemoveLinks",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        blk_ref * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            (arg1)->RemoveLinks(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IAttr_FindLink(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    std::string arg2 ;
    blk_ref result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IAttr_FindLink",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            result = (arg1)->FindLink(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        blk_ref * resultptr;
        resultptr = new blk_ref((blk_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_blk_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IAttr_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_IAttr, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_INode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    INode *arg1 = (INode *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_INode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_INode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INode_GetLocalTransform(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    INode *arg1 = (INode *) 0 ;
    Matrix44 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:INode_GetLocalTransform",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_INode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetLocalTransform();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        Matrix44 * resultptr;
        resultptr = new Matrix44((Matrix44 &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Matrix44, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INode_GetWorldTransform(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    INode *arg1 = (INode *) 0 ;
    Matrix44 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:INode_GetWorldTransform",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_INode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetWorldTransform();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        Matrix44 * resultptr;
        resultptr = new Matrix44((Matrix44 &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Matrix44, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INode_GetBindPosition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    INode *arg1 = (INode *) 0 ;
    Matrix44 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:INode_GetBindPosition",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_INode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetBindPosition();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        Matrix44 * resultptr;
        resultptr = new Matrix44((Matrix44 &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Matrix44, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INode_SetBindPosition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    INode *arg1 = (INode *) 0 ;
    Matrix44 *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:INode_SetBindPosition",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_INode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Matrix44, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Matrix44");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetBindPosition(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INode_GetLocalBindPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    INode *arg1 = (INode *) 0 ;
    Matrix44 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:INode_GetLocalBindPos",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_INode, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetLocalBindPos();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        Matrix44 * resultptr;
        resultptr = new Matrix44((Matrix44 &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Matrix44, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * INode_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_INode, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_IShapeData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IShapeData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IShapeData_GetVertexCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IShapeData_GetVertexCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (short)(arg1)->GetVertexCount();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IShapeData_GetUVSetCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IShapeData_GetUVSetCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (short)(arg1)->GetUVSetCount();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IShapeData_SetVertexCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IShapeData_SetVertexCount",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetVertexCount(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IShapeData_SetUVSetCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IShapeData_SetUVSetCount",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetUVSetCount(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IShapeData_GetVertices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    std::vector<Vector3 > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IShapeData_GetVertices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetVertices();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Vector3,std::allocator<Vector3 > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IShapeData_GetNormals(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    std::vector<Vector3 > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IShapeData_GetNormals",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetNormals();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Vector3,std::allocator<Vector3 > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IShapeData_GetColors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    std::vector<Color > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IShapeData_GetColors",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetColors();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Color,std::allocator<Color > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IShapeData_GetUVSet(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    int arg2 ;
    std::vector<UVCoord > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IShapeData_GetUVSet",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->GetUVSet(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<UVCoord,std::allocator<UVCoord > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IShapeData_SetVertices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    std::vector<Vector3 > *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IShapeData_SetVertices",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<Vector3,std::allocator<Vector3 > > *ptr = (std::vector<Vector3,std::allocator<Vector3 > > *)0;
        res2 = swig::asptr(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Vector3 >", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Vector3 >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        try {
            (arg1)->SetVertices((std::vector<Vector3 > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_IShapeData_SetNormals(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    std::vector<Vector3 > *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IShapeData_SetNormals",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<Vector3,std::allocator<Vector3 > > *ptr = (std::vector<Vector3,std::allocator<Vector3 > > *)0;
        res2 = swig::asptr(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Vector3 >", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Vector3 >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        try {
            (arg1)->SetNormals((std::vector<Vector3 > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_IShapeData_SetColors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    std::vector<Color > *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IShapeData_SetColors",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<Color,std::allocator<Color > > *ptr = (std::vector<Color,std::allocator<Color > > *)0;
        res2 = swig::asptr(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Color >", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Color >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        try {
            (arg1)->SetColors((std::vector<Color > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_IShapeData_SetUVSet(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IShapeData *arg1 = (IShapeData *) 0 ;
    int arg2 ;
    std::vector<UVCoord > *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:IShapeData_SetUVSet",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::vector<UVCoord,std::allocator<UVCoord > > *ptr = (std::vector<UVCoord,std::allocator<UVCoord > > *)0;
        res3 = swig::asptr(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<UVCoord >", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<UVCoord >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        try {
            (arg1)->SetUVSet(arg2,(std::vector<UVCoord > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject * IShapeData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_IShapeData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_ITriShapeData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriShapeData *arg1 = (ITriShapeData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ITriShapeData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriShapeData_GetTriangleCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriShapeData *arg1 = (ITriShapeData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ITriShapeData_GetTriangleCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (short)(arg1)->GetTriangleCount();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriShapeData_SetTriangleCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriShapeData *arg1 = (ITriShapeData *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ITriShapeData_SetTriangleCount",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetTriangleCount(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriShapeData_SetMatchDetectionMode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriShapeData *arg1 = (ITriShapeData *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ITriShapeData_SetMatchDetectionMode",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetMatchDetectionMode(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriShapeData_GetMatchDetectionMode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriShapeData *arg1 = (ITriShapeData *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ITriShapeData_GetMatchDetectionMode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->GetMatchDetectionMode();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriShapeData_GetTriangles(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriShapeData *arg1 = (ITriShapeData *) 0 ;
    std::vector<Triangle > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ITriShapeData_GetTriangles",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetTriangles();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Triangle,std::allocator<Triangle > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriShapeData_SetTriangles(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriShapeData *arg1 = (ITriShapeData *) 0 ;
    std::vector<Triangle > *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ITriShapeData_SetTriangles",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriShapeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<Triangle,std::allocator<Triangle > > *ptr = (std::vector<Triangle,std::allocator<Triangle > > *)0;
        res2 = swig::asptr(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Triangle >", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Triangle >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        try {
            (arg1)->SetTriangles((std::vector<Triangle > const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject * ITriShapeData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ITriShapeData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_ITriStripsData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriStripsData *arg1 = (ITriStripsData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ITriStripsData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriStripsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriStripsData_GetTriangleCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriStripsData *arg1 = (ITriStripsData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ITriStripsData_GetTriangleCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriStripsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (short)(arg1)->GetTriangleCount();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriStripsData_GetStripCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriStripsData *arg1 = (ITriStripsData *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ITriStripsData_GetStripCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriStripsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (short)(arg1)->GetStripCount();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriStripsData_SetStripCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriStripsData *arg1 = (ITriStripsData *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ITriStripsData_SetStripCount",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriStripsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetStripCount(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriStripsData_GetStrip(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriStripsData *arg1 = (ITriStripsData *) 0 ;
    int arg2 ;
    std::vector<short > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ITriStripsData_GetStrip",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriStripsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->GetStrip(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<short,std::allocator<short > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriStripsData_GetTriangles(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriStripsData *arg1 = (ITriStripsData *) 0 ;
    std::vector<Triangle > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ITriStripsData_GetTriangles",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriStripsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetTriangles();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Triangle,std::allocator<Triangle > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITriStripsData_SetStrip(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITriStripsData *arg1 = (ITriStripsData *) 0 ;
    int arg2 ;
    std::vector<short > *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ITriStripsData_SetStrip",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITriStripsData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::vector<short,std::allocator<short > > *ptr = (std::vector<short,std::allocator<short > > *)0;
        res3 = swig::asptr(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<short >", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<short >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        try {
            (arg1)->SetStrip(arg2,(std::vector<short > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject * ITriStripsData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ITriStripsData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_ISkinData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ISkinData *arg1 = (ISkinData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ISkinData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ISkinData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ISkinData_GetBones(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ISkinData *arg1 = (ISkinData *) 0 ;
    std::vector<blk_ref > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ISkinData_GetBones",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ISkinData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetBones();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<blk_ref,std::allocator<blk_ref > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ISkinData_GetWeights(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ISkinData *arg1 = (ISkinData *) 0 ;
    blk_ref arg2 ;
    std::map<int,float > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ISkinData_GetWeights",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ISkinData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        blk_ref * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            result = (arg1)->GetWeights(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ISkinData_AddBone(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ISkinData *arg1 = (ISkinData *) 0 ;
    blk_ref arg2 ;
    std::map<int,float > arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ISkinData_AddBone",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ISkinData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        blk_ref * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > > *ptr = (std::map<int,float,std::less<int >,std::allocator<std::pair<int const,float > > > *)0;
        int res = swig::asptr(obj2, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::map<int,float >", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::map<int,float >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            (arg1)->AddBone(arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ISkinData_RemoveBone(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ISkinData *arg1 = (ISkinData *) 0 ;
    blk_ref arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ISkinData_RemoveBone",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ISkinData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        blk_ref * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            (arg1)->RemoveBone(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ISkinData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ISkinData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_IKeyframeData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IKeyframeData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_GetRotateType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    KeyType result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IKeyframeData_GetRotateType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (KeyType)(arg1)->GetRotateType();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_SetRotateType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    KeyType arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IKeyframeData_SetRotateType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (KeyType)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetRotateType(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_GetRotateKeys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    std::vector<Key<Quaternion > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IKeyframeData_GetRotateKeys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetRotateKeys();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Key<Quaternion >,std::allocator<Key<Quaternion > > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_SetRotateKeys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    std::vector<Key<Quaternion > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IKeyframeData_SetRotateKeys",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<Quaternion > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetRotateKeys(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_GetTranslateType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    KeyType result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IKeyframeData_GetTranslateType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (KeyType)(arg1)->GetTranslateType();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_SetTranslateType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    KeyType arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IKeyframeData_SetTranslateType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (KeyType)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetTranslateType(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_GetTranslateKeys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    std::vector<Key<Vector3 > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IKeyframeData_GetTranslateKeys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetTranslateKeys();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Key<Vector3 >,std::allocator<Key<Vector3 > > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_SetTranslateKeys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    std::vector<Key<Vector3 > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IKeyframeData_SetTranslateKeys",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<Vector3 > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetTranslateKeys(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_GetScaleType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    KeyType result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IKeyframeData_GetScaleType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (KeyType)(arg1)->GetScaleType();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_SetScaleType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    KeyType arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IKeyframeData_SetScaleType",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (KeyType)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetScaleType(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_GetScaleKeys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    std::vector<Key<float > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IKeyframeData_GetScaleKeys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetScaleKeys();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Key<float >,std::allocator<Key<float > > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IKeyframeData_SetScaleKeys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IKeyframeData *arg1 = (IKeyframeData *) 0 ;
    std::vector<Key<float > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IKeyframeData_SetScaleKeys",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IKeyframeData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<float > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetScaleKeys(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IKeyframeData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_IKeyframeData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_ITextKeyExtraData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITextKeyExtraData *arg1 = (ITextKeyExtraData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ITextKeyExtraData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITextKeyExtraData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITextKeyExtraData_GetRotateKeys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITextKeyExtraData *arg1 = (ITextKeyExtraData *) 0 ;
    std::vector<Key<std::string > > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ITextKeyExtraData_GetRotateKeys",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITextKeyExtraData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (arg1)->GetRotateKeys();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Key<std::string >,std::allocator<Key<std::string > > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ITextKeyExtraData_SetRotateKeys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ITextKeyExtraData *arg1 = (ITextKeyExtraData *) 0 ;
    std::vector<Key<std::string > > *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ITextKeyExtraData_SetRotateKeys",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ITextKeyExtraData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::vector<Key<std::string > >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetRotateKeys(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ITextKeyExtraData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ITextKeyExtraData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_IMorphData(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IMorphData *arg1 = (IMorphData *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IMorphData",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IMorphData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IMorphData_GetVertexCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IMorphData *arg1 = (IMorphData *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IMorphData_GetVertexCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IMorphData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)(arg1)->GetVertexCount();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IMorphData_SetVertexCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IMorphData *arg1 = (IMorphData *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IMorphData_SetVertexCount",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IMorphData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetVertexCount(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IMorphData_GetMorphCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IMorphData *arg1 = (IMorphData *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IMorphData_GetMorphCount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IMorphData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)(arg1)->GetMorphCount();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IMorphData_SetMorphCount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IMorphData *arg1 = (IMorphData *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IMorphData_SetMorphCount",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IMorphData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetMorphCount(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IMorphData_GetMorphKeys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IMorphData *arg1 = (IMorphData *) 0 ;
    int arg2 ;
    std::vector<Key<float > > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IMorphData_GetMorphKeys",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IMorphData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->GetMorphKeys(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Key<float >,std::allocator<Key<float > > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IMorphData_SetMorphKeys(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IMorphData *arg1 = (IMorphData *) 0 ;
    int arg2 ;
    std::vector<Key<float > > *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:IMorphData_SetMorphKeys",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IMorphData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::vector<Key<float > >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->SetMorphKeys(arg2,*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IMorphData_GetMorphVerts(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IMorphData *arg1 = (IMorphData *) 0 ;
    int arg2 ;
    std::vector<Vector3 > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IMorphData_GetMorphVerts",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IMorphData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (arg1)->GetMorphVerts(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<Vector3,std::allocator<Vector3 > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IMorphData_SetMorphVerts(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IMorphData *arg1 = (IMorphData *) 0 ;
    int arg2 ;
    std::vector<Vector3 > *arg3 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:IMorphData_SetMorphVerts",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IMorphData, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::vector<Vector3,std::allocator<Vector3 > > *ptr = (std::vector<Vector3,std::allocator<Vector3 > > *)0;
        res3 = swig::asptr(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::vector<Vector3 >", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::vector<Vector3 >");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        try {
            (arg1)->SetMorphVerts(arg2,(std::vector<Vector3 > const &)*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject * IMorphData_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_IMorphData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_attr_ref__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_attr_ref")) goto fail;
    {
        try {
            result = (attr_ref *)new attr_ref();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_attr_ref, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_attr_ref__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IAttr *arg1 = (IAttr *) 0 ;
    attr_ref *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_attr_ref",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IAttr, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (attr_ref *)new attr_ref(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_attr_ref, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_attr_ref(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_attr_ref__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IAttr, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_attr_ref__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_attr_ref'");
    return NULL;
}


static PyObject *_wrap_attr_ref___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    IAttr *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (IAttr *)(arg1)->operator ->();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IAttr, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_is_null(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_is_null",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->is_null();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_ptr(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    IAttr *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_ptr",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (IAttr *)(arg1)->ptr();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IAttr, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    attr_ref *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("attr_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->operator ==(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    attr_ref *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("attr_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->operator !=(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    attr_ref *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("attr_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->operator <(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_GetType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_GetType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->GetType();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_GetName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_GetName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->GetName();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Read(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    ifstream *arg2 = 0 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:attr_ref_Read",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ifstream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ifstream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Read(*arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Write(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    ofstream *arg2 = 0 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:attr_ref_Write",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ofstream, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ofstream");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Write(*arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asInt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asInt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)(*arg1)->asInt();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asFloat(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asFloat",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (float)(*arg1)->asFloat();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asFloat3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    Float3 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asFloat3",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->asFloat3();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        Float3 * resultptr;
        resultptr = new Float3((Float3 &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Float3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->asString();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asMatrix33(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    Matrix33 result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asMatrix33",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->asMatrix33();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        Matrix33 * resultptr;
        resultptr = new Matrix33((Matrix33 &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Matrix33, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asLink(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    blk_ref result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asLink",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->asLink();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        blk_ref * resultptr;
        resultptr = new blk_ref((blk_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_blk_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asTextureSource(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    TextureSource result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asTextureSource",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->asTextureSource();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        TextureSource * resultptr;
        resultptr = new TextureSource((TextureSource &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_TextureSource, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asBoundingBox(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    BoundingBox result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asBoundingBox",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->asBoundingBox();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        BoundingBox * resultptr;
        resultptr = new BoundingBox((BoundingBox &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_BoundingBox, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asConditionalInt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    ConditionalInt result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asConditionalInt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->asConditionalInt();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        ConditionalInt * resultptr;
        resultptr = new ConditionalInt((ConditionalInt &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_ConditionalInt, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asTexture(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    Texture result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asTexture",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->asTexture();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        Texture * resultptr;
        resultptr = new Texture((Texture &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_Texture, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_asLinkList(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    std::list<blk_ref > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_asLinkList",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->asLinkList();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::list<blk_ref,std::allocator<blk_ref > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Set(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Set(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    Float3 *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Float3, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Float3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    std::string *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    Matrix33 *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Matrix33, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Matrix33");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    blk_ref *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    TextureSource *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_TextureSource, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("TextureSource");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    BoundingBox *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("BoundingBox");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    ConditionalInt *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_ConditionalInt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("ConditionalInt");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    Texture *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_Set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("Texture");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (*arg1)->Set(*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_Set(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_attr_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Float3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_attr_ref_Set__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_attr_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_attr_ref_Set__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_attr_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Matrix33, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_attr_ref_Set__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_attr_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_attr_ref_Set__SWIG_5(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_attr_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_TextureSource, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_attr_ref_Set__SWIG_6(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_attr_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_BoundingBox, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_attr_ref_Set__SWIG_7(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_attr_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_ConditionalInt, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_attr_ref_Set__SWIG_8(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_attr_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Texture, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_attr_ref_Set__SWIG_9(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_attr_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_attr_ref_Set__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_attr_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_attr_ref_Set__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'attr_ref_Set'");
    return NULL;
}


static PyObject *_wrap_attr_ref_HasLinks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_HasLinks",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)(*arg1)->HasLinks();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_AddLink(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    blk_ref arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_AddLink",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        blk_ref * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            (*arg1)->AddLink(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_AddLinks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    std::list<blk_ref > arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_AddLinks",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::list<blk_ref,std::allocator<blk_ref > > *ptr = (std::list<blk_ref,std::allocator<blk_ref > > *)0;
        int res = swig::asptr(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::list<blk_ref >", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::list<blk_ref >");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            (*arg1)->AddLinks(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_ClearLinks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attr_ref_ClearLinks",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            (*arg1)->ClearLinks();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_RemoveLinks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    blk_ref arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_RemoveLinks",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        blk_ref * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        try {
            (*arg1)->RemoveLinks(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_attr_ref_FindLink(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    std::string arg2 ;
    blk_ref result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:attr_ref_FindLink",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            result = (*arg1)->FindLink(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        blk_ref * resultptr;
        resultptr = new blk_ref((blk_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_blk_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_attr_ref(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    attr_ref *arg1 = (attr_ref *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_attr_ref",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * attr_ref_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_attr_ref, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_blk_ref__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_blk_ref")) goto fail;
    {
        try {
            result = (blk_ref *)new blk_ref();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_blk_ref, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_blk_ref__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    blk_ref *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_blk_ref",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (blk_ref *)new blk_ref(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_blk_ref, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_blk_ref__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = 0 ;
    blk_ref *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_blk_ref",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        try {
            result = (blk_ref *)new blk_ref((blk_ref const &)*arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_blk_ref, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    blk_ref *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_ref___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->operator ==((blk_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    blk_ref *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_ref___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (bool)((blk_ref const *)arg1)->operator <((blk_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    blk_ref *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_ref___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (bool)(arg1)->operator !=((blk_ref const &)*arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_is_null(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_is_null",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->is_null();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_blk_ref__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    IBlock *arg1 = (IBlock *) 0 ;
    blk_ref *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_blk_ref",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (blk_ref *)new blk_ref(arg1);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_blk_ref, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_blk_ref(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_blk_ref__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_blk_ref__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_IBlock, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_blk_ref__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_blk_ref__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_blk_ref'");
    return NULL;
}


static PyObject *_wrap_delete_blk_ref(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_blk_ref",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_set_block(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    IBlock *arg2 = (IBlock *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_ref_set_block",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_IBlock, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        try {
            (arg1)->set_block(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___deref__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    IBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref___deref__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (IBlock *)((blk_ref const *)arg1)->operator ->();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_get_index(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_get_index",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)((blk_ref const *)arg1)->get_index();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_get_block(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    IBlock *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_get_block",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (IBlock *)((blk_ref const *)arg1)->get_block();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_IBlock, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_set_index(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_ref_set_index",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            (arg1)->set_index(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_is_fixed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_is_fixed",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)((blk_ref const *)arg1)->is_fixed();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    attr_ref result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_ref___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            result = (arg1)->__getitem__(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        attr_ref * resultptr;
        resultptr = new attr_ref((attr_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_attr_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    float arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    Float3 *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_Float3, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Float3");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem____SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    std::string *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem____SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    Matrix33 *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_Matrix33, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Matrix33");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem____SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    blk_ref *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("blk_ref");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem____SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    TextureSource *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_TextureSource, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("TextureSource");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem____SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    BoundingBox *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("BoundingBox");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem____SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    ConditionalInt *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_ConditionalInt, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("ConditionalInt");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem____SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    Texture *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:blk_ref___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("Texture");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        try {
            (arg1)->__setitem__(arg2,*arg3);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref___setitem__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_Float3, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_blk_ref___setitem____SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_std__string, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_blk_ref___setitem____SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_Matrix33, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_blk_ref___setitem____SWIG_4(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_blk_ref___setitem____SWIG_5(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_TextureSource, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_blk_ref___setitem____SWIG_6(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_BoundingBox, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_blk_ref___setitem____SWIG_7(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_ConditionalInt, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_blk_ref___setitem____SWIG_8(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_Texture, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_blk_ref___setitem____SWIG_9(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_blk_ref___setitem____SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_blk_ref, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    return _wrap_blk_ref___setitem____SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'blk_ref___setitem__'");
    return NULL;
}


static PyObject *_wrap_blk_ref_GetBlockNum(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_GetBlockNum",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (int)(*arg1)->GetBlockNum();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_GetParent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    blk_ref result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_GetParent",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->GetParent();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        blk_ref * resultptr;
        resultptr = new blk_ref((blk_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_blk_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_asString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_asString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->asString();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_GetBlockType(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_GetBlockType",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->GetBlockType();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_GetAttr(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    attr_ref result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_ref_GetAttr",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            result = (*arg1)->GetAttr(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        attr_ref * resultptr;
        resultptr = new attr_ref((attr_ref &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_attr_ref, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_GetAttrs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::vector<attr_ref > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_GetAttrs",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->GetAttrs();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::vector<attr_ref,std::allocator<attr_ref > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_GetLinks(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::list<blk_ref > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_GetLinks",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->GetLinks();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = swig::from((std::list<blk_ref,std::allocator<blk_ref > >)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_QueryInterface(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    int arg2 ;
    void *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_ref_QueryInterface",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        try {
            result = (void *)(*arg1)->QueryInterface(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_Namable(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_Namable",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (bool)(*arg1)->Namable();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_SetName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_ref_SetName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    {
        try {
            (*arg1)->SetName(arg2);
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_ref_GetName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_ref *arg1 = (blk_ref *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_ref_GetName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            result = (*arg1)->GetName();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * blk_ref_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_blk_ref, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_blk_link_block_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_link *arg1 = (blk_link *) 0 ;
    blk_ref *arg2 = (blk_ref *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_link_block_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_link, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_blk_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->block = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_link_block_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_link *arg1 = (blk_link *) 0 ;
    blk_ref *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_link_block_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_link, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (blk_ref *)& ((arg1)->block);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_blk_ref, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_link_attr_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_link *arg1 = (blk_link *) 0 ;
    attr_ref *arg2 = (attr_ref *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:blk_link_attr_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_link, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_attr_ref, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->attr = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_blk_link_attr_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_link *arg1 = (blk_link *) 0 ;
    attr_ref *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:blk_link_attr_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_link, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (attr_ref *)& ((arg1)->attr);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_attr_ref, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_blk_link(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_link *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_blk_link")) goto fail;
    {
        try {
            result = (blk_link *)new blk_link();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_blk_link, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_blk_link(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    blk_link *arg1 = (blk_link *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_blk_link",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_blk_link, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * blk_link_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_blk_link, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_BoundingBox_isUsed_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BoundingBox_isUsed_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->isUsed = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundingBox_isUsed_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BoundingBox_isUsed_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->isUsed);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundingBox_unknownInt_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BoundingBox_unknownInt_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->unknownInt = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundingBox_unknownInt_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BoundingBox_unknownInt_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->unknownInt);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundingBox_translation_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    Vector3 *arg2 = (Vector3 *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BoundingBox_translation_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->translation = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundingBox_translation_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    Vector3 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BoundingBox_translation_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Vector3 *)& ((arg1)->translation);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Vector3, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundingBox_rotation_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    Matrix33 *arg2 = (Matrix33 *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BoundingBox_rotation_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Matrix33, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->rotation = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundingBox_rotation_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    Matrix33 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BoundingBox_rotation_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Matrix33 *)& ((arg1)->rotation);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Matrix33, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundingBox_radius_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    Vector3 *arg2 = (Vector3 *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BoundingBox_radius_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Vector3, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->radius = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BoundingBox_radius_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    Vector3 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BoundingBox_radius_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Vector3 *)& ((arg1)->radius);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Vector3, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BoundingBox(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_BoundingBox")) goto fail;
    {
        try {
            result = (BoundingBox *)new BoundingBox();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_BoundingBox, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_BoundingBox(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    BoundingBox *arg1 = (BoundingBox *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_BoundingBox",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_BoundingBox, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BoundingBox_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_BoundingBox, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ConditionalInt_isUsed_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ConditionalInt *arg1 = (ConditionalInt *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ConditionalInt_isUsed_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ConditionalInt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->isUsed = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConditionalInt_isUsed_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ConditionalInt *arg1 = (ConditionalInt *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConditionalInt_isUsed_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ConditionalInt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->isUsed);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConditionalInt_unknownInt_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ConditionalInt *arg1 = (ConditionalInt *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ConditionalInt_unknownInt_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ConditionalInt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->unknownInt = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ConditionalInt_unknownInt_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ConditionalInt *arg1 = (ConditionalInt *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ConditionalInt_unknownInt_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ConditionalInt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->unknownInt);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ConditionalInt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ConditionalInt *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ConditionalInt")) goto fail;
    {
        try {
            result = (ConditionalInt *)new ConditionalInt();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_ConditionalInt, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ConditionalInt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    ConditionalInt *arg1 = (ConditionalInt *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ConditionalInt",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_ConditionalInt, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ConditionalInt_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ConditionalInt, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Texture_isUsed_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_isUsed_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->isUsed = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_isUsed_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_isUsed_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->isUsed);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_clampMode_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    TexClampMode arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_clampMode_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TexClampMode)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->clampMode = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_clampMode_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    TexClampMode result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_clampMode_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TexClampMode) ((arg1)->clampMode);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_filterMode_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    TexFilterMode arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_filterMode_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (TexFilterMode)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->filterMode = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_filterMode_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    TexFilterMode result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_filterMode_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (TexFilterMode) ((arg1)->filterMode);
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_textureSet_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_textureSet_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->textureSet = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_textureSet_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_textureSet_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->textureSet);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_PS2_L_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_PS2_L_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->PS2_L = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_PS2_L_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_PS2_L_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->PS2_L);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_PS2_K_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_PS2_K_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->PS2_K = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_PS2_K_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_PS2_K_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->PS2_K);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_unknownShort_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_unknownShort_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (short)(SWIG_As_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->unknownShort = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_unknownShort_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_unknownShort_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (short) ((arg1)->unknownShort);
    
    {
        resultobj = SWIG_From_short((short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_hasUnknownData_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_hasUnknownData_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->hasUnknownData = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_hasUnknownData_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_hasUnknownData_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->hasUnknownData);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_unknown5Floats_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    float *arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_unknown5Floats_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_float, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        float *inp = (float *)(arg2);
        if (inp) {
            float *dest = (float *)(arg1->unknown5Floats);
            size_t ii = 0;
            for (; ii < 5; ++ii) dest[ii] = inp[ii];
        } else {
            SWIG_null_ref("float");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_unknown5Floats_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    float *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_unknown5Floats_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float *)(float *) ((arg1)->unknown5Floats);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_float, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_unknownInt_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_unknownInt_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->unknownInt = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_unknownInt_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_unknownInt_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->unknownInt);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_unknownFloat1_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_unknownFloat1_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->unknownFloat1 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_unknownFloat1_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_unknownFloat1_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->unknownFloat1);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_unknownFloat2_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_unknownFloat2_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->unknownFloat2 = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_unknownFloat2_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_unknownFloat2_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->unknownFloat2);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_bmLumaOffset_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_bmLumaOffset_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->bmLumaOffset = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_bmLumaOffset_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_bmLumaOffset_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->bmLumaOffset);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_bmLumaScale_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_bmLumaScale_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->bmLumaScale = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_bmLumaScale_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_bmLumaScale_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->bmLumaScale);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_bmMatrix_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    Matrix22 *arg2 = (Matrix22 *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Texture_bmMatrix_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_Matrix22, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->bmMatrix = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Texture_bmMatrix_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    Matrix22 *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Texture_bmMatrix_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (Matrix22 *)& ((arg1)->bmMatrix);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Matrix22, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Texture(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Texture")) goto fail;
    {
        try {
            result = (Texture *)new Texture();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_Texture, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Texture(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    Texture *arg1 = (Texture *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Texture",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_Texture, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Texture_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Texture, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_TextureSource_useExternal_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    TextureSource *arg1 = (TextureSource *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TextureSource_useExternal_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TextureSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->useExternal = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextureSource_useExternal_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    TextureSource *arg1 = (TextureSource *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TextureSource_useExternal_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TextureSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->useExternal);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextureSource_unknownByte_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    TextureSource *arg1 = (TextureSource *) 0 ;
    unsigned char arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TextureSource_unknownByte_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TextureSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned char)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->unknownByte = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextureSource_unknownByte_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    TextureSource *arg1 = (TextureSource *) 0 ;
    unsigned char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TextureSource_unknownByte_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TextureSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned char) ((arg1)->unknownByte);
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextureSource_fileName_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    TextureSource *arg1 = (TextureSource *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TextureSource_fileName_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TextureSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->fileName = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TextureSource_fileName_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    TextureSource *arg1 = (TextureSource *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TextureSource_fileName_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TextureSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->fileName);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TextureSource(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    TextureSource *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_TextureSource")) goto fail;
    {
        try {
            result = (TextureSource *)new TextureSource();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_TextureSource, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TextureSource(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    TextureSource *arg1 = (TextureSource *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TextureSource",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_TextureSource, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TextureSource_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TextureSource, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_SkinWeight_vertexNum_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    SkinWeight *arg1 = (SkinWeight *) 0 ;
    unsigned short arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SkinWeight_vertexNum_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SkinWeight, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned short)(SWIG_As_unsigned_SS_short(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->vertexNum = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SkinWeight_vertexNum_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    SkinWeight *arg1 = (SkinWeight *) 0 ;
    unsigned short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SkinWeight_vertexNum_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SkinWeight, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned short) ((arg1)->vertexNum);
    
    {
        resultobj = SWIG_From_unsigned_SS_short((unsigned short)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SkinWeight_vertexWeight_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    SkinWeight *arg1 = (SkinWeight *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SkinWeight_vertexWeight_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SkinWeight, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->vertexWeight = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SkinWeight_vertexWeight_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    SkinWeight *arg1 = (SkinWeight *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SkinWeight_vertexWeight_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SkinWeight, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->vertexWeight);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SkinWeight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    SkinWeight *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SkinWeight")) goto fail;
    {
        try {
            result = (SkinWeight *)new SkinWeight();
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_SkinWeight, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SkinWeight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    SkinWeight *arg1 = (SkinWeight *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SkinWeight",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_SkinWeight, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        try {
            delete arg1;
            
        }
        /*@C:\\Documents and Settings\\Shon\\My Documents\\C++\\SWIG\\swigwin-1.3.25\\Lib\\exception.i,313,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
        catch (std::invalid_argument& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::domain_error& e) {
            SWIG_exception(SWIG_ValueError, e.what() );
        } catch (std::overflow_error& e) {
            SWIG_exception(SWIG_OverflowError, e.what() );
        } catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::length_error& e) {
            SWIG_exception(SWIG_IndexError, e.what() );
        } catch (std::runtime_error& e) {
            SWIG_exception(SWIG_RuntimeError, e.what() );
        } catch (std::exception& e) {
            SWIG_exception(SWIG_SystemError, e.what() );
        }
        /*@@*/ // catch std::exception 
        catch (...) {
            SWIG_exception(SWIG_UnknownError, "Unknown exception");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SkinWeight_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SkinWeight, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"vector_float_empty", _wrap_vector_float_empty, METH_VARARGS, NULL},
	 { (char *)"vector_float_size", _wrap_vector_float_size, METH_VARARGS, NULL},
	 { (char *)"vector_float_clear", _wrap_vector_float_clear, METH_VARARGS, NULL},
	 { (char *)"vector_float_swap", _wrap_vector_float_swap, METH_VARARGS, NULL},
	 { (char *)"vector_float_get_allocator", _wrap_vector_float_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_float_pop_back", _wrap_vector_float_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_float", _wrap_new_vector_float, METH_VARARGS, NULL},
	 { (char *)"vector_float_push_back", _wrap_vector_float_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_float_front", _wrap_vector_float_front, METH_VARARGS, NULL},
	 { (char *)"vector_float_back", _wrap_vector_float_back, METH_VARARGS, NULL},
	 { (char *)"vector_float_assign", _wrap_vector_float_assign, METH_VARARGS, NULL},
	 { (char *)"vector_float_resize", _wrap_vector_float_resize, METH_VARARGS, NULL},
	 { (char *)"vector_float_reserve", _wrap_vector_float_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_float_capacity", _wrap_vector_float_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_float___nonzero__", _wrap_vector_float___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_float___len__", _wrap_vector_float___len__, METH_VARARGS, NULL},
	 { (char *)"vector_float_pop", _wrap_vector_float_pop, METH_VARARGS, NULL},
	 { (char *)"vector_float___getslice__", _wrap_vector_float___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_float___setslice__", _wrap_vector_float___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_float___delslice__", _wrap_vector_float___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_float___delitem__", _wrap_vector_float___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_float___getitem__", _wrap_vector_float___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_float___setitem__", _wrap_vector_float___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_float_append", _wrap_vector_float_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_float", _wrap_delete_vector_float, METH_VARARGS, NULL},
	 { (char *)"vector_float_swigregister", vector_float_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_short_empty", _wrap_vector_short_empty, METH_VARARGS, NULL},
	 { (char *)"vector_short_size", _wrap_vector_short_size, METH_VARARGS, NULL},
	 { (char *)"vector_short_clear", _wrap_vector_short_clear, METH_VARARGS, NULL},
	 { (char *)"vector_short_swap", _wrap_vector_short_swap, METH_VARARGS, NULL},
	 { (char *)"vector_short_get_allocator", _wrap_vector_short_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_short_pop_back", _wrap_vector_short_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_short", _wrap_new_vector_short, METH_VARARGS, NULL},
	 { (char *)"vector_short_push_back", _wrap_vector_short_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_short_front", _wrap_vector_short_front, METH_VARARGS, NULL},
	 { (char *)"vector_short_back", _wrap_vector_short_back, METH_VARARGS, NULL},
	 { (char *)"vector_short_assign", _wrap_vector_short_assign, METH_VARARGS, NULL},
	 { (char *)"vector_short_resize", _wrap_vector_short_resize, METH_VARARGS, NULL},
	 { (char *)"vector_short_reserve", _wrap_vector_short_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_short_capacity", _wrap_vector_short_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_short___nonzero__", _wrap_vector_short___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_short___len__", _wrap_vector_short___len__, METH_VARARGS, NULL},
	 { (char *)"vector_short_pop", _wrap_vector_short_pop, METH_VARARGS, NULL},
	 { (char *)"vector_short___getslice__", _wrap_vector_short___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_short___setslice__", _wrap_vector_short___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_short___delslice__", _wrap_vector_short___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_short___delitem__", _wrap_vector_short___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_short___getitem__", _wrap_vector_short___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_short___setitem__", _wrap_vector_short___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_short_append", _wrap_vector_short_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_short", _wrap_delete_vector_short, METH_VARARGS, NULL},
	 { (char *)"vector_short_swigregister", vector_short_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_empty", _wrap_vector_attr_ref_empty, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_size", _wrap_vector_attr_ref_size, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_clear", _wrap_vector_attr_ref_clear, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_swap", _wrap_vector_attr_ref_swap, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_get_allocator", _wrap_vector_attr_ref_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_pop_back", _wrap_vector_attr_ref_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_attr_ref", _wrap_new_vector_attr_ref, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_push_back", _wrap_vector_attr_ref_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_front", _wrap_vector_attr_ref_front, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_back", _wrap_vector_attr_ref_back, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_assign", _wrap_vector_attr_ref_assign, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_resize", _wrap_vector_attr_ref_resize, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_reserve", _wrap_vector_attr_ref_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_capacity", _wrap_vector_attr_ref_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref___nonzero__", _wrap_vector_attr_ref___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref___len__", _wrap_vector_attr_ref___len__, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_pop", _wrap_vector_attr_ref_pop, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref___getslice__", _wrap_vector_attr_ref___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref___setslice__", _wrap_vector_attr_ref___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref___delslice__", _wrap_vector_attr_ref___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref___delitem__", _wrap_vector_attr_ref___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref___getitem__", _wrap_vector_attr_ref___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref___setitem__", _wrap_vector_attr_ref___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_append", _wrap_vector_attr_ref_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_attr_ref", _wrap_delete_vector_attr_ref, METH_VARARGS, NULL},
	 { (char *)"vector_attr_ref_swigregister", vector_attr_ref_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_empty", _wrap_vector_blk_ref_empty, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_size", _wrap_vector_blk_ref_size, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_clear", _wrap_vector_blk_ref_clear, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_swap", _wrap_vector_blk_ref_swap, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_get_allocator", _wrap_vector_blk_ref_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_pop_back", _wrap_vector_blk_ref_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_blk_ref", _wrap_new_vector_blk_ref, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_push_back", _wrap_vector_blk_ref_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_front", _wrap_vector_blk_ref_front, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_back", _wrap_vector_blk_ref_back, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_assign", _wrap_vector_blk_ref_assign, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_resize", _wrap_vector_blk_ref_resize, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_reserve", _wrap_vector_blk_ref_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_capacity", _wrap_vector_blk_ref_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref___nonzero__", _wrap_vector_blk_ref___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref___len__", _wrap_vector_blk_ref___len__, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_pop", _wrap_vector_blk_ref_pop, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref___getslice__", _wrap_vector_blk_ref___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref___setslice__", _wrap_vector_blk_ref___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref___delslice__", _wrap_vector_blk_ref___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref___delitem__", _wrap_vector_blk_ref___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref___getitem__", _wrap_vector_blk_ref___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref___setitem__", _wrap_vector_blk_ref___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_append", _wrap_vector_blk_ref_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_blk_ref", _wrap_delete_vector_blk_ref, METH_VARARGS, NULL},
	 { (char *)"vector_blk_ref_swigregister", vector_blk_ref_swigregister, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_empty", _wrap_list_blk_ref_empty, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_size", _wrap_list_blk_ref_size, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_clear", _wrap_list_blk_ref_clear, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_swap", _wrap_list_blk_ref_swap, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_get_allocator", _wrap_list_blk_ref_get_allocator, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_pop_back", _wrap_list_blk_ref_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_list_blk_ref", _wrap_new_list_blk_ref, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_push_back", _wrap_list_blk_ref_push_back, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_front", _wrap_list_blk_ref_front, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_back", _wrap_list_blk_ref_back, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_assign", _wrap_list_blk_ref_assign, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_resize", _wrap_list_blk_ref_resize, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_pop_front", _wrap_list_blk_ref_pop_front, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_push_front", _wrap_list_blk_ref_push_front, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_reverse", _wrap_list_blk_ref_reverse, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref___nonzero__", _wrap_list_blk_ref___nonzero__, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref___len__", _wrap_list_blk_ref___len__, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_pop", _wrap_list_blk_ref_pop, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref___getslice__", _wrap_list_blk_ref___getslice__, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref___setslice__", _wrap_list_blk_ref___setslice__, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref___delslice__", _wrap_list_blk_ref___delslice__, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref___delitem__", _wrap_list_blk_ref___delitem__, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref___getitem__", _wrap_list_blk_ref___getitem__, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref___setitem__", _wrap_list_blk_ref___setitem__, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_append", _wrap_list_blk_ref_append, METH_VARARGS, NULL},
	 { (char *)"delete_list_blk_ref", _wrap_delete_list_blk_ref, METH_VARARGS, NULL},
	 { (char *)"list_blk_ref_swigregister", list_blk_ref_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_empty", _wrap_vector_Vector3_empty, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_size", _wrap_vector_Vector3_size, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_clear", _wrap_vector_Vector3_clear, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_swap", _wrap_vector_Vector3_swap, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_get_allocator", _wrap_vector_Vector3_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_pop_back", _wrap_vector_Vector3_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_Vector3", _wrap_new_vector_Vector3, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_push_back", _wrap_vector_Vector3_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_front", _wrap_vector_Vector3_front, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_back", _wrap_vector_Vector3_back, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_assign", _wrap_vector_Vector3_assign, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_resize", _wrap_vector_Vector3_resize, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_reserve", _wrap_vector_Vector3_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_capacity", _wrap_vector_Vector3_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3___nonzero__", _wrap_vector_Vector3___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3___len__", _wrap_vector_Vector3___len__, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_pop", _wrap_vector_Vector3_pop, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3___getslice__", _wrap_vector_Vector3___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3___setslice__", _wrap_vector_Vector3___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3___delslice__", _wrap_vector_Vector3___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3___delitem__", _wrap_vector_Vector3___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3___getitem__", _wrap_vector_Vector3___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3___setitem__", _wrap_vector_Vector3___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_append", _wrap_vector_Vector3_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_Vector3", _wrap_delete_vector_Vector3, METH_VARARGS, NULL},
	 { (char *)"vector_Vector3_swigregister", vector_Vector3_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_Color_empty", _wrap_vector_Color_empty, METH_VARARGS, NULL},
	 { (char *)"vector_Color_size", _wrap_vector_Color_size, METH_VARARGS, NULL},
	 { (char *)"vector_Color_clear", _wrap_vector_Color_clear, METH_VARARGS, NULL},
	 { (char *)"vector_Color_swap", _wrap_vector_Color_swap, METH_VARARGS, NULL},
	 { (char *)"vector_Color_get_allocator", _wrap_vector_Color_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_Color_pop_back", _wrap_vector_Color_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_Color", _wrap_new_vector_Color, METH_VARARGS, NULL},
	 { (char *)"vector_Color_push_back", _wrap_vector_Color_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_Color_front", _wrap_vector_Color_front, METH_VARARGS, NULL},
	 { (char *)"vector_Color_back", _wrap_vector_Color_back, METH_VARARGS, NULL},
	 { (char *)"vector_Color_assign", _wrap_vector_Color_assign, METH_VARARGS, NULL},
	 { (char *)"vector_Color_resize", _wrap_vector_Color_resize, METH_VARARGS, NULL},
	 { (char *)"vector_Color_reserve", _wrap_vector_Color_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_Color_capacity", _wrap_vector_Color_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_Color___nonzero__", _wrap_vector_Color___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_Color___len__", _wrap_vector_Color___len__, METH_VARARGS, NULL},
	 { (char *)"vector_Color_pop", _wrap_vector_Color_pop, METH_VARARGS, NULL},
	 { (char *)"vector_Color___getslice__", _wrap_vector_Color___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Color___setslice__", _wrap_vector_Color___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Color___delslice__", _wrap_vector_Color___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Color___delitem__", _wrap_vector_Color___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Color___getitem__", _wrap_vector_Color___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Color___setitem__", _wrap_vector_Color___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Color_append", _wrap_vector_Color_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_Color", _wrap_delete_vector_Color, METH_VARARGS, NULL},
	 { (char *)"vector_Color_swigregister", vector_Color_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_empty", _wrap_vector_UVCoord_empty, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_size", _wrap_vector_UVCoord_size, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_clear", _wrap_vector_UVCoord_clear, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_swap", _wrap_vector_UVCoord_swap, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_get_allocator", _wrap_vector_UVCoord_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_pop_back", _wrap_vector_UVCoord_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_UVCoord", _wrap_new_vector_UVCoord, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_push_back", _wrap_vector_UVCoord_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_front", _wrap_vector_UVCoord_front, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_back", _wrap_vector_UVCoord_back, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_assign", _wrap_vector_UVCoord_assign, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_resize", _wrap_vector_UVCoord_resize, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_reserve", _wrap_vector_UVCoord_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_capacity", _wrap_vector_UVCoord_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord___nonzero__", _wrap_vector_UVCoord___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord___len__", _wrap_vector_UVCoord___len__, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_pop", _wrap_vector_UVCoord_pop, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord___getslice__", _wrap_vector_UVCoord___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord___setslice__", _wrap_vector_UVCoord___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord___delslice__", _wrap_vector_UVCoord___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord___delitem__", _wrap_vector_UVCoord___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord___getitem__", _wrap_vector_UVCoord___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord___setitem__", _wrap_vector_UVCoord___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_append", _wrap_vector_UVCoord_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_UVCoord", _wrap_delete_vector_UVCoord, METH_VARARGS, NULL},
	 { (char *)"vector_UVCoord_swigregister", vector_UVCoord_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_empty", _wrap_vector_Triangle_empty, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_size", _wrap_vector_Triangle_size, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_clear", _wrap_vector_Triangle_clear, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_swap", _wrap_vector_Triangle_swap, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_get_allocator", _wrap_vector_Triangle_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_pop_back", _wrap_vector_Triangle_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_Triangle", _wrap_new_vector_Triangle, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_push_back", _wrap_vector_Triangle_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_front", _wrap_vector_Triangle_front, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_back", _wrap_vector_Triangle_back, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_assign", _wrap_vector_Triangle_assign, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_resize", _wrap_vector_Triangle_resize, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_reserve", _wrap_vector_Triangle_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_capacity", _wrap_vector_Triangle_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle___nonzero__", _wrap_vector_Triangle___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle___len__", _wrap_vector_Triangle___len__, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_pop", _wrap_vector_Triangle_pop, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle___getslice__", _wrap_vector_Triangle___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle___setslice__", _wrap_vector_Triangle___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle___delslice__", _wrap_vector_Triangle___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle___delitem__", _wrap_vector_Triangle___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle___getitem__", _wrap_vector_Triangle___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle___setitem__", _wrap_vector_Triangle___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_append", _wrap_vector_Triangle_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_Triangle", _wrap_delete_vector_Triangle, METH_VARARGS, NULL},
	 { (char *)"vector_Triangle_swigregister", vector_Triangle_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_empty", _wrap_vector_SkinWeight_empty, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_size", _wrap_vector_SkinWeight_size, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_clear", _wrap_vector_SkinWeight_clear, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_swap", _wrap_vector_SkinWeight_swap, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_get_allocator", _wrap_vector_SkinWeight_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_pop_back", _wrap_vector_SkinWeight_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_SkinWeight", _wrap_new_vector_SkinWeight, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_push_back", _wrap_vector_SkinWeight_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_front", _wrap_vector_SkinWeight_front, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_back", _wrap_vector_SkinWeight_back, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_assign", _wrap_vector_SkinWeight_assign, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_resize", _wrap_vector_SkinWeight_resize, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_reserve", _wrap_vector_SkinWeight_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_capacity", _wrap_vector_SkinWeight_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight___nonzero__", _wrap_vector_SkinWeight___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight___len__", _wrap_vector_SkinWeight___len__, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_pop", _wrap_vector_SkinWeight_pop, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight___getslice__", _wrap_vector_SkinWeight___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight___setslice__", _wrap_vector_SkinWeight___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight___delslice__", _wrap_vector_SkinWeight___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight___delitem__", _wrap_vector_SkinWeight___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight___getitem__", _wrap_vector_SkinWeight___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight___setitem__", _wrap_vector_SkinWeight___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_append", _wrap_vector_SkinWeight_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_SkinWeight", _wrap_delete_vector_SkinWeight, METH_VARARGS, NULL},
	 { (char *)"vector_SkinWeight_swigregister", vector_SkinWeight_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pair_int_float", _wrap_new_pair_int_float, METH_VARARGS, NULL},
	 { (char *)"pair_int_float_first_set", _wrap_pair_int_float_first_set, METH_VARARGS, NULL},
	 { (char *)"pair_int_float_first_get", _wrap_pair_int_float_first_get, METH_VARARGS, NULL},
	 { (char *)"pair_int_float_second_set", _wrap_pair_int_float_second_set, METH_VARARGS, NULL},
	 { (char *)"pair_int_float_second_get", _wrap_pair_int_float_second_get, METH_VARARGS, NULL},
	 { (char *)"delete_pair_int_float", _wrap_delete_pair_int_float, METH_VARARGS, NULL},
	 { (char *)"pair_int_float_swigregister", pair_int_float_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_map_int_float", _wrap_new_map_int_float, METH_VARARGS, NULL},
	 { (char *)"map_int_float_empty", _wrap_map_int_float_empty, METH_VARARGS, NULL},
	 { (char *)"map_int_float_size", _wrap_map_int_float_size, METH_VARARGS, NULL},
	 { (char *)"map_int_float_clear", _wrap_map_int_float_clear, METH_VARARGS, NULL},
	 { (char *)"map_int_float_swap", _wrap_map_int_float_swap, METH_VARARGS, NULL},
	 { (char *)"map_int_float_get_allocator", _wrap_map_int_float_get_allocator, METH_VARARGS, NULL},
	 { (char *)"map_int_float_erase", _wrap_map_int_float_erase, METH_VARARGS, NULL},
	 { (char *)"map_int_float_count", _wrap_map_int_float_count, METH_VARARGS, NULL},
	 { (char *)"map_int_float___nonzero__", _wrap_map_int_float___nonzero__, METH_VARARGS, NULL},
	 { (char *)"map_int_float___len__", _wrap_map_int_float___len__, METH_VARARGS, NULL},
	 { (char *)"map_int_float___getitem__", _wrap_map_int_float___getitem__, METH_VARARGS, NULL},
	 { (char *)"map_int_float___setitem__", _wrap_map_int_float___setitem__, METH_VARARGS, NULL},
	 { (char *)"map_int_float___delitem__", _wrap_map_int_float___delitem__, METH_VARARGS, NULL},
	 { (char *)"map_int_float_has_key", _wrap_map_int_float_has_key, METH_VARARGS, NULL},
	 { (char *)"map_int_float_keys", _wrap_map_int_float_keys, METH_VARARGS, NULL},
	 { (char *)"map_int_float_values", _wrap_map_int_float_values, METH_VARARGS, NULL},
	 { (char *)"map_int_float_items", _wrap_map_int_float_items, METH_VARARGS, NULL},
	 { (char *)"map_int_float___contains__", _wrap_map_int_float___contains__, METH_VARARGS, NULL},
	 { (char *)"map_int_float___iter__", _wrap_map_int_float___iter__, METH_VARARGS, NULL},
	 { (char *)"delete_map_int_float", _wrap_delete_map_int_float, METH_VARARGS, NULL},
	 { (char *)"map_int_float_swigregister", map_int_float_swigregister, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_time_set", _wrap_Key_Quaternion_time_set, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_time_get", _wrap_Key_Quaternion_time_get, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_data_set", _wrap_Key_Quaternion_data_set, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_data_get", _wrap_Key_Quaternion_data_get, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_forward_tangent_set", _wrap_Key_Quaternion_forward_tangent_set, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_forward_tangent_get", _wrap_Key_Quaternion_forward_tangent_get, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_backward_tangent_set", _wrap_Key_Quaternion_backward_tangent_set, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_backward_tangent_get", _wrap_Key_Quaternion_backward_tangent_get, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_tension_set", _wrap_Key_Quaternion_tension_set, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_tension_get", _wrap_Key_Quaternion_tension_get, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_bias_set", _wrap_Key_Quaternion_bias_set, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_bias_get", _wrap_Key_Quaternion_bias_get, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_continuity_set", _wrap_Key_Quaternion_continuity_set, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_continuity_get", _wrap_Key_Quaternion_continuity_get, METH_VARARGS, NULL},
	 { (char *)"new_Key_Quaternion", _wrap_new_Key_Quaternion, METH_VARARGS, NULL},
	 { (char *)"delete_Key_Quaternion", _wrap_delete_Key_Quaternion, METH_VARARGS, NULL},
	 { (char *)"Key_Quaternion_swigregister", Key_Quaternion_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_empty", _wrap_vector_Key_Quaternion_empty, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_size", _wrap_vector_Key_Quaternion_size, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_clear", _wrap_vector_Key_Quaternion_clear, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_swap", _wrap_vector_Key_Quaternion_swap, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_get_allocator", _wrap_vector_Key_Quaternion_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_pop_back", _wrap_vector_Key_Quaternion_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_Key_Quaternion", _wrap_new_vector_Key_Quaternion, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_push_back", _wrap_vector_Key_Quaternion_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_front", _wrap_vector_Key_Quaternion_front, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_back", _wrap_vector_Key_Quaternion_back, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_assign", _wrap_vector_Key_Quaternion_assign, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_resize", _wrap_vector_Key_Quaternion_resize, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_reserve", _wrap_vector_Key_Quaternion_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_capacity", _wrap_vector_Key_Quaternion_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion___nonzero__", _wrap_vector_Key_Quaternion___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion___len__", _wrap_vector_Key_Quaternion___len__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_pop", _wrap_vector_Key_Quaternion_pop, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion___getslice__", _wrap_vector_Key_Quaternion___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion___setslice__", _wrap_vector_Key_Quaternion___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion___delslice__", _wrap_vector_Key_Quaternion___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion___delitem__", _wrap_vector_Key_Quaternion___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion___getitem__", _wrap_vector_Key_Quaternion___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion___setitem__", _wrap_vector_Key_Quaternion___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_append", _wrap_vector_Key_Quaternion_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_Key_Quaternion", _wrap_delete_vector_Key_Quaternion, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Quaternion_swigregister", vector_Key_Quaternion_swigregister, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_time_set", _wrap_Key_Vector3_time_set, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_time_get", _wrap_Key_Vector3_time_get, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_data_set", _wrap_Key_Vector3_data_set, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_data_get", _wrap_Key_Vector3_data_get, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_forward_tangent_set", _wrap_Key_Vector3_forward_tangent_set, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_forward_tangent_get", _wrap_Key_Vector3_forward_tangent_get, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_backward_tangent_set", _wrap_Key_Vector3_backward_tangent_set, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_backward_tangent_get", _wrap_Key_Vector3_backward_tangent_get, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_tension_set", _wrap_Key_Vector3_tension_set, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_tension_get", _wrap_Key_Vector3_tension_get, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_bias_set", _wrap_Key_Vector3_bias_set, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_bias_get", _wrap_Key_Vector3_bias_get, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_continuity_set", _wrap_Key_Vector3_continuity_set, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_continuity_get", _wrap_Key_Vector3_continuity_get, METH_VARARGS, NULL},
	 { (char *)"new_Key_Vector3", _wrap_new_Key_Vector3, METH_VARARGS, NULL},
	 { (char *)"delete_Key_Vector3", _wrap_delete_Key_Vector3, METH_VARARGS, NULL},
	 { (char *)"Key_Vector3_swigregister", Key_Vector3_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_empty", _wrap_vector_Key_Vector3D_empty, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_size", _wrap_vector_Key_Vector3D_size, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_clear", _wrap_vector_Key_Vector3D_clear, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_swap", _wrap_vector_Key_Vector3D_swap, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_get_allocator", _wrap_vector_Key_Vector3D_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_pop_back", _wrap_vector_Key_Vector3D_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_Key_Vector3D", _wrap_new_vector_Key_Vector3D, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_push_back", _wrap_vector_Key_Vector3D_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_front", _wrap_vector_Key_Vector3D_front, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_back", _wrap_vector_Key_Vector3D_back, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_assign", _wrap_vector_Key_Vector3D_assign, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_resize", _wrap_vector_Key_Vector3D_resize, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_reserve", _wrap_vector_Key_Vector3D_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_capacity", _wrap_vector_Key_Vector3D_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D___nonzero__", _wrap_vector_Key_Vector3D___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D___len__", _wrap_vector_Key_Vector3D___len__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_pop", _wrap_vector_Key_Vector3D_pop, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D___getslice__", _wrap_vector_Key_Vector3D___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D___setslice__", _wrap_vector_Key_Vector3D___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D___delslice__", _wrap_vector_Key_Vector3D___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D___delitem__", _wrap_vector_Key_Vector3D___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D___getitem__", _wrap_vector_Key_Vector3D___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D___setitem__", _wrap_vector_Key_Vector3D___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_append", _wrap_vector_Key_Vector3D_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_Key_Vector3D", _wrap_delete_vector_Key_Vector3D, METH_VARARGS, NULL},
	 { (char *)"vector_Key_Vector3D_swigregister", vector_Key_Vector3D_swigregister, METH_VARARGS, NULL},
	 { (char *)"Key_float_time_set", _wrap_Key_float_time_set, METH_VARARGS, NULL},
	 { (char *)"Key_float_time_get", _wrap_Key_float_time_get, METH_VARARGS, NULL},
	 { (char *)"Key_float_data_set", _wrap_Key_float_data_set, METH_VARARGS, NULL},
	 { (char *)"Key_float_data_get", _wrap_Key_float_data_get, METH_VARARGS, NULL},
	 { (char *)"Key_float_forward_tangent_set", _wrap_Key_float_forward_tangent_set, METH_VARARGS, NULL},
	 { (char *)"Key_float_forward_tangent_get", _wrap_Key_float_forward_tangent_get, METH_VARARGS, NULL},
	 { (char *)"Key_float_backward_tangent_set", _wrap_Key_float_backward_tangent_set, METH_VARARGS, NULL},
	 { (char *)"Key_float_backward_tangent_get", _wrap_Key_float_backward_tangent_get, METH_VARARGS, NULL},
	 { (char *)"Key_float_tension_set", _wrap_Key_float_tension_set, METH_VARARGS, NULL},
	 { (char *)"Key_float_tension_get", _wrap_Key_float_tension_get, METH_VARARGS, NULL},
	 { (char *)"Key_float_bias_set", _wrap_Key_float_bias_set, METH_VARARGS, NULL},
	 { (char *)"Key_float_bias_get", _wrap_Key_float_bias_get, METH_VARARGS, NULL},
	 { (char *)"Key_float_continuity_set", _wrap_Key_float_continuity_set, METH_VARARGS, NULL},
	 { (char *)"Key_float_continuity_get", _wrap_Key_float_continuity_get, METH_VARARGS, NULL},
	 { (char *)"new_Key_float", _wrap_new_Key_float, METH_VARARGS, NULL},
	 { (char *)"delete_Key_float", _wrap_delete_Key_float, METH_VARARGS, NULL},
	 { (char *)"Key_float_swigregister", Key_float_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_empty", _wrap_vector_Key_float_empty, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_size", _wrap_vector_Key_float_size, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_clear", _wrap_vector_Key_float_clear, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_swap", _wrap_vector_Key_float_swap, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_get_allocator", _wrap_vector_Key_float_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_pop_back", _wrap_vector_Key_float_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_Key_float", _wrap_new_vector_Key_float, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_push_back", _wrap_vector_Key_float_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_front", _wrap_vector_Key_float_front, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_back", _wrap_vector_Key_float_back, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_assign", _wrap_vector_Key_float_assign, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_resize", _wrap_vector_Key_float_resize, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_reserve", _wrap_vector_Key_float_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_capacity", _wrap_vector_Key_float_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float___nonzero__", _wrap_vector_Key_float___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float___len__", _wrap_vector_Key_float___len__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_pop", _wrap_vector_Key_float_pop, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float___getslice__", _wrap_vector_Key_float___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float___setslice__", _wrap_vector_Key_float___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float___delslice__", _wrap_vector_Key_float___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float___delitem__", _wrap_vector_Key_float___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float___getitem__", _wrap_vector_Key_float___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float___setitem__", _wrap_vector_Key_float___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_append", _wrap_vector_Key_float_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_Key_float", _wrap_delete_vector_Key_float, METH_VARARGS, NULL},
	 { (char *)"vector_Key_float_swigregister", vector_Key_float_swigregister, METH_VARARGS, NULL},
	 { (char *)"Key_string_time_set", _wrap_Key_string_time_set, METH_VARARGS, NULL},
	 { (char *)"Key_string_time_get", _wrap_Key_string_time_get, METH_VARARGS, NULL},
	 { (char *)"Key_string_data_set", _wrap_Key_string_data_set, METH_VARARGS, NULL},
	 { (char *)"Key_string_data_get", _wrap_Key_string_data_get, METH_VARARGS, NULL},
	 { (char *)"Key_string_forward_tangent_set", _wrap_Key_string_forward_tangent_set, METH_VARARGS, NULL},
	 { (char *)"Key_string_forward_tangent_get", _wrap_Key_string_forward_tangent_get, METH_VARARGS, NULL},
	 { (char *)"Key_string_backward_tangent_set", _wrap_Key_string_backward_tangent_set, METH_VARARGS, NULL},
	 { (char *)"Key_string_backward_tangent_get", _wrap_Key_string_backward_tangent_get, METH_VARARGS, NULL},
	 { (char *)"Key_string_tension_set", _wrap_Key_string_tension_set, METH_VARARGS, NULL},
	 { (char *)"Key_string_tension_get", _wrap_Key_string_tension_get, METH_VARARGS, NULL},
	 { (char *)"Key_string_bias_set", _wrap_Key_string_bias_set, METH_VARARGS, NULL},
	 { (char *)"Key_string_bias_get", _wrap_Key_string_bias_get, METH_VARARGS, NULL},
	 { (char *)"Key_string_continuity_set", _wrap_Key_string_continuity_set, METH_VARARGS, NULL},
	 { (char *)"Key_string_continuity_get", _wrap_Key_string_continuity_get, METH_VARARGS, NULL},
	 { (char *)"new_Key_string", _wrap_new_Key_string, METH_VARARGS, NULL},
	 { (char *)"delete_Key_string", _wrap_delete_Key_string, METH_VARARGS, NULL},
	 { (char *)"Key_string_swigregister", Key_string_swigregister, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_empty", _wrap_vector_Key_string_empty, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_size", _wrap_vector_Key_string_size, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_clear", _wrap_vector_Key_string_clear, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_swap", _wrap_vector_Key_string_swap, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_get_allocator", _wrap_vector_Key_string_get_allocator, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_pop_back", _wrap_vector_Key_string_pop_back, METH_VARARGS, NULL},
	 { (char *)"new_vector_Key_string", _wrap_new_vector_Key_string, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_push_back", _wrap_vector_Key_string_push_back, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_front", _wrap_vector_Key_string_front, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_back", _wrap_vector_Key_string_back, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_assign", _wrap_vector_Key_string_assign, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_resize", _wrap_vector_Key_string_resize, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_reserve", _wrap_vector_Key_string_reserve, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_capacity", _wrap_vector_Key_string_capacity, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string___nonzero__", _wrap_vector_Key_string___nonzero__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string___len__", _wrap_vector_Key_string___len__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_pop", _wrap_vector_Key_string_pop, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string___getslice__", _wrap_vector_Key_string___getslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string___setslice__", _wrap_vector_Key_string___setslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string___delslice__", _wrap_vector_Key_string___delslice__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string___delitem__", _wrap_vector_Key_string___delitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string___getitem__", _wrap_vector_Key_string___getitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string___setitem__", _wrap_vector_Key_string___setitem__, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_append", _wrap_vector_Key_string_append, METH_VARARGS, NULL},
	 { (char *)"delete_vector_Key_string", _wrap_delete_vector_Key_string, METH_VARARGS, NULL},
	 { (char *)"vector_Key_string_swigregister", vector_Key_string_swigregister, METH_VARARGS, NULL},
	 { (char *)"ReadNifList", _wrap_ReadNifList, METH_VARARGS, NULL},
	 { (char *)"ReadNifTree", _wrap_ReadNifTree, METH_VARARGS, NULL},
	 { (char *)"WriteNifTree", _wrap_WriteNifTree, METH_VARARGS, NULL},
	 { (char *)"SetVerboseMode", _wrap_SetVerboseMode, METH_VARARGS, NULL},
	 { (char *)"CreateBlock", _wrap_CreateBlock, METH_VARARGS, NULL},
	 { (char *)"BlocksInMemory", _wrap_BlocksInMemory, METH_VARARGS, NULL},
	 { (char *)"QueryShapeData", _wrap_QueryShapeData, METH_VARARGS, NULL},
	 { (char *)"QueryTriShapeData", _wrap_QueryTriShapeData, METH_VARARGS, NULL},
	 { (char *)"QuerySkinData", _wrap_QuerySkinData, METH_VARARGS, NULL},
	 { (char *)"QueryNode", _wrap_QueryNode, METH_VARARGS, NULL},
	 { (char *)"QueryKeyframeData", _wrap_QueryKeyframeData, METH_VARARGS, NULL},
	 { (char *)"QueryTextKeyExtraData", _wrap_QueryTextKeyExtraData, METH_VARARGS, NULL},
	 { (char *)"QueryMorphData", _wrap_QueryMorphData, METH_VARARGS, NULL},
	 { (char *)"QueryTriStripsData", _wrap_QueryTriStripsData, METH_VARARGS, NULL},
	 { (char *)"UVCoord_u_set", _wrap_UVCoord_u_set, METH_VARARGS, NULL},
	 { (char *)"UVCoord_u_get", _wrap_UVCoord_u_get, METH_VARARGS, NULL},
	 { (char *)"UVCoord_v_set", _wrap_UVCoord_v_set, METH_VARARGS, NULL},
	 { (char *)"UVCoord_v_get", _wrap_UVCoord_v_get, METH_VARARGS, NULL},
	 { (char *)"UVCoord_Set", _wrap_UVCoord_Set, METH_VARARGS, NULL},
	 { (char *)"new_UVCoord", _wrap_new_UVCoord, METH_VARARGS, NULL},
	 { (char *)"delete_UVCoord", _wrap_delete_UVCoord, METH_VARARGS, NULL},
	 { (char *)"UVCoord_swigregister", UVCoord_swigregister, METH_VARARGS, NULL},
	 { (char *)"Triangle_v1_set", _wrap_Triangle_v1_set, METH_VARARGS, NULL},
	 { (char *)"Triangle_v1_get", _wrap_Triangle_v1_get, METH_VARARGS, NULL},
	 { (char *)"Triangle_v2_set", _wrap_Triangle_v2_set, METH_VARARGS, NULL},
	 { (char *)"Triangle_v2_get", _wrap_Triangle_v2_get, METH_VARARGS, NULL},
	 { (char *)"Triangle_v3_set", _wrap_Triangle_v3_set, METH_VARARGS, NULL},
	 { (char *)"Triangle_v3_get", _wrap_Triangle_v3_get, METH_VARARGS, NULL},
	 { (char *)"Triangle_Set", _wrap_Triangle_Set, METH_VARARGS, NULL},
	 { (char *)"new_Triangle", _wrap_new_Triangle, METH_VARARGS, NULL},
	 { (char *)"delete_Triangle", _wrap_delete_Triangle, METH_VARARGS, NULL},
	 { (char *)"Triangle_swigregister", Triangle_swigregister, METH_VARARGS, NULL},
	 { (char *)"Vector3_x_set", _wrap_Vector3_x_set, METH_VARARGS, NULL},
	 { (char *)"Vector3_x_get", _wrap_Vector3_x_get, METH_VARARGS, NULL},
	 { (char *)"Vector3_y_set", _wrap_Vector3_y_set, METH_VARARGS, NULL},
	 { (char *)"Vector3_y_get", _wrap_Vector3_y_get, METH_VARARGS, NULL},
	 { (char *)"Vector3_z_set", _wrap_Vector3_z_set, METH_VARARGS, NULL},
	 { (char *)"Vector3_z_get", _wrap_Vector3_z_get, METH_VARARGS, NULL},
	 { (char *)"Vector3_Set", _wrap_Vector3_Set, METH_VARARGS, NULL},
	 { (char *)"new_Vector3", _wrap_new_Vector3, METH_VARARGS, NULL},
	 { (char *)"delete_Vector3", _wrap_delete_Vector3, METH_VARARGS, NULL},
	 { (char *)"Vector3_swigregister", Vector3_swigregister, METH_VARARGS, NULL},
	 { (char *)"Float2_data_set", _wrap_Float2_data_set, METH_VARARGS, NULL},
	 { (char *)"Float2_data_get", _wrap_Float2_data_get, METH_VARARGS, NULL},
	 { (char *)"Float2_Set", _wrap_Float2_Set, METH_VARARGS, NULL},
	 { (char *)"Float2___getitem__", _wrap_Float2___getitem__, METH_VARARGS, NULL},
	 { (char *)"Float2___setitem__", _wrap_Float2___setitem__, METH_VARARGS, NULL},
	 { (char *)"new_Float2", _wrap_new_Float2, METH_VARARGS, NULL},
	 { (char *)"delete_Float2", _wrap_delete_Float2, METH_VARARGS, NULL},
	 { (char *)"Float2_swigregister", Float2_swigregister, METH_VARARGS, NULL},
	 { (char *)"Matrix22_rows_set", _wrap_Matrix22_rows_set, METH_VARARGS, NULL},
	 { (char *)"Matrix22_rows_get", _wrap_Matrix22_rows_get, METH_VARARGS, NULL},
	 { (char *)"Matrix22_Set", _wrap_Matrix22_Set, METH_VARARGS, NULL},
	 { (char *)"Matrix22___getitem__", _wrap_Matrix22___getitem__, METH_VARARGS, NULL},
	 { (char *)"new_Matrix22", _wrap_new_Matrix22, METH_VARARGS, NULL},
	 { (char *)"delete_Matrix22", _wrap_delete_Matrix22, METH_VARARGS, NULL},
	 { (char *)"Matrix22_swigregister", Matrix22_swigregister, METH_VARARGS, NULL},
	 { (char *)"Float3_data_set", _wrap_Float3_data_set, METH_VARARGS, NULL},
	 { (char *)"Float3_data_get", _wrap_Float3_data_get, METH_VARARGS, NULL},
	 { (char *)"Float3_Set", _wrap_Float3_Set, METH_VARARGS, NULL},
	 { (char *)"Float3___getitem__", _wrap_Float3___getitem__, METH_VARARGS, NULL},
	 { (char *)"Float3___setitem__", _wrap_Float3___setitem__, METH_VARARGS, NULL},
	 { (char *)"new_Float3", _wrap_new_Float3, METH_VARARGS, NULL},
	 { (char *)"delete_Float3", _wrap_delete_Float3, METH_VARARGS, NULL},
	 { (char *)"Float3_swigregister", Float3_swigregister, METH_VARARGS, NULL},
	 { (char *)"Matrix33_rows_set", _wrap_Matrix33_rows_set, METH_VARARGS, NULL},
	 { (char *)"Matrix33_rows_get", _wrap_Matrix33_rows_get, METH_VARARGS, NULL},
	 { (char *)"Matrix33_Set", _wrap_Matrix33_Set, METH_VARARGS, NULL},
	 { (char *)"Matrix33_AsFloatArr", _wrap_Matrix33_AsFloatArr, METH_VARARGS, NULL},
	 { (char *)"Matrix33___getitem__", _wrap_Matrix33___getitem__, METH_VARARGS, NULL},
	 { (char *)"new_Matrix33", _wrap_new_Matrix33, METH_VARARGS, NULL},
	 { (char *)"delete_Matrix33", _wrap_delete_Matrix33, METH_VARARGS, NULL},
	 { (char *)"Matrix33_swigregister", Matrix33_swigregister, METH_VARARGS, NULL},
	 { (char *)"Float4_data_set", _wrap_Float4_data_set, METH_VARARGS, NULL},
	 { (char *)"Float4_data_get", _wrap_Float4_data_get, METH_VARARGS, NULL},
	 { (char *)"Float4_Set", _wrap_Float4_Set, METH_VARARGS, NULL},
	 { (char *)"Float4___getitem__", _wrap_Float4___getitem__, METH_VARARGS, NULL},
	 { (char *)"Float4___setitem__", _wrap_Float4___setitem__, METH_VARARGS, NULL},
	 { (char *)"new_Float4", _wrap_new_Float4, METH_VARARGS, NULL},
	 { (char *)"delete_Float4", _wrap_delete_Float4, METH_VARARGS, NULL},
	 { (char *)"Float4_swigregister", Float4_swigregister, METH_VARARGS, NULL},
	 { (char *)"Matrix44_rows_set", _wrap_Matrix44_rows_set, METH_VARARGS, NULL},
	 { (char *)"Matrix44_rows_get", _wrap_Matrix44_rows_get, METH_VARARGS, NULL},
	 { (char *)"Matrix44_Set", _wrap_Matrix44_Set, METH_VARARGS, NULL},
	 { (char *)"Matrix44_AsFloatArr", _wrap_Matrix44_AsFloatArr, METH_VARARGS, NULL},
	 { (char *)"Matrix44___getitem__", _wrap_Matrix44___getitem__, METH_VARARGS, NULL},
	 { (char *)"new_Matrix44", _wrap_new_Matrix44, METH_VARARGS, NULL},
	 { (char *)"delete_Matrix44", _wrap_delete_Matrix44, METH_VARARGS, NULL},
	 { (char *)"Matrix44_swigregister", Matrix44_swigregister, METH_VARARGS, NULL},
	 { (char *)"Color_r_set", _wrap_Color_r_set, METH_VARARGS, NULL},
	 { (char *)"Color_r_get", _wrap_Color_r_get, METH_VARARGS, NULL},
	 { (char *)"Color_g_set", _wrap_Color_g_set, METH_VARARGS, NULL},
	 { (char *)"Color_g_get", _wrap_Color_g_get, METH_VARARGS, NULL},
	 { (char *)"Color_b_set", _wrap_Color_b_set, METH_VARARGS, NULL},
	 { (char *)"Color_b_get", _wrap_Color_b_get, METH_VARARGS, NULL},
	 { (char *)"Color_a_set", _wrap_Color_a_set, METH_VARARGS, NULL},
	 { (char *)"Color_a_get", _wrap_Color_a_get, METH_VARARGS, NULL},
	 { (char *)"Color_Set", _wrap_Color_Set, METH_VARARGS, NULL},
	 { (char *)"new_Color", _wrap_new_Color, METH_VARARGS, NULL},
	 { (char *)"delete_Color", _wrap_delete_Color, METH_VARARGS, NULL},
	 { (char *)"Color_swigregister", Color_swigregister, METH_VARARGS, NULL},
	 { (char *)"Quaternion_w_set", _wrap_Quaternion_w_set, METH_VARARGS, NULL},
	 { (char *)"Quaternion_w_get", _wrap_Quaternion_w_get, METH_VARARGS, NULL},
	 { (char *)"Quaternion_x_set", _wrap_Quaternion_x_set, METH_VARARGS, NULL},
	 { (char *)"Quaternion_x_get", _wrap_Quaternion_x_get, METH_VARARGS, NULL},
	 { (char *)"Quaternion_y_set", _wrap_Quaternion_y_set, METH_VARARGS, NULL},
	 { (char *)"Quaternion_y_get", _wrap_Quaternion_y_get, METH_VARARGS, NULL},
	 { (char *)"Quaternion_z_set", _wrap_Quaternion_z_set, METH_VARARGS, NULL},
	 { (char *)"Quaternion_z_get", _wrap_Quaternion_z_get, METH_VARARGS, NULL},
	 { (char *)"Quaternion_Set", _wrap_Quaternion_Set, METH_VARARGS, NULL},
	 { (char *)"new_Quaternion", _wrap_new_Quaternion, METH_VARARGS, NULL},
	 { (char *)"delete_Quaternion", _wrap_delete_Quaternion, METH_VARARGS, NULL},
	 { (char *)"Quaternion_swigregister", Quaternion_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IBlock", _wrap_delete_IBlock, METH_VARARGS, NULL},
	 { (char *)"IBlock_GetBlockNum", _wrap_IBlock_GetBlockNum, METH_VARARGS, NULL},
	 { (char *)"IBlock_GetParent", _wrap_IBlock_GetParent, METH_VARARGS, NULL},
	 { (char *)"IBlock_asString", _wrap_IBlock_asString, METH_VARARGS, NULL},
	 { (char *)"IBlock_GetBlockType", _wrap_IBlock_GetBlockType, METH_VARARGS, NULL},
	 { (char *)"IBlock_GetAttr", _wrap_IBlock_GetAttr, METH_VARARGS, NULL},
	 { (char *)"IBlock_GetAttrs", _wrap_IBlock_GetAttrs, METH_VARARGS, NULL},
	 { (char *)"IBlock_GetLinks", _wrap_IBlock_GetLinks, METH_VARARGS, NULL},
	 { (char *)"IBlock_QueryInterface", _wrap_IBlock_QueryInterface, METH_VARARGS, NULL},
	 { (char *)"IBlock_Namable", _wrap_IBlock_Namable, METH_VARARGS, NULL},
	 { (char *)"IBlock_SetName", _wrap_IBlock_SetName, METH_VARARGS, NULL},
	 { (char *)"IBlock_GetName", _wrap_IBlock_GetName, METH_VARARGS, NULL},
	 { (char *)"IBlock_swigregister", IBlock_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IAttr", _wrap_delete_IAttr, METH_VARARGS, NULL},
	 { (char *)"IAttr_GetType", _wrap_IAttr_GetType, METH_VARARGS, NULL},
	 { (char *)"IAttr_GetName", _wrap_IAttr_GetName, METH_VARARGS, NULL},
	 { (char *)"IAttr_Read", _wrap_IAttr_Read, METH_VARARGS, NULL},
	 { (char *)"IAttr_Write", _wrap_IAttr_Write, METH_VARARGS, NULL},
	 { (char *)"IAttr_asInt", _wrap_IAttr_asInt, METH_VARARGS, NULL},
	 { (char *)"IAttr_asFloat", _wrap_IAttr_asFloat, METH_VARARGS, NULL},
	 { (char *)"IAttr_asFloat3", _wrap_IAttr_asFloat3, METH_VARARGS, NULL},
	 { (char *)"IAttr_asString", _wrap_IAttr_asString, METH_VARARGS, NULL},
	 { (char *)"IAttr_asMatrix33", _wrap_IAttr_asMatrix33, METH_VARARGS, NULL},
	 { (char *)"IAttr_asLink", _wrap_IAttr_asLink, METH_VARARGS, NULL},
	 { (char *)"IAttr_asTextureSource", _wrap_IAttr_asTextureSource, METH_VARARGS, NULL},
	 { (char *)"IAttr_asBoundingBox", _wrap_IAttr_asBoundingBox, METH_VARARGS, NULL},
	 { (char *)"IAttr_asConditionalInt", _wrap_IAttr_asConditionalInt, METH_VARARGS, NULL},
	 { (char *)"IAttr_asTexture", _wrap_IAttr_asTexture, METH_VARARGS, NULL},
	 { (char *)"IAttr_asLinkList", _wrap_IAttr_asLinkList, METH_VARARGS, NULL},
	 { (char *)"IAttr_Set", _wrap_IAttr_Set, METH_VARARGS, NULL},
	 { (char *)"IAttr_HasLinks", _wrap_IAttr_HasLinks, METH_VARARGS, NULL},
	 { (char *)"IAttr_AddLink", _wrap_IAttr_AddLink, METH_VARARGS, NULL},
	 { (char *)"IAttr_AddLinks", _wrap_IAttr_AddLinks, METH_VARARGS, NULL},
	 { (char *)"IAttr_ClearLinks", _wrap_IAttr_ClearLinks, METH_VARARGS, NULL},
	 { (char *)"IAttr_RemoveLinks", _wrap_IAttr_RemoveLinks, METH_VARARGS, NULL},
	 { (char *)"IAttr_FindLink", _wrap_IAttr_FindLink, METH_VARARGS, NULL},
	 { (char *)"IAttr_swigregister", IAttr_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_INode", _wrap_delete_INode, METH_VARARGS, NULL},
	 { (char *)"INode_GetLocalTransform", _wrap_INode_GetLocalTransform, METH_VARARGS, NULL},
	 { (char *)"INode_GetWorldTransform", _wrap_INode_GetWorldTransform, METH_VARARGS, NULL},
	 { (char *)"INode_GetBindPosition", _wrap_INode_GetBindPosition, METH_VARARGS, NULL},
	 { (char *)"INode_SetBindPosition", _wrap_INode_SetBindPosition, METH_VARARGS, NULL},
	 { (char *)"INode_GetLocalBindPos", _wrap_INode_GetLocalBindPos, METH_VARARGS, NULL},
	 { (char *)"INode_swigregister", INode_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IShapeData", _wrap_delete_IShapeData, METH_VARARGS, NULL},
	 { (char *)"IShapeData_GetVertexCount", _wrap_IShapeData_GetVertexCount, METH_VARARGS, NULL},
	 { (char *)"IShapeData_GetUVSetCount", _wrap_IShapeData_GetUVSetCount, METH_VARARGS, NULL},
	 { (char *)"IShapeData_SetVertexCount", _wrap_IShapeData_SetVertexCount, METH_VARARGS, NULL},
	 { (char *)"IShapeData_SetUVSetCount", _wrap_IShapeData_SetUVSetCount, METH_VARARGS, NULL},
	 { (char *)"IShapeData_GetVertices", _wrap_IShapeData_GetVertices, METH_VARARGS, NULL},
	 { (char *)"IShapeData_GetNormals", _wrap_IShapeData_GetNormals, METH_VARARGS, NULL},
	 { (char *)"IShapeData_GetColors", _wrap_IShapeData_GetColors, METH_VARARGS, NULL},
	 { (char *)"IShapeData_GetUVSet", _wrap_IShapeData_GetUVSet, METH_VARARGS, NULL},
	 { (char *)"IShapeData_SetVertices", _wrap_IShapeData_SetVertices, METH_VARARGS, NULL},
	 { (char *)"IShapeData_SetNormals", _wrap_IShapeData_SetNormals, METH_VARARGS, NULL},
	 { (char *)"IShapeData_SetColors", _wrap_IShapeData_SetColors, METH_VARARGS, NULL},
	 { (char *)"IShapeData_SetUVSet", _wrap_IShapeData_SetUVSet, METH_VARARGS, NULL},
	 { (char *)"IShapeData_swigregister", IShapeData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ITriShapeData", _wrap_delete_ITriShapeData, METH_VARARGS, NULL},
	 { (char *)"ITriShapeData_GetTriangleCount", _wrap_ITriShapeData_GetTriangleCount, METH_VARARGS, NULL},
	 { (char *)"ITriShapeData_SetTriangleCount", _wrap_ITriShapeData_SetTriangleCount, METH_VARARGS, NULL},
	 { (char *)"ITriShapeData_SetMatchDetectionMode", _wrap_ITriShapeData_SetMatchDetectionMode, METH_VARARGS, NULL},
	 { (char *)"ITriShapeData_GetMatchDetectionMode", _wrap_ITriShapeData_GetMatchDetectionMode, METH_VARARGS, NULL},
	 { (char *)"ITriShapeData_GetTriangles", _wrap_ITriShapeData_GetTriangles, METH_VARARGS, NULL},
	 { (char *)"ITriShapeData_SetTriangles", _wrap_ITriShapeData_SetTriangles, METH_VARARGS, NULL},
	 { (char *)"ITriShapeData_swigregister", ITriShapeData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ITriStripsData", _wrap_delete_ITriStripsData, METH_VARARGS, NULL},
	 { (char *)"ITriStripsData_GetTriangleCount", _wrap_ITriStripsData_GetTriangleCount, METH_VARARGS, NULL},
	 { (char *)"ITriStripsData_GetStripCount", _wrap_ITriStripsData_GetStripCount, METH_VARARGS, NULL},
	 { (char *)"ITriStripsData_SetStripCount", _wrap_ITriStripsData_SetStripCount, METH_VARARGS, NULL},
	 { (char *)"ITriStripsData_GetStrip", _wrap_ITriStripsData_GetStrip, METH_VARARGS, NULL},
	 { (char *)"ITriStripsData_GetTriangles", _wrap_ITriStripsData_GetTriangles, METH_VARARGS, NULL},
	 { (char *)"ITriStripsData_SetStrip", _wrap_ITriStripsData_SetStrip, METH_VARARGS, NULL},
	 { (char *)"ITriStripsData_swigregister", ITriStripsData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ISkinData", _wrap_delete_ISkinData, METH_VARARGS, NULL},
	 { (char *)"ISkinData_GetBones", _wrap_ISkinData_GetBones, METH_VARARGS, NULL},
	 { (char *)"ISkinData_GetWeights", _wrap_ISkinData_GetWeights, METH_VARARGS, NULL},
	 { (char *)"ISkinData_AddBone", _wrap_ISkinData_AddBone, METH_VARARGS, NULL},
	 { (char *)"ISkinData_RemoveBone", _wrap_ISkinData_RemoveBone, METH_VARARGS, NULL},
	 { (char *)"ISkinData_swigregister", ISkinData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IKeyframeData", _wrap_delete_IKeyframeData, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_GetRotateType", _wrap_IKeyframeData_GetRotateType, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_SetRotateType", _wrap_IKeyframeData_SetRotateType, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_GetRotateKeys", _wrap_IKeyframeData_GetRotateKeys, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_SetRotateKeys", _wrap_IKeyframeData_SetRotateKeys, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_GetTranslateType", _wrap_IKeyframeData_GetTranslateType, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_SetTranslateType", _wrap_IKeyframeData_SetTranslateType, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_GetTranslateKeys", _wrap_IKeyframeData_GetTranslateKeys, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_SetTranslateKeys", _wrap_IKeyframeData_SetTranslateKeys, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_GetScaleType", _wrap_IKeyframeData_GetScaleType, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_SetScaleType", _wrap_IKeyframeData_SetScaleType, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_GetScaleKeys", _wrap_IKeyframeData_GetScaleKeys, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_SetScaleKeys", _wrap_IKeyframeData_SetScaleKeys, METH_VARARGS, NULL},
	 { (char *)"IKeyframeData_swigregister", IKeyframeData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_ITextKeyExtraData", _wrap_delete_ITextKeyExtraData, METH_VARARGS, NULL},
	 { (char *)"ITextKeyExtraData_GetRotateKeys", _wrap_ITextKeyExtraData_GetRotateKeys, METH_VARARGS, NULL},
	 { (char *)"ITextKeyExtraData_SetRotateKeys", _wrap_ITextKeyExtraData_SetRotateKeys, METH_VARARGS, NULL},
	 { (char *)"ITextKeyExtraData_swigregister", ITextKeyExtraData_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_IMorphData", _wrap_delete_IMorphData, METH_VARARGS, NULL},
	 { (char *)"IMorphData_GetVertexCount", _wrap_IMorphData_GetVertexCount, METH_VARARGS, NULL},
	 { (char *)"IMorphData_SetVertexCount", _wrap_IMorphData_SetVertexCount, METH_VARARGS, NULL},
	 { (char *)"IMorphData_GetMorphCount", _wrap_IMorphData_GetMorphCount, METH_VARARGS, NULL},
	 { (char *)"IMorphData_SetMorphCount", _wrap_IMorphData_SetMorphCount, METH_VARARGS, NULL},
	 { (char *)"IMorphData_GetMorphKeys", _wrap_IMorphData_GetMorphKeys, METH_VARARGS, NULL},
	 { (char *)"IMorphData_SetMorphKeys", _wrap_IMorphData_SetMorphKeys, METH_VARARGS, NULL},
	 { (char *)"IMorphData_GetMorphVerts", _wrap_IMorphData_GetMorphVerts, METH_VARARGS, NULL},
	 { (char *)"IMorphData_SetMorphVerts", _wrap_IMorphData_SetMorphVerts, METH_VARARGS, NULL},
	 { (char *)"IMorphData_swigregister", IMorphData_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_attr_ref", _wrap_new_attr_ref, METH_VARARGS, NULL},
	 { (char *)"attr_ref___deref__", _wrap_attr_ref___deref__, METH_VARARGS, NULL},
	 { (char *)"attr_ref_is_null", _wrap_attr_ref_is_null, METH_VARARGS, NULL},
	 { (char *)"attr_ref_ptr", _wrap_attr_ref_ptr, METH_VARARGS, NULL},
	 { (char *)"attr_ref___eq__", _wrap_attr_ref___eq__, METH_VARARGS, NULL},
	 { (char *)"attr_ref___ne__", _wrap_attr_ref___ne__, METH_VARARGS, NULL},
	 { (char *)"attr_ref___lt__", _wrap_attr_ref___lt__, METH_VARARGS, NULL},
	 { (char *)"attr_ref_GetType", _wrap_attr_ref_GetType, METH_VARARGS, NULL},
	 { (char *)"attr_ref_GetName", _wrap_attr_ref_GetName, METH_VARARGS, NULL},
	 { (char *)"attr_ref_Read", _wrap_attr_ref_Read, METH_VARARGS, NULL},
	 { (char *)"attr_ref_Write", _wrap_attr_ref_Write, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asInt", _wrap_attr_ref_asInt, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asFloat", _wrap_attr_ref_asFloat, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asFloat3", _wrap_attr_ref_asFloat3, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asString", _wrap_attr_ref_asString, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asMatrix33", _wrap_attr_ref_asMatrix33, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asLink", _wrap_attr_ref_asLink, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asTextureSource", _wrap_attr_ref_asTextureSource, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asBoundingBox", _wrap_attr_ref_asBoundingBox, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asConditionalInt", _wrap_attr_ref_asConditionalInt, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asTexture", _wrap_attr_ref_asTexture, METH_VARARGS, NULL},
	 { (char *)"attr_ref_asLinkList", _wrap_attr_ref_asLinkList, METH_VARARGS, NULL},
	 { (char *)"attr_ref_Set", _wrap_attr_ref_Set, METH_VARARGS, NULL},
	 { (char *)"attr_ref_HasLinks", _wrap_attr_ref_HasLinks, METH_VARARGS, NULL},
	 { (char *)"attr_ref_AddLink", _wrap_attr_ref_AddLink, METH_VARARGS, NULL},
	 { (char *)"attr_ref_AddLinks", _wrap_attr_ref_AddLinks, METH_VARARGS, NULL},
	 { (char *)"attr_ref_ClearLinks", _wrap_attr_ref_ClearLinks, METH_VARARGS, NULL},
	 { (char *)"attr_ref_RemoveLinks", _wrap_attr_ref_RemoveLinks, METH_VARARGS, NULL},
	 { (char *)"attr_ref_FindLink", _wrap_attr_ref_FindLink, METH_VARARGS, NULL},
	 { (char *)"delete_attr_ref", _wrap_delete_attr_ref, METH_VARARGS, NULL},
	 { (char *)"attr_ref_swigregister", attr_ref_swigregister, METH_VARARGS, NULL},
	 { (char *)"blk_ref___eq__", _wrap_blk_ref___eq__, METH_VARARGS, NULL},
	 { (char *)"blk_ref___lt__", _wrap_blk_ref___lt__, METH_VARARGS, NULL},
	 { (char *)"blk_ref___ne__", _wrap_blk_ref___ne__, METH_VARARGS, NULL},
	 { (char *)"blk_ref_is_null", _wrap_blk_ref_is_null, METH_VARARGS, NULL},
	 { (char *)"new_blk_ref", _wrap_new_blk_ref, METH_VARARGS, NULL},
	 { (char *)"delete_blk_ref", _wrap_delete_blk_ref, METH_VARARGS, NULL},
	 { (char *)"blk_ref_set_block", _wrap_blk_ref_set_block, METH_VARARGS, NULL},
	 { (char *)"blk_ref___deref__", _wrap_blk_ref___deref__, METH_VARARGS, NULL},
	 { (char *)"blk_ref_get_index", _wrap_blk_ref_get_index, METH_VARARGS, NULL},
	 { (char *)"blk_ref_get_block", _wrap_blk_ref_get_block, METH_VARARGS, NULL},
	 { (char *)"blk_ref_set_index", _wrap_blk_ref_set_index, METH_VARARGS, NULL},
	 { (char *)"blk_ref_is_fixed", _wrap_blk_ref_is_fixed, METH_VARARGS, NULL},
	 { (char *)"blk_ref___getitem__", _wrap_blk_ref___getitem__, METH_VARARGS, NULL},
	 { (char *)"blk_ref___setitem__", _wrap_blk_ref___setitem__, METH_VARARGS, NULL},
	 { (char *)"blk_ref_GetBlockNum", _wrap_blk_ref_GetBlockNum, METH_VARARGS, NULL},
	 { (char *)"blk_ref_GetParent", _wrap_blk_ref_GetParent, METH_VARARGS, NULL},
	 { (char *)"blk_ref_asString", _wrap_blk_ref_asString, METH_VARARGS, NULL},
	 { (char *)"blk_ref_GetBlockType", _wrap_blk_ref_GetBlockType, METH_VARARGS, NULL},
	 { (char *)"blk_ref_GetAttr", _wrap_blk_ref_GetAttr, METH_VARARGS, NULL},
	 { (char *)"blk_ref_GetAttrs", _wrap_blk_ref_GetAttrs, METH_VARARGS, NULL},
	 { (char *)"blk_ref_GetLinks", _wrap_blk_ref_GetLinks, METH_VARARGS, NULL},
	 { (char *)"blk_ref_QueryInterface", _wrap_blk_ref_QueryInterface, METH_VARARGS, NULL},
	 { (char *)"blk_ref_Namable", _wrap_blk_ref_Namable, METH_VARARGS, NULL},
	 { (char *)"blk_ref_SetName", _wrap_blk_ref_SetName, METH_VARARGS, NULL},
	 { (char *)"blk_ref_GetName", _wrap_blk_ref_GetName, METH_VARARGS, NULL},
	 { (char *)"blk_ref_swigregister", blk_ref_swigregister, METH_VARARGS, NULL},
	 { (char *)"blk_link_block_set", _wrap_blk_link_block_set, METH_VARARGS, NULL},
	 { (char *)"blk_link_block_get", _wrap_blk_link_block_get, METH_VARARGS, NULL},
	 { (char *)"blk_link_attr_set", _wrap_blk_link_attr_set, METH_VARARGS, NULL},
	 { (char *)"blk_link_attr_get", _wrap_blk_link_attr_get, METH_VARARGS, NULL},
	 { (char *)"new_blk_link", _wrap_new_blk_link, METH_VARARGS, NULL},
	 { (char *)"delete_blk_link", _wrap_delete_blk_link, METH_VARARGS, NULL},
	 { (char *)"blk_link_swigregister", blk_link_swigregister, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_isUsed_set", _wrap_BoundingBox_isUsed_set, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_isUsed_get", _wrap_BoundingBox_isUsed_get, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_unknownInt_set", _wrap_BoundingBox_unknownInt_set, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_unknownInt_get", _wrap_BoundingBox_unknownInt_get, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_translation_set", _wrap_BoundingBox_translation_set, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_translation_get", _wrap_BoundingBox_translation_get, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_rotation_set", _wrap_BoundingBox_rotation_set, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_rotation_get", _wrap_BoundingBox_rotation_get, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_radius_set", _wrap_BoundingBox_radius_set, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_radius_get", _wrap_BoundingBox_radius_get, METH_VARARGS, NULL},
	 { (char *)"new_BoundingBox", _wrap_new_BoundingBox, METH_VARARGS, NULL},
	 { (char *)"delete_BoundingBox", _wrap_delete_BoundingBox, METH_VARARGS, NULL},
	 { (char *)"BoundingBox_swigregister", BoundingBox_swigregister, METH_VARARGS, NULL},
	 { (char *)"ConditionalInt_isUsed_set", _wrap_ConditionalInt_isUsed_set, METH_VARARGS, NULL},
	 { (char *)"ConditionalInt_isUsed_get", _wrap_ConditionalInt_isUsed_get, METH_VARARGS, NULL},
	 { (char *)"ConditionalInt_unknownInt_set", _wrap_ConditionalInt_unknownInt_set, METH_VARARGS, NULL},
	 { (char *)"ConditionalInt_unknownInt_get", _wrap_ConditionalInt_unknownInt_get, METH_VARARGS, NULL},
	 { (char *)"new_ConditionalInt", _wrap_new_ConditionalInt, METH_VARARGS, NULL},
	 { (char *)"delete_ConditionalInt", _wrap_delete_ConditionalInt, METH_VARARGS, NULL},
	 { (char *)"ConditionalInt_swigregister", ConditionalInt_swigregister, METH_VARARGS, NULL},
	 { (char *)"Texture_isUsed_set", _wrap_Texture_isUsed_set, METH_VARARGS, NULL},
	 { (char *)"Texture_isUsed_get", _wrap_Texture_isUsed_get, METH_VARARGS, NULL},
	 { (char *)"Texture_clampMode_set", _wrap_Texture_clampMode_set, METH_VARARGS, NULL},
	 { (char *)"Texture_clampMode_get", _wrap_Texture_clampMode_get, METH_VARARGS, NULL},
	 { (char *)"Texture_filterMode_set", _wrap_Texture_filterMode_set, METH_VARARGS, NULL},
	 { (char *)"Texture_filterMode_get", _wrap_Texture_filterMode_get, METH_VARARGS, NULL},
	 { (char *)"Texture_textureSet_set", _wrap_Texture_textureSet_set, METH_VARARGS, NULL},
	 { (char *)"Texture_textureSet_get", _wrap_Texture_textureSet_get, METH_VARARGS, NULL},
	 { (char *)"Texture_PS2_L_set", _wrap_Texture_PS2_L_set, METH_VARARGS, NULL},
	 { (char *)"Texture_PS2_L_get", _wrap_Texture_PS2_L_get, METH_VARARGS, NULL},
	 { (char *)"Texture_PS2_K_set", _wrap_Texture_PS2_K_set, METH_VARARGS, NULL},
	 { (char *)"Texture_PS2_K_get", _wrap_Texture_PS2_K_get, METH_VARARGS, NULL},
	 { (char *)"Texture_unknownShort_set", _wrap_Texture_unknownShort_set, METH_VARARGS, NULL},
	 { (char *)"Texture_unknownShort_get", _wrap_Texture_unknownShort_get, METH_VARARGS, NULL},
	 { (char *)"Texture_hasUnknownData_set", _wrap_Texture_hasUnknownData_set, METH_VARARGS, NULL},
	 { (char *)"Texture_hasUnknownData_get", _wrap_Texture_hasUnknownData_get, METH_VARARGS, NULL},
	 { (char *)"Texture_unknown5Floats_set", _wrap_Texture_unknown5Floats_set, METH_VARARGS, NULL},
	 { (char *)"Texture_unknown5Floats_get", _wrap_Texture_unknown5Floats_get, METH_VARARGS, NULL},
	 { (char *)"Texture_unknownInt_set", _wrap_Texture_unknownInt_set, METH_VARARGS, NULL},
	 { (char *)"Texture_unknownInt_get", _wrap_Texture_unknownInt_get, METH_VARARGS, NULL},
	 { (char *)"Texture_unknownFloat1_set", _wrap_Texture_unknownFloat1_set, METH_VARARGS, NULL},
	 { (char *)"Texture_unknownFloat1_get", _wrap_Texture_unknownFloat1_get, METH_VARARGS, NULL},
	 { (char *)"Texture_unknownFloat2_set", _wrap_Texture_unknownFloat2_set, METH_VARARGS, NULL},
	 { (char *)"Texture_unknownFloat2_get", _wrap_Texture_unknownFloat2_get, METH_VARARGS, NULL},
	 { (char *)"Texture_bmLumaOffset_set", _wrap_Texture_bmLumaOffset_set, METH_VARARGS, NULL},
	 { (char *)"Texture_bmLumaOffset_get", _wrap_Texture_bmLumaOffset_get, METH_VARARGS, NULL},
	 { (char *)"Texture_bmLumaScale_set", _wrap_Texture_bmLumaScale_set, METH_VARARGS, NULL},
	 { (char *)"Texture_bmLumaScale_get", _wrap_Texture_bmLumaScale_get, METH_VARARGS, NULL},
	 { (char *)"Texture_bmMatrix_set", _wrap_Texture_bmMatrix_set, METH_VARARGS, NULL},
	 { (char *)"Texture_bmMatrix_get", _wrap_Texture_bmMatrix_get, METH_VARARGS, NULL},
	 { (char *)"new_Texture", _wrap_new_Texture, METH_VARARGS, NULL},
	 { (char *)"delete_Texture", _wrap_delete_Texture, METH_VARARGS, NULL},
	 { (char *)"Texture_swigregister", Texture_swigregister, METH_VARARGS, NULL},
	 { (char *)"TextureSource_useExternal_set", _wrap_TextureSource_useExternal_set, METH_VARARGS, NULL},
	 { (char *)"TextureSource_useExternal_get", _wrap_TextureSource_useExternal_get, METH_VARARGS, NULL},
	 { (char *)"TextureSource_unknownByte_set", _wrap_TextureSource_unknownByte_set, METH_VARARGS, NULL},
	 { (char *)"TextureSource_unknownByte_get", _wrap_TextureSource_unknownByte_get, METH_VARARGS, NULL},
	 { (char *)"TextureSource_fileName_set", _wrap_TextureSource_fileName_set, METH_VARARGS, NULL},
	 { (char *)"TextureSource_fileName_get", _wrap_TextureSource_fileName_get, METH_VARARGS, NULL},
	 { (char *)"new_TextureSource", _wrap_new_TextureSource, METH_VARARGS, NULL},
	 { (char *)"delete_TextureSource", _wrap_delete_TextureSource, METH_VARARGS, NULL},
	 { (char *)"TextureSource_swigregister", TextureSource_swigregister, METH_VARARGS, NULL},
	 { (char *)"SkinWeight_vertexNum_set", _wrap_SkinWeight_vertexNum_set, METH_VARARGS, NULL},
	 { (char *)"SkinWeight_vertexNum_get", _wrap_SkinWeight_vertexNum_get, METH_VARARGS, NULL},
	 { (char *)"SkinWeight_vertexWeight_set", _wrap_SkinWeight_vertexWeight_set, METH_VARARGS, NULL},
	 { (char *)"SkinWeight_vertexWeight_get", _wrap_SkinWeight_vertexWeight_get, METH_VARARGS, NULL},
	 { (char *)"new_SkinWeight", _wrap_new_SkinWeight, METH_VARARGS, NULL},
	 { (char *)"delete_SkinWeight", _wrap_delete_SkinWeight, METH_VARARGS, NULL},
	 { (char *)"SkinWeight_swigregister", SkinWeight_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_BoundingBox = {"_p_BoundingBox", "BoundingBox *", 0, 0, 0};
static swig_type_info _swigt__p_Color = {"_p_Color", "Color *", 0, 0, 0};
static swig_type_info _swigt__p_ConditionalInt = {"_p_ConditionalInt", "ConditionalInt *", 0, 0, 0};
static swig_type_info _swigt__p_Float2 = {"_p_Float2", "Float2 *", 0, 0, 0};
static swig_type_info _swigt__p_Float3 = {"_p_Float3", "Float3 *", 0, 0, 0};
static swig_type_info _swigt__p_Float4 = {"_p_Float4", "Float4 *", 0, 0, 0};
static swig_type_info _swigt__p_IAttr = {"_p_IAttr", "IAttr *", 0, 0, 0};
static swig_type_info _swigt__p_IBlock = {"_p_IBlock", "IBlock *", 0, 0, 0};
static swig_type_info _swigt__p_IKeyframeData = {"_p_IKeyframeData", "IKeyframeData *", 0, 0, 0};
static swig_type_info _swigt__p_IMorphData = {"_p_IMorphData", "IMorphData *", 0, 0, 0};
static swig_type_info _swigt__p_INode = {"_p_INode", "INode *", 0, 0, 0};
static swig_type_info _swigt__p_IShapeData = {"_p_IShapeData", "IShapeData *", 0, 0, 0};
static swig_type_info _swigt__p_ISkinData = {"_p_ISkinData", "ISkinData *", 0, 0, 0};
static swig_type_info _swigt__p_ITextKeyExtraData = {"_p_ITextKeyExtraData", "ITextKeyExtraData *", 0, 0, 0};
static swig_type_info _swigt__p_ITriShapeData = {"_p_ITriShapeData", "ITriShapeData *", 0, 0, 0};
static swig_type_info _swigt__p_ITriStripsData = {"_p_ITriStripsData", "ITriStripsData *", 0, 0, 0};
static swig_type_info _swigt__p_KeyTQuaternion_t = {"_p_KeyTQuaternion_t", "Key<Quaternion > *", 0, 0, 0};
static swig_type_info _swigt__p_KeyTVector3_t = {"_p_KeyTVector3_t", "Key<Vector3 > *", 0, 0, 0};
static swig_type_info _swigt__p_KeyTfloat_t = {"_p_KeyTfloat_t", "Key<float > *", 0, 0, 0};
static swig_type_info _swigt__p_KeyTstd__string_t = {"_p_KeyTstd__string_t", "Key<std::string > *", 0, 0, 0};
static swig_type_info _swigt__p_Matrix22 = {"_p_Matrix22", "Matrix22 *", 0, 0, 0};
static swig_type_info _swigt__p_Matrix33 = {"_p_Matrix33", "Matrix33 *", 0, 0, 0};
static swig_type_info _swigt__p_Matrix44 = {"_p_Matrix44", "Matrix44 *", 0, 0, 0};
static swig_type_info _swigt__p_Quaternion = {"_p_Quaternion", "Quaternion *", 0, 0, 0};
static swig_type_info _swigt__p_SkinWeight = {"_p_SkinWeight", "SkinWeight *", 0, 0, 0};
static swig_type_info _swigt__p_Texture = {"_p_Texture", "Texture *", 0, 0, 0};
static swig_type_info _swigt__p_TextureSource = {"_p_TextureSource", "TextureSource *", 0, 0, 0};
static swig_type_info _swigt__p_Triangle = {"_p_Triangle", "Triangle *", 0, 0, 0};
static swig_type_info _swigt__p_UVCoord = {"_p_UVCoord", "UVCoord *", 0, 0, 0};
static swig_type_info _swigt__p_Vector3 = {"_p_Vector3", "Vector3 *", 0, 0, 0};
static swig_type_info _swigt__p_a_3__float = {"_p_a_3__float", "float (*)[3]", 0, 0, 0};
static swig_type_info _swigt__p_a_4__float = {"_p_a_4__float", "float (*)[4]", 0, 0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_attr_ref = {"_p_attr_ref", "attr_ref *", 0, 0, 0};
static swig_type_info _swigt__p_blk_link = {"_p_blk_link", "blk_link *", 0, 0, 0};
static swig_type_info _swigt__p_blk_ref = {"_p_blk_ref", "blk_ref *", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, 0};
static swig_type_info _swigt__p_ifstream = {"_p_ifstream", "ifstream *", 0, 0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, 0};
static swig_type_info _swigt__p_ofstream = {"_p_ofstream", "ofstream *", 0, 0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t = {"_p_std__listTblk_ref_std__allocatorTblk_ref_t_t", "std::list<blk_ref > *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__allocator_type = {"_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__allocator_type", "std::allocator<blk_ref > *|std::list<blk_ref >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type = {"_p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type", "blk_ref *|std::list<blk_ref >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t = {"_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t", "std::map<int,float > *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t__allocator_type = {"_p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t__allocator_type", "std::allocator<std::pair<int const,float > > *|std::map<int,float >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__pairTint_float_t = {"_p_std__pairTint_float_t", "std::pair<int,float > *", 0, 0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTColor_std__allocatorTColor_t_t = {"_p_std__vectorTColor_std__allocatorTColor_t_t", "std::vector<Color > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTColor_std__allocatorTColor_t_t__allocator_type = {"_p_std__vectorTColor_std__allocatorTColor_t_t__allocator_type", "std::allocator<Color > *|std::vector<Color >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTColor_std__allocatorTColor_t_t__value_type = {"_p_std__vectorTColor_std__allocatorTColor_t_t__value_type", "Color *|std::vector<Color >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t = {"_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t", "std::vector<Key<Quaternion > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__allocator_type = {"_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__allocator_type", "std::allocator<Key<Quaternion > > *|std::vector<Key<Quaternion > >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type = {"_p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type", "Key<Quaternion > *|std::vector<Key<Quaternion > >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t = {"_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t", "std::vector<Key<Vector3 > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__allocator_type = {"_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__allocator_type", "std::allocator<Key<Vector3 > > *|std::vector<Key<Vector3 > >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type = {"_p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type", "Key<Vector3 > *|std::vector<Key<Vector3 > >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t = {"_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t", "std::vector<Key<float > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__allocator_type = {"_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__allocator_type", "std::allocator<Key<float > > *|std::vector<Key<float > >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type = {"_p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type", "Key<float > *|std::vector<Key<float > >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t = {"_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t", "std::vector<Key<std::string > > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__allocator_type = {"_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__allocator_type", "std::allocator<Key<std::string > > *|std::vector<Key<std::string > >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type = {"_p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type", "Key<std::string > *|std::vector<Key<std::string > >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t = {"_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t", "std::vector<SkinWeight > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__allocator_type = {"_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__allocator_type", "std::allocator<SkinWeight > *|std::vector<SkinWeight >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type = {"_p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type", "SkinWeight *|std::vector<SkinWeight >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTTriangle_std__allocatorTTriangle_t_t = {"_p_std__vectorTTriangle_std__allocatorTTriangle_t_t", "std::vector<Triangle > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__allocator_type = {"_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__allocator_type", "std::allocator<Triangle > *|std::vector<Triangle >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type = {"_p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type", "Triangle *|std::vector<Triangle >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t = {"_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t", "std::vector<UVCoord > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__allocator_type = {"_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__allocator_type", "std::allocator<UVCoord > *|std::vector<UVCoord >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type = {"_p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type", "UVCoord *|std::vector<UVCoord >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTVector3_std__allocatorTVector3_t_t = {"_p_std__vectorTVector3_std__allocatorTVector3_t_t", "std::vector<Vector3 > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTVector3_std__allocatorTVector3_t_t__allocator_type = {"_p_std__vectorTVector3_std__allocatorTVector3_t_t__allocator_type", "std::allocator<Vector3 > *|std::vector<Vector3 >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type = {"_p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type", "Vector3 *|std::vector<Vector3 >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t = {"_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t", "std::vector<attr_ref > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__allocator_type = {"_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__allocator_type", "std::allocator<attr_ref > *|std::vector<attr_ref >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type = {"_p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type", "attr_ref *|std::vector<attr_ref >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t = {"_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t", "std::vector<blk_ref > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__allocator_type = {"_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__allocator_type", "std::allocator<blk_ref > *|std::vector<blk_ref >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type = {"_p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type", "blk_ref *|std::vector<blk_ref >::value_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTfloat_std__allocatorTfloat_t_t = {"_p_std__vectorTfloat_std__allocatorTfloat_t_t", "std::vector<float > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTfloat_std__allocatorTfloat_t_t__allocator_type = {"_p_std__vectorTfloat_std__allocatorTfloat_t_t__allocator_type", "std::allocator<float > *|std::vector<float >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTshort_std__allocatorTshort_t_t = {"_p_std__vectorTshort_std__allocatorTshort_t_t", "std::vector<short > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTshort_std__allocatorTshort_t_t__allocator_type = {"_p_std__vectorTshort_std__allocatorTshort_t_t__allocator_type", "std::allocator<short > *|std::vector<short >::allocator_type *", 0, 0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__size_t = {"_size_t", "size_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BoundingBox,
  &_swigt__p_Color,
  &_swigt__p_ConditionalInt,
  &_swigt__p_Float2,
  &_swigt__p_Float3,
  &_swigt__p_Float4,
  &_swigt__p_IAttr,
  &_swigt__p_IBlock,
  &_swigt__p_IKeyframeData,
  &_swigt__p_IMorphData,
  &_swigt__p_INode,
  &_swigt__p_IShapeData,
  &_swigt__p_ISkinData,
  &_swigt__p_ITextKeyExtraData,
  &_swigt__p_ITriShapeData,
  &_swigt__p_ITriStripsData,
  &_swigt__p_KeyTQuaternion_t,
  &_swigt__p_KeyTVector3_t,
  &_swigt__p_KeyTfloat_t,
  &_swigt__p_KeyTstd__string_t,
  &_swigt__p_Matrix22,
  &_swigt__p_Matrix33,
  &_swigt__p_Matrix44,
  &_swigt__p_Quaternion,
  &_swigt__p_SkinWeight,
  &_swigt__p_Texture,
  &_swigt__p_TextureSource,
  &_swigt__p_Triangle,
  &_swigt__p_UVCoord,
  &_swigt__p_Vector3,
  &_swigt__p_a_3__float,
  &_swigt__p_a_4__float,
  &_swigt__p_allocator_type,
  &_swigt__p_attr_ref,
  &_swigt__p_blk_link,
  &_swigt__p_blk_ref,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_ifstream,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_ofstream,
  &_swigt__p_second_type,
  &_swigt__p_size_type,
  &_swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t,
  &_swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__allocator_type,
  &_swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type,
  &_swigt__p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t,
  &_swigt__p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t__allocator_type,
  &_swigt__p_std__pairTint_float_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorTColor_std__allocatorTColor_t_t,
  &_swigt__p_std__vectorTColor_std__allocatorTColor_t_t__allocator_type,
  &_swigt__p_std__vectorTColor_std__allocatorTColor_t_t__value_type,
  &_swigt__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t,
  &_swigt__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__allocator_type,
  &_swigt__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type,
  &_swigt__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t,
  &_swigt__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__allocator_type,
  &_swigt__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type,
  &_swigt__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t,
  &_swigt__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__allocator_type,
  &_swigt__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type,
  &_swigt__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t,
  &_swigt__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__allocator_type,
  &_swigt__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type,
  &_swigt__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t,
  &_swigt__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__allocator_type,
  &_swigt__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type,
  &_swigt__p_std__vectorTTriangle_std__allocatorTTriangle_t_t,
  &_swigt__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__allocator_type,
  &_swigt__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type,
  &_swigt__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t,
  &_swigt__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__allocator_type,
  &_swigt__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type,
  &_swigt__p_std__vectorTVector3_std__allocatorTVector3_t_t,
  &_swigt__p_std__vectorTVector3_std__allocatorTVector3_t_t__allocator_type,
  &_swigt__p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type,
  &_swigt__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t,
  &_swigt__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__allocator_type,
  &_swigt__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type,
  &_swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t,
  &_swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__allocator_type,
  &_swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type,
  &_swigt__p_std__vectorTfloat_std__allocatorTfloat_t_t,
  &_swigt__p_std__vectorTfloat_std__allocatorTfloat_t_t__allocator_type,
  &_swigt__p_std__vectorTshort_std__allocatorTshort_t_t,
  &_swigt__p_std__vectorTshort_std__allocatorTshort_t_t__allocator_type,
  &_swigt__p_value_type,
  &_swigt__p_void,
  &_swigt__ptrdiff_t,
  &_swigt__size_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_BoundingBox[] = {  {&_swigt__p_BoundingBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Color[] = {  {&_swigt__p_std__vectorTColor_std__allocatorTColor_t_t__value_type, 0, 0, 0},  {&_swigt__p_Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConditionalInt[] = {  {&_swigt__p_ConditionalInt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Float2[] = {  {&_swigt__p_Float2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Float3[] = {  {&_swigt__p_Float3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Float4[] = {  {&_swigt__p_Float4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IAttr[] = {  {&_swigt__p_IAttr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IBlock[] = {  {&_swigt__p_IBlock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IKeyframeData[] = {  {&_swigt__p_IKeyframeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IMorphData[] = {  {&_swigt__p_IMorphData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INode[] = {  {&_swigt__p_INode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IShapeData[] = {  {&_swigt__p_IShapeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISkinData[] = {  {&_swigt__p_ISkinData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ITextKeyExtraData[] = {  {&_swigt__p_ITextKeyExtraData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ITriShapeData[] = {  {&_swigt__p_ITriShapeData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ITriStripsData[] = {  {&_swigt__p_ITriStripsData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KeyTQuaternion_t[] = {  {&_swigt__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, 0, 0, 0},  {&_swigt__p_KeyTQuaternion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KeyTVector3_t[] = {  {&_swigt__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, 0, 0, 0},  {&_swigt__p_KeyTVector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KeyTfloat_t[] = {  {&_swigt__p_KeyTfloat_t, 0, 0, 0},  {&_swigt__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KeyTstd__string_t[] = {  {&_swigt__p_KeyTstd__string_t, 0, 0, 0},  {&_swigt__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix22[] = {  {&_swigt__p_Matrix22, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix33[] = {  {&_swigt__p_Matrix33, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix44[] = {  {&_swigt__p_Matrix44, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quaternion[] = {  {&_swigt__p_Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SkinWeight[] = {  {&_swigt__p_SkinWeight, 0, 0, 0},  {&_swigt__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Texture[] = {  {&_swigt__p_Texture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TextureSource[] = {  {&_swigt__p_TextureSource, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Triangle[] = {  {&_swigt__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, 0, 0, 0},  {&_swigt__p_Triangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_UVCoord[] = {  {&_swigt__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, 0, 0, 0},  {&_swigt__p_UVCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector3[] = {  {&_swigt__p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, 0, 0, 0},  {&_swigt__p_Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_3__float[] = {  {&_swigt__p_a_3__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_4__float[] = {  {&_swigt__p_a_4__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_attr_ref[] = {  {&_swigt__p_attr_ref, 0, 0, 0},  {&_swigt__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blk_link[] = {  {&_swigt__p_blk_link, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blk_ref[] = {  {&_swigt__p_blk_ref, 0, 0, 0},  {&_swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0, 0, 0},  {&_swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ifstream[] = {  {&_swigt__p_ifstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofstream[] = {  {&_swigt__p_ofstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTblk_ref_std__allocatorTblk_ref_t_t[] = {  {&_swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__allocator_type, 0, 0, 0},  {&_swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type[] = {  {&_swigt__p_blk_ref, 0, 0, 0},  {&_swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0, 0, 0},  {&_swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t[] = {  {&_swigt__p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t__allocator_type[] = {  {&_swigt__p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairTint_float_t[] = {  {&_swigt__p_std__pairTint_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTColor_std__allocatorTColor_t_t[] = {  {&_swigt__p_std__vectorTColor_std__allocatorTColor_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTColor_std__allocatorTColor_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTColor_std__allocatorTColor_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTColor_std__allocatorTColor_t_t__value_type[] = {  {&_swigt__p_std__vectorTColor_std__allocatorTColor_t_t__value_type, 0, 0, 0},  {&_swigt__p_Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t[] = {  {&_swigt__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type[] = {  {&_swigt__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type, 0, 0, 0},  {&_swigt__p_KeyTQuaternion_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t[] = {  {&_swigt__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type[] = {  {&_swigt__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type, 0, 0, 0},  {&_swigt__p_KeyTVector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t[] = {  {&_swigt__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type[] = {  {&_swigt__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type, 0, 0, 0},  {&_swigt__p_KeyTfloat_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t[] = {  {&_swigt__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type[] = {  {&_swigt__p_KeyTstd__string_t, 0, 0, 0},  {&_swigt__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t[] = {  {&_swigt__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type[] = {  {&_swigt__p_SkinWeight, 0, 0, 0},  {&_swigt__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTTriangle_std__allocatorTTriangle_t_t[] = {  {&_swigt__p_std__vectorTTriangle_std__allocatorTTriangle_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type[] = {  {&_swigt__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type, 0, 0, 0},  {&_swigt__p_Triangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t[] = {  {&_swigt__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type[] = {  {&_swigt__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type, 0, 0, 0},  {&_swigt__p_UVCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTVector3_std__allocatorTVector3_t_t[] = {  {&_swigt__p_std__vectorTVector3_std__allocatorTVector3_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTVector3_std__allocatorTVector3_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTVector3_std__allocatorTVector3_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type[] = {  {&_swigt__p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type, 0, 0, 0},  {&_swigt__p_Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t[] = {  {&_swigt__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type[] = {  {&_swigt__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type, 0, 0, 0},  {&_swigt__p_attr_ref, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t[] = {  {&_swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__allocator_type, 0, 0, 0},  {&_swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type[] = {  {&_swigt__p_blk_ref, 0, 0, 0},  {&_swigt__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0, 0, 0},  {&_swigt__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTfloat_std__allocatorTfloat_t_t[] = {  {&_swigt__p_std__vectorTfloat_std__allocatorTfloat_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTfloat_std__allocatorTfloat_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTfloat_std__allocatorTfloat_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTshort_std__allocatorTshort_t_t[] = {  {&_swigt__p_std__vectorTshort_std__allocatorTshort_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTshort_std__allocatorTshort_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTshort_std__allocatorTshort_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__size_t[] = {  {&_swigt__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BoundingBox,
  _swigc__p_Color,
  _swigc__p_ConditionalInt,
  _swigc__p_Float2,
  _swigc__p_Float3,
  _swigc__p_Float4,
  _swigc__p_IAttr,
  _swigc__p_IBlock,
  _swigc__p_IKeyframeData,
  _swigc__p_IMorphData,
  _swigc__p_INode,
  _swigc__p_IShapeData,
  _swigc__p_ISkinData,
  _swigc__p_ITextKeyExtraData,
  _swigc__p_ITriShapeData,
  _swigc__p_ITriStripsData,
  _swigc__p_KeyTQuaternion_t,
  _swigc__p_KeyTVector3_t,
  _swigc__p_KeyTfloat_t,
  _swigc__p_KeyTstd__string_t,
  _swigc__p_Matrix22,
  _swigc__p_Matrix33,
  _swigc__p_Matrix44,
  _swigc__p_Quaternion,
  _swigc__p_SkinWeight,
  _swigc__p_Texture,
  _swigc__p_TextureSource,
  _swigc__p_Triangle,
  _swigc__p_UVCoord,
  _swigc__p_Vector3,
  _swigc__p_a_3__float,
  _swigc__p_a_4__float,
  _swigc__p_allocator_type,
  _swigc__p_attr_ref,
  _swigc__p_blk_link,
  _swigc__p_blk_ref,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_ifstream,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_ofstream,
  _swigc__p_second_type,
  _swigc__p_size_type,
  _swigc__p_std__listTblk_ref_std__allocatorTblk_ref_t_t,
  _swigc__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__allocator_type,
  _swigc__p_std__listTblk_ref_std__allocatorTblk_ref_t_t__value_type,
  _swigc__p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t,
  _swigc__p_std__mapTint_float_std__lessTint_t_std__allocatorTstd__pairTint_const_float_t_t_t__allocator_type,
  _swigc__p_std__pairTint_float_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorTColor_std__allocatorTColor_t_t,
  _swigc__p_std__vectorTColor_std__allocatorTColor_t_t__allocator_type,
  _swigc__p_std__vectorTColor_std__allocatorTColor_t_t__value_type,
  _swigc__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t,
  _swigc__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__allocator_type,
  _swigc__p_std__vectorTKeyTQuaternion_t_std__allocatorTKeyTQuaternion_t_t_t__value_type,
  _swigc__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t,
  _swigc__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__allocator_type,
  _swigc__p_std__vectorTKeyTVector3_t_std__allocatorTKeyTVector3_t_t_t__value_type,
  _swigc__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t,
  _swigc__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__allocator_type,
  _swigc__p_std__vectorTKeyTfloat_t_std__allocatorTKeyTfloat_t_t_t__value_type,
  _swigc__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t,
  _swigc__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__allocator_type,
  _swigc__p_std__vectorTKeyTstd__string_t_std__allocatorTKeyTstd__string_t_t_t__value_type,
  _swigc__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t,
  _swigc__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__allocator_type,
  _swigc__p_std__vectorTSkinWeight_std__allocatorTSkinWeight_t_t__value_type,
  _swigc__p_std__vectorTTriangle_std__allocatorTTriangle_t_t,
  _swigc__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__allocator_type,
  _swigc__p_std__vectorTTriangle_std__allocatorTTriangle_t_t__value_type,
  _swigc__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t,
  _swigc__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__allocator_type,
  _swigc__p_std__vectorTUVCoord_std__allocatorTUVCoord_t_t__value_type,
  _swigc__p_std__vectorTVector3_std__allocatorTVector3_t_t,
  _swigc__p_std__vectorTVector3_std__allocatorTVector3_t_t__allocator_type,
  _swigc__p_std__vectorTVector3_std__allocatorTVector3_t_t__value_type,
  _swigc__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t,
  _swigc__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__allocator_type,
  _swigc__p_std__vectorTattr_ref_std__allocatorTattr_ref_t_t__value_type,
  _swigc__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t,
  _swigc__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__allocator_type,
  _swigc__p_std__vectorTblk_ref_std__allocatorTblk_ref_t_t__value_type,
  _swigc__p_std__vectorTfloat_std__allocatorTfloat_t_t,
  _swigc__p_std__vectorTfloat_std__allocatorTfloat_t_t__allocator_type,
  _swigc__p_std__vectorTshort_std__allocatorTshort_t_t,
  _swigc__p_std__vectorTshort_std__allocatorTshort_t_t__allocator_type,
  _swigc__p_value_type,
  _swigc__p_void,
  _swigc__ptrdiff_t,
  _swigc__size_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)(void);       /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    SWIGINTERN PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    SWIGINTERN int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    SWIGINTERN PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    SWIGINTERN int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    SWIGINTERN PyTypeObject*
    swig_varlink_type(void) {
        static char varlink__doc__[] = "Swig var link object";
        static PyTypeObject varlink_type
#if !defined(__cplusplus)
        ;
        static int type_init = 0;  
        if (!type_init) {
            PyTypeObject tmp
#endif
            = {
                PyObject_HEAD_INIT(&PyType_Type)
                0,                                  /* Number of items in variable part (ob_size) */
                (char *)"swigvarlink",              /* Type name (tp_name) */
                sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
                0,                                  /* Itemsize (tp_itemsize) */
                0,                                  /* Deallocator (tp_dealloc) */ 
                (printfunc) swig_varlink_print,     /* Print (tp_print) */
                (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
                (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
                0,                                  /* tp_compare */
                (reprfunc) swig_varlink_repr,       /* tp_repr */
                0,                                  /* tp_as_number */
                0,                                  /* tp_as_sequence */
                0,                                  /* tp_as_mapping */
                0,                                  /* tp_hash */
                0,                                  /* tp_call */
                0,                                  /* tp_str */
                0,                                  /* tp_getattro */
                0,                                  /* tp_setattro */
                0,                                  /* tp_as_buffer */
                0,                                  /* tp_flags */
                varlink__doc__,                     /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
                0,                                  /* tp_traverse */
                0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
                0,                                  /* tp_richcompare */
                0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
                0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
                0,0,0,0                             /* tp_alloc -> tp_next */
#endif
            };
#if !defined(__cplusplus)
            varlink_type = tmp;
            type_init = 1;
        }
#endif
        return &varlink_type;
    }
    
    /* Create a variable linking object for use later */
    SWIGINTERN PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
        if (result) {
            result->vars = 0;
        }
        return ((PyObject*) result);
    }
    
    SWIGINTERN void 
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v = (swig_varlinkobject *) p;
        swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        if (gv) {
            size_t size = strlen(name)+1;
            gv->name = (char *)malloc(size);
            if (gv->name) {
                strncpy(gv->name,name,size);
                gv->get_attr = get_attr;
                gv->set_attr = set_attr;
                gv->next = v->vars;
            }
        }
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    SWIGINTERN void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; ++i) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    SWIGINTERN void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; ++j) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    if (ndoc) {
                        char *buff = ndoc;
                        void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
                        if (ptr) {
                            strncpy(buff, methods[i].ml_doc, ldoc);
                            buff += ldoc;
                            strncpy(buff, "swig_ptr: ", 10);
                            buff += 10;
                            SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                            methods[i].ml_doc = ndoc;
                        }
                    }
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    SWIGINTERN int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"ID_TRI_SHAPE_DATA",_wrap_ID_TRI_SHAPE_DATA_get, _wrap_ID_TRI_SHAPE_DATA_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ID_SKIN_DATA",_wrap_ID_SKIN_DATA_get, _wrap_ID_SKIN_DATA_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ID_NODE",_wrap_ID_NODE_get, _wrap_ID_NODE_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ID_KEYFRAME_DATA",_wrap_ID_KEYFRAME_DATA_get, _wrap_ID_KEYFRAME_DATA_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ID_TEXT_KEY_EXTRA_DATA",_wrap_ID_TEXT_KEY_EXTRA_DATA_get, _wrap_ID_TEXT_KEY_EXTRA_DATA_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ID_MORPH_DATA",_wrap_ID_MORPH_DATA_get, _wrap_ID_MORPH_DATA_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ID_SHAPE_DATA",_wrap_ID_SHAPE_DATA_get, _wrap_ID_SHAPE_DATA_set);
    SWIG_addvarlink(SWIG_globals,(char*)"ID_TRI_STRIPS_DATA",_wrap_ID_TRI_STRIPS_DATA_get, _wrap_ID_TRI_STRIPS_DATA_set);
    {
        PyDict_SetItemString(d,"attr_int", SWIG_From_int((int)(attr_int))); 
    }
    {
        PyDict_SetItemString(d,"attr_short", SWIG_From_int((int)(attr_short))); 
    }
    {
        PyDict_SetItemString(d,"attr_byte", SWIG_From_int((int)(attr_byte))); 
    }
    {
        PyDict_SetItemString(d,"attr_float", SWIG_From_int((int)(attr_float))); 
    }
    {
        PyDict_SetItemString(d,"attr_float3", SWIG_From_int((int)(attr_float3))); 
    }
    {
        PyDict_SetItemString(d,"attr_string", SWIG_From_int((int)(attr_string))); 
    }
    {
        PyDict_SetItemString(d,"attr_link", SWIG_From_int((int)(attr_link))); 
    }
    {
        PyDict_SetItemString(d,"attr_flags", SWIG_From_int((int)(attr_flags))); 
    }
    {
        PyDict_SetItemString(d,"attr_matrix33", SWIG_From_int((int)(attr_matrix33))); 
    }
    {
        PyDict_SetItemString(d,"attr_linkgroup", SWIG_From_int((int)(attr_linkgroup))); 
    }
    {
        PyDict_SetItemString(d,"attr_bones", SWIG_From_int((int)(attr_bones))); 
    }
    {
        PyDict_SetItemString(d,"attr_bbox", SWIG_From_int((int)(attr_bbox))); 
    }
    {
        PyDict_SetItemString(d,"attr_condint", SWIG_From_int((int)(attr_condint))); 
    }
    {
        PyDict_SetItemString(d,"attr_vertmode", SWIG_From_int((int)(attr_vertmode))); 
    }
    {
        PyDict_SetItemString(d,"attr_lightmode", SWIG_From_int((int)(attr_lightmode))); 
    }
    {
        PyDict_SetItemString(d,"attr_texture", SWIG_From_int((int)(attr_texture))); 
    }
    {
        PyDict_SetItemString(d,"attr_bumpmap", SWIG_From_int((int)(attr_bumpmap))); 
    }
    {
        PyDict_SetItemString(d,"attr_applymode", SWIG_From_int((int)(attr_applymode))); 
    }
    {
        PyDict_SetItemString(d,"attr_texsource", SWIG_From_int((int)(attr_texsource))); 
    }
    {
        PyDict_SetItemString(d,"attr_pixellayout", SWIG_From_int((int)(attr_pixellayout))); 
    }
    {
        PyDict_SetItemString(d,"attr_mipmapformat", SWIG_From_int((int)(attr_mipmapformat))); 
    }
    {
        PyDict_SetItemString(d,"attr_alphaformat", SWIG_From_int((int)(attr_alphaformat))); 
    }
    {
        PyDict_SetItemString(d,"attr_nodeancestor", SWIG_From_int((int)(attr_nodeancestor))); 
    }
    {
        PyDict_SetItemString(d,"attr_skeletonroot", SWIG_From_int((int)(attr_skeletonroot))); 
    }
    {
        PyDict_SetItemString(d,"attr_particlegroup", SWIG_From_int((int)(attr_particlegroup))); 
    }
    {
        PyDict_SetItemString(d,"attr_lodrangegroup", SWIG_From_int((int)(attr_lodrangegroup))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"VER_4_0_0_2",_wrap_VER_4_0_0_2_get, _wrap_VER_4_0_0_2_set);
    SWIG_addvarlink(SWIG_globals,(char*)"VER_4_1_0_12",_wrap_VER_4_1_0_12_get, _wrap_VER_4_1_0_12_set);
    SWIG_addvarlink(SWIG_globals,(char*)"VER_4_2_0_2",_wrap_VER_4_2_0_2_get, _wrap_VER_4_2_0_2_set);
    SWIG_addvarlink(SWIG_globals,(char*)"VER_4_2_1_0",_wrap_VER_4_2_1_0_get, _wrap_VER_4_2_1_0_set);
    SWIG_addvarlink(SWIG_globals,(char*)"VER_4_2_2_0",_wrap_VER_4_2_2_0_get, _wrap_VER_4_2_2_0_set);
    SWIG_addvarlink(SWIG_globals,(char*)"VER_10_0_1_0",_wrap_VER_10_0_1_0_get, _wrap_VER_10_0_1_0_set);
    SWIG_addvarlink(SWIG_globals,(char*)"VER_10_1_0_0",_wrap_VER_10_1_0_0_get, _wrap_VER_10_1_0_0_set);
    SWIG_addvarlink(SWIG_globals,(char*)"VER_10_2_0_0",_wrap_VER_10_2_0_0_get, _wrap_VER_10_2_0_0_set);
    SWIG_addvarlink(SWIG_globals,(char*)"VER_20_0_0_4",_wrap_VER_20_0_0_4_get, _wrap_VER_20_0_0_4_set);
    {
        PyDict_SetItemString(d,"NULL", SWIG_From_int((int)(0))); 
    }
    {
        PyDict_SetItemString(d,"LINEAR_KEY", SWIG_From_int((int)(LINEAR_KEY))); 
    }
    {
        PyDict_SetItemString(d,"QUADRATIC_KEY", SWIG_From_int((int)(QUADRATIC_KEY))); 
    }
    {
        PyDict_SetItemString(d,"TBC_KEY", SWIG_From_int((int)(TBC_KEY))); 
    }
    {
        PyDict_SetItemString(d,"XYZ_ROTATION_KEY", SWIG_From_int((int)(XYZ_ROTATION_KEY))); 
    }
    {
        PyDict_SetItemString(d,"CLAMP_S_CLAMP_T", SWIG_From_int((int)(CLAMP_S_CLAMP_T))); 
    }
    {
        PyDict_SetItemString(d,"CLAMP_S_WRAP_T", SWIG_From_int((int)(CLAMP_S_WRAP_T))); 
    }
    {
        PyDict_SetItemString(d,"WRAP_S_CLAMP_T", SWIG_From_int((int)(WRAP_S_CLAMP_T))); 
    }
    {
        PyDict_SetItemString(d,"WRAP_S_WRAP_T", SWIG_From_int((int)(WRAP_S_WRAP_T))); 
    }
    {
        PyDict_SetItemString(d,"FILTER_NEAREST", SWIG_From_int((int)(FILTER_NEAREST))); 
    }
    {
        PyDict_SetItemString(d,"FILTER_BILERP", SWIG_From_int((int)(FILTER_BILERP))); 
    }
    {
        PyDict_SetItemString(d,"FILTER_TRILERP", SWIG_From_int((int)(FILTER_TRILERP))); 
    }
    {
        PyDict_SetItemString(d,"FILTER_NEAREST_MIPNEAREST", SWIG_From_int((int)(FILTER_NEAREST_MIPNEAREST))); 
    }
    {
        PyDict_SetItemString(d,"FILTER_NEAREST_MIPLERP", SWIG_From_int((int)(FILTER_NEAREST_MIPLERP))); 
    }
    {
        PyDict_SetItemString(d,"FILTER_BILERP_MIPNEAREST", SWIG_From_int((int)(FILTER_BILERP_MIPNEAREST))); 
    }
}

